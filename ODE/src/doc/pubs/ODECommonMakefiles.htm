<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta http-equiv="updated" content="Tue, 17 Mar 1998 11:52:28">
   <meta http-equiv="review" content="Wed, 17 Mar 1999 11:52:28">
   <meta http-equiv="expires" content="Fri, 17 Mar 2000 11:52:28">
   <meta name="GENERATOR" content="Mozilla/4.76 [en] (Windows NT 5.0; U) [Netscape]">
   <meta name="ProgId" content="FrontPage.Editor.Document">
   <meta name="Author" content="Steve Speicher">
   <title>ODE Common Makefiles</title>
</head>
<body bgcolor="#FFFFFF">
<img SRC="bannerx.gif" ALT="IBM Books" height=92 width=490>
<br><a NAME="Top_Of_Page"></a>
<h1>
ODE Common Makefiles</h1>
Open Development Environment
<br>Common Makefiles
<p>Version %RELEASE_NAME% (Build %LEVEL_NAME%, %BUILD_DATE%)
<p>
<hr>
<h2>
<a NAME="ToC"></a>Table of Contents</h2>
<a NAME="ToC_AboutthisDoc"></a><b><a href="#AboutthisDoc">About this document</a></b>
<br><a NAME="ToC_OrgCommonMF"></a><b><a href="#OrgCommonMF">Organization
of common makefiles</a></b>
<br><a NAME="ToC_SupportedToolsCompilers"></a><b><a href="#SupportedToolsCompilers">Supported
tools and compilers</a></b>
<br><a NAME="ToC_Passes"></a><b><a href="#Passes">Passes</a></b>
<ul>
<li>
<a NAME="ToC_PredefinedPasses"></a><a href="#PredefinedPasses">Predefined
passes and associated targets</a></li>

<li>
<a NAME="ToC_ExecutingSpecificPass"></a><a href="#ExecutingSpecificPass">Executing
a specific pass</a></li>

<li>
<a NAME="ToC_SettingSubdirstoTraverse"></a><a href="#SettingSubdirstoTraverse">Setting
subdirectories to traverse</a></li>

<li>
<a NAME="ToC_AddingTargetPass"></a><a href="#AddingTargetPass">Adding a
target to a predefined passes and actions</a></li>

<li>
<a NAME="ToC_AddingAnotherPass"></a><a href="#AddingAnotherPass">Adding
another pass</a></li>

<li>
<a NAME="ToC_AddingAnotherActionTarget"></a><a href="#AddingAnotherActionTarget">Adding
another action and associated targets</a></li>

<li>
<a NAME="ToC_AddingAnotherPlatform"></a><a href="#AddingAnotherPlatform">Adding
another platform</a></li>
</ul>
<a NAME="ToC_CCppRules"></a><b><a href="#CCppRules">C/C++ rules</a></b>
<ul>
<li>
<a NAME="ToC_DefaultVarsBldTools"></a><a href="#DefaultVarsBldTools">Default
variables for build tools</a></li>

<li>
<a NAME="ToC_SelectingCCompiler"></a><a href="#SelectingCCompiler">Selecting
a C/C++ compiler, linker and archiver</a></li>

<li>
<a NAME="ToC_SettingCCPPCompilerFlags"></a><a href="#SettingCCPPCompilerFlags">Setting
C/C++ compiler flags</a></li>

<li>
<a NAME="ToC_ComVars"></a><a href="#Header_ComVars">Setting C/C++ compiler
command line variables</a></li>

<li>
<a NAME="ToC_SettingCCPPOptDbgFlags"></a><a href="#SettingCCPPOptDbgFlags">Setting
C/C++ optimization and debugging flags</a></li>

<li>
<a NAME="ToC_SettingCCPPCompilerIncDirs"></a><a href="#SettingCCPPCompilerIncDirs">Setting
C/C++ compiler include directories</a></li>

<li>
<a NAME="ToC_SettingLinkerFlags"></a><a href="#SettingLinkerFlags">Setting
linker flags</a></li>

<li>
<a NAME="ToC_SettingLinkerSearchDirs"></a><a href="#SettingLinkerSearchDirs">Setting
linker library search directories</a></li>

<li>
<a NAME="ToC_AddingProgramTarget"></a><a href="#AddingProgramTarget">Adding
a program target</a></li>

<li>
<a NAME="ToC_LocationforBuiltObjs"></a><a href="#LocationforBuiltObjs">Location
for built object files</a></li>

<li>
<a NAME="ToC_c_and_cpp"></a><a href="#c_and_cpp">Building C and C++ in
the same directory</a></li>

<li>
<a NAME="ToC_Strip_Tool"></a><a href="#Strip_Tool">Strip tool usage</a></li>
</ul>
<a NAME="ToC_GendepRules"></a><b><a href="#GendepRules">Dependency generation
rules</a></b>
<ul>
<li>
<a NAME="ToC_GendepFlags"></a><a href="#GendepFlags">Gendep variables</a></li>

<li>
<a NAME="ToC_UseGendepTable"></a><a href="#UseGendepTable">Default Gendep
usage</a></li>

<li>
<a NAME="ToC_GendepMakefile"></a><a href="#GendepMakefile">Example makefile</a></li>
</ul>
<a NAME="ToC_JavaRules"></a><b><a href="#JavaRules">Java rules</a></b>
<ul>
<li>
<a NAME="ToC_JavaVariables"></a><a href="#JavaVariables">Java variables</a></li>
</ul>

<blockquote>
<ul>
<li>
<a NAME="ToC_JavaCompilerVars"></a><a href="#JavaCompilerVars">Java compiler
variables</a></li>

<li>
<a NAME="ToC_JarFileVars"></a><a href="#JarFileVars">Jar/Ear/War file variables</a></li>

<li>
<a NAME="ToC_SignedJarFileVars"></a><a href="#SignedJarFileVars">Signed
jar/ear/war file variables</a></li>

<li>
<a NAME="ToC_JavadocVars"></a><a href="#JavadocVars">Javadoc variables</a></li>

<li>
<a NAME="ToC_JavadepVars"></a><a href="#JavadepVars">Java dependency file
variables</a></li>

<li>
<a NAME="ToC_JavahVars"></a><a href="#JavahVars">Java header file variables</a></li>

<li>
<a NAME="ToC_RMIVars"></a><a href="#RMIVars">RMI compiler variables</a></li>

<li>
<a NAME="ToC_JavaMiscVars"></a><a href="#JavaMiscVars">Miscellaneous variables</a></li>
</ul>
</blockquote>

<ul>
<li>
<a NAME="ToC_JavaPasses"></a><a href="#JavaPasses">Passes used for Java
processing</a></li>

<li>
<a NAME="ToC_LocationForClassFiles"></a><a href="#LocationForClassFiles">Location
for built class files</a></li>

<li>
<a NAME="ToC_JavaDependencyGeneration"></a><a href="#JavaDependencyGeneration">Dependency
generation</a></li>

<li>
<a NAME="ToC_JavaMakefile"></a><a href="#JavaMakefile">Example makefile</a></li>
</ul>
<a NAME="ToC_ShlibRules"></a><b><a href="#ShlibRules">Shared library rules</a></b>
<ul>
<li>
<a NAME="ToC_ShlibVariables"></a><a href="#ShlibVariables">Variables</a></li>

<li>
<a NAME="ToC_ShlibMakefile"></a><a href="#ShlibMakefile">Example makefile</a></li>

<li>
<a NAME="ToC_ShlibNotes"></a><a href="#ShlibNotes">Compiler notes</a></li>

<li>
<a NAME="ToC_ShlibNotes_aixcset"></a><a href="#ShlibNotes_aixcset">cset
(AIX)</a></li>

<li>
<a NAME="ToC_ShlibNotes_mvsnative"></a><a href="#ShlibNotes_mvsnative">native
(MVS/USS)</a></li>

<li>
<a NAME="ToC_ShlibNotes_vage"></a><a href="#ShlibNotes_vage">vage (Windows
NT/95 and OS/2)</a></li>

<li>
<a NAME="ToC_ShlibNotes_visual"></a><a href="#ShlibNotes_visual">visual
(Windows NT/95)</a></li>
</ul>
<a NAME="ToC_ExportingRules"></a><b><a href="#ExportingRules">Exporting
rules</a></b>
<br><a NAME="ToC_SetupRules"></a><b><a href="#SetupRules">Setup rules</a></b>
<br><a NAME="ToC_InstallRules"></a><b><a href="#InstallRules">Install rules</a></b>
<ul>
<li>
<a NAME="ToC_UsingMakefiletoInstall"></a><a href="#UsingMakefiletoInstall">Using
the makefile to specify installation of a new target</a></li>
</ul>
<a NAME="ToC_NLSRules"></a><b><a href="#NLSRules">NLS rules</a></b>
<ul>
<li>
<a NAME="ToC_NLSOrganization"></a><a href="#NLSOrganization">Organization</a></li>

<li>
<a NAME="ToC_NLSPrograms"></a><a href="#NLSPrograms">Programs and shared
libraries</a></li>

<li>
<a NAME="ToC_NLSJavaProperties"></a><a href="#NLSJavaProperties">Java properties</a></li>

<li>
<a NAME="ToC_NLSHelps"></a><a href="#NLSHelps">Help files</a></li>

<li>
<a NAME="ToC_NLSIPFHelps"></a><a href="#NLSIPFHelps">IPF help files</a></li>

<li>
<a NAME="ToC_NLSMessages"></a><a href="#NLSMessages">Messages</a></li>

<li>
<a NAME="ToC_NLSCatalogs"></a><a href="#NLSCatalogs">Catalogs</a></li>

<li>
<a NAME="ToC_NLSCodePage"></a><a href="#NLSCodePage">Codepage conversions</a></li>

<li>
<a NAME="ToC_MsgbindVariables"></a><a href="#MsgbindVariables">Msgbind
Variables</a></li>
</ul>
<a NAME="ToC_Resource Rules"></a><b><a href="#ResourceRules">Resource rules</a></b>
<ul>
<li>
<a NAME="ToC_ResourceFileVariables"></a><a href="#ResourceFileVariables">Resource
file variables</a></li>

<li>
<a NAME="ToC_DependencyRulesforResources"></a><a href="#DependencyRulesforResources">Dependency
rules for resources</a></li>
</ul>

<p><br><a NAME="ToC_LexRules"></a><b><a href="#LexRules">Lex rules</a></b>
<br><a NAME="ToC_YaccRules"></a><b><a href="#YaccRules">Yacc rules</a></b>
<br><a NAME="ToC_CMVCRules"></a><b><a href="#CMVCRules">CMVC rules</a></b>
<br><a NAME="ToC_TargSpecVar"></a><b><a href="#TargSpecVar">Target-specific
variables</a></b>
<br><a NAME="ToC_MiscRules"></a><b><a href="#MiscRules">Miscellaneous rules</a></b>
<ul>
<li>
<a NAME="ToC_Longcommandlines"></a><a href="#Longcommandlines">Long command
lines</a></li>

<li>
<a NAME="ToC_SubDirLogRules"></a><a href="#SubDirLogRules">Logging per
directory output</a></li>

<li>
<a NAME="ToC_FilesInCurDir"></a><a href="#FilesInCurDir">Files in the current
directory</a></li>

<li>
<a NAME="ToC_concurrent_dirs"></a><a href="#concurrent_dirs">Building subdirectories
concurrently</a></li>

<li>
<a NAME="ToC_special_passes"></a><a href="#special_passes">Avoiding recursive
Make</a></li>
</ul>

<hr width="100%">
<h1>
<a NAME="AboutthisDoc"></a><a href="#ToC_AboutthisDoc">About this document</a></h1>
This document is intended to explain the purpose of the base set of rules
supplied in the common makefiles.
<p>See the <i><a href="index.htm">ODE Documentation Index</a></i> for a
complete list of ODE documents and their purposes.
<br>
<hr width="100%">
<h1>
<a NAME="OrgCommonMF"></a><a href="#ToC_OrgCommonMF">Organization of common
makefiles</a></h1>
The following is an expanded view of the makefiles that get included from
the user level makefile. These files provide the underlying capabilities
of ODE. Some of these capabilities are: executing basic compiles, executing
passes, creating packages, and much more.&nbsp; User level makefiles will
explicitly include rules.mk.&nbsp; The Makeconf file is implicitly included
before any other makefiles.
<p>The line<b> .include &lt;${RULES_MK}></b> is positioned according to
requirements.
<p>For more information about the makefile syntax, see the <i><a href="ODEMakeReference.htm">ODE
Make Reference</a></i>.
<p><font face="Courier New,Courier">&lt;<i>root of src tree</i>>/Makeconf</font>
<br><font face="Courier New,Courier">&nbsp; +- &lt;context>.mk</font>
<br><font face="Courier New,Courier">&lt;<i>subdirectory in backing build
or sandbox</i>>/makefile.ode (it can also be named: Makefile.ode, makefile
or Makefile)</font>
<br><font face="Courier New,Courier">&nbsp; +- rules.mk</font>
<br><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- std.mk</font>
<br><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- java.std.mk</font>
<br><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- passes.mk</font>
<br><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- bld.passes.mk</font>
<br><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- pkg.passes.mk</font>
<br><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- &lt;<i>project name</i>>.passes.mk</font>
<br><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- bld.std.mk</font>
<br><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- export.mk</font>
<br><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- pkg.std.mk</font>
<br><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- bld.rules.mk</font>
<br><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- nls.mk</font>
<br><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- res.mk</font>
<br><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- help.mk</font>
<br><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- prog.mk</font>
<br><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- lib.mk</font>
<br><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- dep.mk</font>
<br><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- obj.mk</font>
<br><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- cmvc.mk</font>
<br><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- java.mk</font>
<br><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- bld.install.mk</font>
<br><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- pkg.rules.mk</font>
<br><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- pkg.installmvs.mk</font>
<br><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- pkg.parse.mk</font>
<br><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- pkg.runpkgtool.mk</font>
<br><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- pkg.svc390.mk</font>
<br><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- &lt;<i>project name</i>>.rules.mk</font>
<br><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- clean.mk</font>
<p>The files in the <b><font face="Courier">rules_mk</font></b> directory
can be thought of in two ways:&nbsp; 1) they are property of the ODE product
and should be considered read-only and only extended, or 2) that they are
the starting point of what rules your project needs. If you choose to treat
them as part of the ODE product you have the ability to "drop in" new versions
of these files as they become available from new releases or bug fixes.&nbsp;
The advantage to not modifying the supplied common makefiles is that you
would have to do time consuming difference comparisons between your current
version and the version you are trying to replace it with.
<p>In order to customize the common makefiles provided by ODE you can add
your own <b><font face="Courier New,Courier">&lt;<i>project name</i>>.rules.mk</font></b>
file or<b> <font face="Courier New,Courier">&lt;<i>project name</i>>.passes.mk</font></b>
file to the <b><font face="Courier New,Courier">rules_mk</font></b> directory.&nbsp;
By default ODE attempts to include <b><font face="Courier New,Courier">&lt;<i>project
name</i>>.rules.mk</font></b> from <b><font face="Courier New,Courier">rules.mk</font></b>
if the variable <i>PROJECT_NAME</i> is defined to be <b><i>project name</i></b>.&nbsp;
Similarly, by default ODE attempts to include <b><i><font face="Courier">&lt;project
name>.passes.mk</font></i></b> from <b><font face="Courier">passes.mk</font></b>.
For example, the <i><a href="ODETutorial.htm">ODE Tutorial</a></i> has
a project name of <b><font face="Courier New,Courier">myproj</font></b>
which is set in its <b><font face="Courier">Buildconf</font></b> file.&nbsp;
Additional customization can occur in <font face="Courier">Makeconf</font>
and local makefiles.
<h1>
<a NAME="SupportedToolsCompilers"></a><a href="#ToC_SupportedToolsCompilers">Supported
tools and compilers</a></h1>

<table BORDER COLS=7 WIDTH="100%" >
<tr>
<td ALIGN=CENTER ROWSPAN="2"><b><font size=+1>Platform</font></b></td>

<td ALIGN=CENTER COLSPAN="2"><b><font size=+1>C/C++</font></b></td>

<td ALIGN=CENTER COLSPAN="2"><b><font size=+1>Java</font></b></td>

<td ALIGN=CENTER COLSPAN="2"><b>Lex/Yacc</b></td>
</tr>

<tr>
<td><b>Tools</b></td>

<td><b>Description</b></td>

<td><b>Tools</b></td>

<td><b>Description</b></td>

<td><b>Tools</b></td>

<td><b>Description</b></td>
</tr>

<tr>
<td>AIX</td>

<td>IBM C Set++<sub>1,2</sub>
<p>GCC 2.7+&nbsp;
<p>ar</td>

<td>Create objects, static and dynamic libraries, programs, source files.</td>

<td>javac
<br>javah
<br>jar
<br>javadoc
<br>rmic</td>

<td>Create class files, headers, jar archives, docs, and RMI stubs.</td>

<td>lex&nbsp;
<br>yacc</td>

<td>Create C source files.</td>
</tr>

<tr>
<td>HP-UX</td>

<td>HP-UX aC++<sub>1,3</sub>
<p>HP-UX C<sub>2</sub>
<p>GCC 2.7+&nbsp;
<p>ar</td>

<td>Create objects, static and dynamic libraries, programs, source files.</td>

<td>javac
<br>javah
<br>jar
<br>javadoc
<br>rmic</td>

<td>Create class files, headers, jar archives, docs, and RMI stubs.</td>

<td>lex&nbsp;
<br>yacc</td>

<td>Create C source files.</td>
</tr>

<tr>
<td>IRIX</td>

<td>MIPSpro C/C++<sub>1,2</sub>
<p>GCC 2.7+&nbsp;
<p>ar</td>

<td>Create objects, static and dynamic libraries, programs, source files.</td>

<td>javac
<br>javah
<br>jar
<br>javadoc
<br>rmic</td>

<td>Create class files, headers, jar archives, docs, and RMI stubs.</td>

<td>lex&nbsp;
<br>yacc</td>

<td>Create C source files.</td>
</tr>

<tr>
<td>Linux</td>

<td>GCC 2.7+<sub>1,2</sub>
<p>ar</td>

<td>Create objects, static and dynamic libraries, programs, source files.</td>

<td>javac
<br>javah
<br>jar
<br>javadoc
<br>rmic</td>

<td>Create class files, headers, jar archives, docs, and RMI stubs.</td>

<td>lex&nbsp;
<br>yacc</td>

<td>Create C source files.</td>
</tr>

<tr>
<td>MVS/USS</td>

<td>C++/MVS<sub>1</sub>
<p>C/MVS<sub>2</sub>
<p>ar</td>

<td>Create objects, static and dynamic libraries, programs.</td>

<td>javac
<br>javah
<br>jar
<br>javadoc
<br>rmic</td>

<td>Create class files, headers, jar archives, docs, and RMI stubs.</td>

<td>N/A</td>

<td>Available but not tested.</td>
</tr>

<tr>
<td>OS/2</td>

<td>VisualAgeC++ 3.0<sub>1,2</sub>
<p>VisualAge C++ 3.6</td>

<td>Create objects, static and dynamic libraries, programs.</td>

<td>javac
<br>javah
<br>jar
<br>javadoc
<br>rmic</td>

<td>Create class files, headers, jar archives, docs, and RMI stubs.</td>

<td>N/A</td>

<td>Available but not tested.</td>
</tr>

<tr>
<td>OS/400</td>

<td>ILE C/C++&nbsp;
<p>qar&nbsp;
<p>ld</td>

<td>Create objects, static and dynamic libraries, programs.</td>

<td>javac
<br>javah
<br>jar
<br>javadoc
<br>rmic</td>

<td>Create class files, headers, jar archives, docs, and RMI stubs.</td>

<td>N/A</td>

<td>Availability unknown.</td>
</tr>

<tr>
<td>Solaris</td>

<td>SunWorkshop C/C++ 4.2+<sub>1,2</sub>
<p>IBM C Set++&nbsp;
<p>GCC 2.7+&nbsp;
<p>KAI C++ 3.4+
<p>ar</td>

<td>Create objects, static and dynamic libraries, programs, source files.</td>

<td>javac
<br>javah
<br>jar
<br>javadoc
<br>rmic</td>

<td>Create class files, headers, jar archives, docs, and RMI stubs.</td>

<td>lex&nbsp;
<br>yacc</td>

<td>Create C source files.</td>
</tr>

<tr>
<td>Tru64</td>

<td>Compaq C/C++<sub>1,2</sub>
<p>ar</td>

<td>Create objects, static and dynamic libraries, programs, source files.</td>

<td>javac
<br>javah
<br>jar
<br>javadoc
<br>rmic</td>

<td>Create class files, headers, jar archives, docs, and RMI stubs.</td>

<td>lex
<br>yacc</td>

<td>Create C source files.</td>
</tr>

<tr>
<td>Windows95/NT</td>

<td>VisualAgeC++ 3.5&nbsp;
<p>VisualC++ 4.0+<sub>1,2</sub></td>

<td>Create objects, static and dynamic libraries, programs.</td>

<td>javac
<br>javah
<br>jar
<br>javadoc
<br>rmic</td>

<td>Create class files, headers, jar archives, docs, and RMI stubs.</td>

<td>N/A</td>

<td>Available but not tested.</td>
</tr>
</table>

<ol>
<li>
Default C++ compiler for the specified platform.</li>

<li>
Default C compiler for the specified platform.</li>

<li>
The HP (aCC compiler) preprocessor is partially supported. See the <i><a href="ODETutorial.htm#Installing ODE and the Backing Build Example">ODE
Tutorial</a></i> for more information.</li>
</ol>

<hr width="100%">
<h1>
<a NAME="Passes"></a><a href="#ToC_Passes">Passes</a></h1>
See Builds in <i><a href="ODEConcepts.htm#HDRBUILDS">ODE Concepts</a></i>
for more information on the concept of passes.&nbsp; A pass by itself performs
no action.&nbsp; An action must be applied to a pass to perform an action.&nbsp;
For example, the <b>STANDARD</b> pass can have the <b>CLOBBER</b> action
performed on it which causes all the directories listed for the <b>STANDARD</b>
pass to be traversed and have the <b>CLOBBER</b> action performed.&nbsp;
See below tables for predefined passes and the main targets that trigger
passes and actions.
<h2>
<a NAME="PredefinedPasses"></a><a href="#ToC_PredefinedPasses">Predefined
passes and associated targets</a></h2>
The following table lists the predefined passes supplied in the common
makefiles.&nbsp; These passes could be reused if additional actions are
required.&nbsp; See following sections about making modifications to the
default passes and actions behavior.
<table BORDER COLS=2 WIDTH="100%" >
<caption><b><font size=+1>Predefined Passes</font></b></caption>

<tr>
<td WIDTH="10%"><b>Pass</b></td>

<td><b>Description</b></td>
</tr>

<tr>
<td>SETUP</td>

<td>Subdirectories to traverse to execute setup targets.</td>
</tr>

<tr>
<td>JAVADOC</td>

<td>Subdirectories to traverse to generate Java API documentation (<b>BUILDJAVADOCS</b>
must be defined for any actions to occur, unless the <b>javadoc_all</b>
target is used to build the docs).</td>
</tr>

<tr>
<td WIDTH="20%">EXPINC</td>

<td>Subdirectories to traverse to export C/C++ header files and to generate
Java headers/stubs with javah and rmic.&nbsp; See also <b>JAVAH</b>.</td>
</tr>

<tr>
<td>JAVAH</td>

<td>When <b>USE_JAVA_PASSES</b> is defined, this is the pass name used
instead of <b>EXPINC</b>.&nbsp; It is the same as <b>EXPINC</b> except
that only Java-related actions are performed.</td>
</tr>

<tr>
<td>OBJECTS</td>

<td>Subdirectories to traverse to generate object files from C/C++ source
files, and to compile Java source code into class files.&nbsp; See also
<b>JAVAC</b>.</td>
</tr>

<tr>
<td>JAVAC</td>

<td>When <b>USE_JAVA_PASSES</b> is defined, this is the pass name used
instead of <b>OBJECTS</b>.&nbsp; It is the same as <b>OBJECTS</b> except
that only Java-related actions are performed.</td>
</tr>

<tr>
<td>EXPLIB</td>

<td>Subdirectories to traverse to generate static and dynamic libraries
and export them, and to generate Java jar archives.</td>
</tr>

<tr>
<td>JAR</td>

<td>When <b>USE_JAVA_PASSES</b> is defined, this is the pass name used
instead of <b>EXPLIB</b>.&nbsp; It is the same as <b>EXPLIB</b> except
that only Java-related actions are performed.</td>
</tr>

<tr>
<td>EXPSHLIB</td>

<td>Subdirectories to traverse to generate dynamic libraries and export
them.&nbsp; Only used if <b>SHLIB_DURING_EXPSHLIB</b> is defined.</td>
</tr>

<tr>
<td>STANDARD</td>

<td>Subdirectories to traverse to generate program executables, ear and
war files, depend targets, clean targets, clobber targets and install targets.</td>
</tr>

<tr>
<td>EARWAR</td>

<td>When <b>USE_JAVA_PASSES</b> is defined, this is the pass name used
instead of <b>STANDARD</b>.&nbsp; It is the same as <b>EXPLIB</b> except
that only Java-related actions (ear and war file creation) are performed.</td>
</tr>

<tr>
<td>CMFPARSE</td>

<td>Subdirectories to traverse to parse the CMF.</td>
</tr>

<tr>
<td>RUNPKGTOOL</td>

<td>Subdirectories to traverse to run the packaging tool.</td>
</tr>

<tr>
<td>INSTALLMVS</td>

<td>Subdirectories to traverse to install MVS targets.</td>
</tr>
</table>
The following table lists all the main targets and the lower level targets
that they execute using passes and actions.&nbsp; The main targets are
those that are targets that trigger the passes and actions to be performed.&nbsp;
The order of the passes shown for each main target is the order in which
they are processed.
<br>&nbsp;
<table BORDER COLS=4 WIDTH="100%" >
<caption><a NAME="TGTS for Passes/Actions"></a><b><font size=+1>Main Targets
and the Passes/Actions that are Executed</font></b></caption>

<tr>
<td><b>Main Target</b></td>

<td><b>Pass</b></td>

<td><b>Action</b></td>

<td><b>Targets Defined by Variables&nbsp;</b>
<br>(unless marked by <i>(literal)</i>)</td>
</tr>

<tr>
<td ROWSPAN="11">build_all <i>(default)</i></td>

<td>JAVADOC<sub>10</sub></td>

<td>BUILD</td>

<td><i>See javadoc_all/JAVADOC/JAVADOC</i></td>
</tr>

<tr>
<td>EXPINC</td>

<td>BUILD</td>

<td><i>See export_all/EXPINC/EXPORT</i></td>
</tr>

<tr>
<td>JAVAH<sub>6</sub></td>

<td>BUILD</td>

<td><i>See export_all/JAVAH/EXPORT</i></td>
</tr>

<tr>
<td>OBJECTS</td>

<td>BUILD</td>

<td><i>See comp_all/OBJECTS/COMP</i></td>
</tr>

<tr>
<td>JAVAC<sub>7</sub></td>

<td>BUILD</td>

<td><i>See comp_all/JAVAC/COMP</i></td>
</tr>

<tr>
<td>JAVADOC<sub>11</sub></td>

<td>BUILD</td>

<td><i>See javadoc_all/JAVADOC/JAVADOC</i></td>
</tr>

<tr>
<td>EXPLIB</td>

<td>BUILD</td>

<td><i>See export_all/EXPLIB/EXPORT</i></td>
</tr>

<tr>
<td>JAR<sub>8</sub></td>

<td>BUILD</td>

<td><i>See export_all/JAR/EXPORT</i></td>
</tr>

<tr>
<td>EXPSHLIB<sub>5</sub></td>

<td>BUILD</td>

<td><i>See export_all/EXPSHLIB/EXPORT</i></td>
</tr>

<tr>
<td>STANDARD<sub>9</sub></td>

<td>BUILD</td>

<td><i>See comp_all/STANDARD/COMP</i></td>
</tr>

<tr>
<td>EARWAR<sub>14</sub></td>

<td>BUILD</td>

<td><i>See comp_all/EARWAR/COMP</i></td>
</tr>

<tr>
<td>rmtarget_all</td>

<td>STANDARD</td>

<td>RMTARGET</td>

<td>PROGRAMS&nbsp;
<br>LIBRARIES&nbsp;
<br>EXPLIBS
<br>EXPLIB_TARGETS
<br>SHARED_LIBRARIES
<br>NLV_PROGRAMS
<br>NLV_SHARED_LIBRARIES
<br>RESOURCES
<br>NLV_RESOURCES
<br>JAR_LIBRARIES&nbsp;
<br>SIGNED_JAR_LIBRARIES&nbsp;
<br>JAVA_CLASSES
<br>OBJECTS&nbsp;
<br>OTHERS<sub>3</sub></td>
</tr>

<tr>
<td>clean_all</td>

<td>STANDARD</td>

<td>CLEAN</td>

<td>all targets from rmtarget_all
<br>OFILES
<br>GARBAGE<sub>4</sub>
<br>PROPERTIES
<br>RMI_CLASSES</td>
</tr>

<tr>
<td>clobber_all</td>

<td>STANDARD</td>

<td>CLOBBER</td>

<td>all targets from clean_all
<br>EXPINCS
<br>EXPINC_TARGETS
<br>JAVAH_TARGETS&nbsp;
<br>CATALOGS
<br>MSG_HDRS
<br>CODEPAGE_TGTS
<br>HELPS
<br>IPFHELPS
<br>INFS
<br>MC_HDRS
<br>NLV_HELPS
<br>NLV_IPFHELPS
<br>NLV_INFS</td>
</tr>

<tr>
<td ROWSPAN="9">comp_all</td>

<td>JAVADOC<sub>10</sub></td>

<td>COMP</td>

<td><i>See javadoc_all/JAVADOC/JAVADOC</i></td>
</tr>

<tr>
<td>OBJECTS</td>

<td>COMP</td>

<td>OBJECTS&nbsp;
<br>JAVA_CLASSES
<br>JAVAC_TARGETS <i>(literal)</i>
<br>RMI_CLASSES<sub>12</sub>
<br>PROPERTIES
<br>RESOURCES</td>
</tr>

<tr>
<td>JAVAC<sub>7</sub></td>

<td>COMP</td>

<td>JAVA_CLASSES
<br>JAVAC_TARGETS (<i>literal</i>)
<br>RMI_CLASSES<sub>12</sub>
<br>OBJECTS</td>
</tr>

<tr>
<td>JAVADOC<sub>11</sub></td>

<td>COMP</td>

<td><i>See javadoc_all/JAVADOC/JAVADOC</i></td>
</tr>

<tr>
<td>EXPLIB</td>

<td>COMP</td>

<td><i>See export_all/EXPLIB/EXPORT</i></td>
</tr>

<tr>
<td>JAR<sub>8</sub></td>

<td>COMP</td>

<td><i>See export_all/JAR/EXPORT</i></td>
</tr>

<tr>
<td>EXPSHLIB<sub>5</sub></td>

<td>COMP</td>

<td><i>See export_all/EXPSHLIB/EXPORT</i></td>
</tr>

<tr>
<td>STANDARD<sub>9</sub></td>

<td>COMP</td>

<td>PROGRAMS&nbsp;
<br>NLV_PROGRAMS
<br>PREPROCESS
<br>INFS
<br>NLV_INFS
<br>OTHERS<sub>3</sub>
<br>SHARED_LIBRARIES<sub>2</sub>
<br>NLV_SHARED_LIBRARIES<sub>2</sub>
<br>EAR_LIBRARIES
<br>WAR_LIBRARIES
<br>SIGNED_EAR_LIBRARIES
<br>SIGNED_WAR_LIBRARIES</td>
</tr>

<tr>
<td>EARWAR<sub>14</sub></td>

<td>COMP</td>

<td>EAR_LIBRARIES
<br>WAR_LIBRARIES
<br>SIGNED_EAR_LIBRARIES
<br>SIGNED_WAR_LIBRARIES</td>
</tr>

<tr>
<td>depend_all</td>

<td>STANDARD</td>

<td>DEPEND</td>

<td>JAVADEP_TARGETS <i>(literal)</i>
<br>OBJECTS
<br>OFILES
<br>&lt;target name>_OFILES</td>
</tr>

<tr>
<td ROWSPAN="7">export_all</td>

<td>EXPINC</td>

<td>EXPORT</td>

<td>INCLUDES
<br>EXPINCS
<br>EXPINC_TARGETS
<br>RMI_CLASSES<sub>13</sub>
<br>JAVAH_TARGETS
<br>CATALOGS
<br>HELPS
<br>NLV_HELPS
<br>IPFHELPS
<br>NLV_IPFHELPS
<br>MC_HDRS
<br>CODEPAGE_TGTS
<br>MSG_HDRS</td>
</tr>

<tr>
<td>JAVAH<sub>6</sub></td>

<td>EXPORT</td>

<td>INCLUDES
<br>EXPINCS
<br>EXPINC_TARGETS
<br>RMI_CLASSES<sub>13</sub>
<br>JAVAH_TARGETS</td>
</tr>

<tr>
<td>OBJECTS</td>

<td>EXPORT</td>

<td><i>See comp_all/OBJECTS/COMP</i></td>
</tr>

<tr>
<td>JAVAC<sub>7</sub></td>

<td>EXPORT</td>

<td><i>See comp_all/JAVAC/COMP</i></td>
</tr>

<tr>
<td>EXPLIB</td>

<td>EXPORT</td>

<td>EXPLIBS
<br>EXPLIB_TARGETS&nbsp;
<br>JAR_LIBRARIES
<br>SIGNED_JAR_LIBRARIES
<br>LIBRARIES
<br>SHARED_LIBRARIES<sub>1</sub>
<br>NLV_SHARED_LIBRARIES<sub>1</sub></td>
</tr>

<tr>
<td>JAR<sub>8</sub></td>

<td>EXPORT</td>

<td>JAR_LIBRARIES
<br>SIGNED_JAR_LIBRARIES
<br>EXPLIBS
<br>EXPLIB_TARGETS&nbsp;</td>
</tr>

<tr>
<td>EXPSHLIB<sub>5</sub></td>

<td>EXPORT</td>

<td>SHARED_LIBRARIES<sub>5</sub>
<br>NLV_SHARED_LIBRARIES<sub>5</sub></td>
</tr>

<tr>
<td ROWSPAN="2">gather_all</td>

<td>STANDARD</td>

<td>GATHER</td>

<td><i>See install_all/STANDARD/INSTALL</i></td>
</tr>

<tr>
<td>INSTALLMVS</td>

<td>GATHER</td>

<td><i>See installmvs_all/INSTALLMVS/INSTALLMVS</i></td>
</tr>

<tr>
<td>install_all</td>

<td>STANDARD</td>

<td>INSTALL</td>

<td>ILIST</td>
</tr>

<tr>
<td>instdep_all</td>

<td>STANDARD</td>

<td>INSTDEP</td>

<td>ILIST</td>
</tr>

<tr>
<td>installmvs_all</td>

<td>INSTALLMVS</td>

<td>INSTALLMVS</td>

<td>INSTALLMVS_TARGETS <i>(literal)</i></td>
</tr>

<tr>
<td>javadoc_all</td>

<td>JAVADOC</td>

<td>JAVADOC</td>

<td>JAVADOC_TARGETS <i>(literal)</i></td>
</tr>

<tr>
<td>parse_all</td>

<td>CMFPARSE</td>

<td>PARSE</td>

<td>PARSE_TARGETS <i>(literal)</i></td>
</tr>

<tr>
<td>runpkgtool_all</td>

<td>RUNPKGTOOL</td>

<td>RUNPKGTOOL</td>

<td>RUNPKGTOOL_TARGETS <i>(literal)</i></td>
</tr>

<tr>
<td>setup_all</td>

<td>SETUP</td>

<td>SETUP</td>

<td>SETUP_PROGRAMS&nbsp;
<br>SETUP_SCRIPTS&nbsp;</td>
</tr>
</table>

<ol>
<li>
If <b>SHLIB_DURING_STANDARD</b> and <b>SHLIB_DURING_EXPSHLIB</b> are not
set.</li>

<li>
If <b>SHLIB_DURING_STANDARD</b> is set.</li>

<li>
<i>OTHERS</i> is a variable provided for user convenience. It has no assigned
use in ODE.&nbsp; It can be used as a target for user defined processing
in the <b>STANDARD BUILD</b> pass.&nbsp; Items listed in <i>OTHERS </i>are
deleted for the <b>STANDARD CLEAN, STANDARD RMTARGE</b>T, and <b>STANDARD
CLOBBER</b> actions.</li>

<li>
<i>GARBAGE</i> is a variable provided for user convenience.&nbsp; It has
no assigned use in ODE.&nbsp; Files listed in it are deleted in the <b>STANDARD
CLEAN</b> or <b>STANDARD CLOBBER</b> actions.</li>

<li>
Only used when <b>SHLIB_DURING_EXPSHLIB</b> is defined.&nbsp; Not used
if <b>USE_JAVA_PASSES</b> is defined.</li>

<li>
Only used when <b>USE_JAVA_PASSES</b> is defined, instead of <b>EXPINC</b>.</li>

<li>
Only used when <b>USE_JAVA_PASSES</b> is defined, instead of <b>OBJECTS</b>.</li>

<li>
Only used when <b>USE_JAVA_PASSES</b> is defined, instead of <b>EXPLIB</b>.</li>

<li>
Not used if <b>USE_JAVA_PASSES</b> is defined.</li>

<li>
Only used here if <b>JAVADOC_AFTER_JAVAC</b> is undefined (which is the
case by default) and <b>BUILDJAVADOCS</b> is defined (which is <i>not</i>
the case by default).</li>

<li>
Only used here if <b>JAVADOC_AFTER_JAVAC</b> is defined (which is <i>not</i>
the case by default) and <b>BUILDJAVADOCS</b> is defined (which is <i>not</i>
the case by default).</li>

<li>
Only used if <b>RMI_DURING_JAVAC</b> is defined.</li>

<li>
Only used if <b>RMI_DURING_JAVAC</b> is undefined.</li>

<li>
Only used when <b>USE_JAVA_PASSES</b> is defined, instead of <b>STANDARD</b>.</li>
</ol>

<h2>
<a NAME="ExecutingSpecificPass"></a><a href="#ToC_ExecutingSpecificPass">Executing
a specific pass</a></h2>
A specific pass of a main target can be executed to control and limit the
amount of work done.&nbsp; For example, <b>build_all</b> is implemented
with the passes: <b>EXPINC</b>, <b>OBJECTS, EXPLIB</b> and <b>STANDARD</b>.&nbsp;
If you just wanted to export the header files then you could just set the
makefile variable named: <i>MAKEFILE_PASS</i>.&nbsp; An example usage of
this is:
<p><b><tt>mk MAKEFILE_PASS=EXPINC</tt></b>
<p>This will use the default main target <b>build_all</b> and execute the
<b>EXPINC</b>
pass with the action <b>BUILD</b>.
<br>&nbsp;
<h2>
<a NAME="SettingSubdirstoTraverse"></a><a href="#ToC_SettingSubdirstoTraverse">Setting
subdirectories to traverse</a></h2>
In order for all source code subdirectories to be traversed, specific subdirectories
for specific actions and passes need to be defined.&nbsp; The subdirectories
can be specified in user makefiles.&nbsp; Relative paths can be specified
for subdirectories but no absolute paths should be used. For example, if
the current directory is <b>lib</b> and the subdirectories off of this
directory are <b>string</b> and <b>util/test</b> then the makefile in the
<b>lib</b>
directory would possibly look like this:
<p><b><tt># Subdirectories to traverse for the OBJECTS pass</tt></b>
<br><b><tt>OBJECTS_SUBDIRS = string util/test</tt></b>
<p><b><tt># Subdirectories to traverse for the DEPEND action along with
the STANDARD pass</tt></b>
<br><b><tt>DEPEND_STANDARD_SUBDIRS = string util/test</tt></b>
<p>The format for the <b>SUBDIRS</b> variable is:
<p><b><tt>&lt;<i>action name</i>>_&lt;<i>pass name</i>>_SUBDIRS = &lt;<i>subdirectories
to traverse</i>></tt></b>
<br><b><tt>or</tt></b>
<br><b><tt>&lt;<i>pass name</i>>_SUBDIRS = &lt;<i>subdirectories to traverse
for pass name</i>></tt></b>
<p>The order in which the <b>SUBDIRS</b> variable is resolved is: first
look for the format of <b><tt>&lt;<i>action name</i>>_&lt;<i>pass name</i>>_SUBDIRS</tt></b>
and if that doesn't exist then look for the format of <b><tt>&lt;<i>pass
name</i>>_SUBDIRS</tt></b>.&nbsp; One exception to this rule is that for
the <b>STANDARD</b> pass you can also use the variable <b><font face="Courier New,Courier">SUBDIRS</font></b>
without <b>STANDARD_</b>&nbsp; prepended to it.
<p>You may also define <b>USE_SUBDIR_INHERITANCE</b> if you wish to use
the <b>SUBDIRS</b> variable for traversing all passes (rather than just
for the <b>STANDARD</b> pass) for a given action/target.&nbsp; Effectively,
the rules will then set default values for <b>EXPINC_SUBDIRS</b>, <b>OBJECTS_SUBDIRS</b>,
etc. to the value of <b>SUBDIRS</b>.&nbsp; You may still of course set/override
these variables explicitly as well, which will prevent them from being
set to <b>SUBDIRS</b>.
<br>&nbsp;
<h2>
<a NAME="AddingTargetPass"></a><a href="#ToC_AddingTargetPass">Adding a
target to predefined passes and actions</a></h2>
In some cases the targets that are a part of the predefined passes do not
completely meet your project's needs.&nbsp; For example, you may have additional
compilers for different source code languages that need to be invoked.&nbsp;
You can add targets to existing passes and actions to follow the same predefined
process (for example, traverse the same directories and run the same commands),
but operate on different types of files.
<p>The format for the variable that contains the targets for passes and
actions is:
<p><font face="Courier New, Courier, mono">_&lt;<i>action name</i>>_&lt;<i>pass
name</i>>_TARGETS_ = &lt;<i>targets for PASS and ACTION</i>></font>
<p>In order to add to this variable you can edit the <b><font face="Courier New,Courier">&lt;<i>project
name</i>>.rules.mk</font></b> file to put the needed additional target
definitions.&nbsp; The format of the addition to <b><font face="Courier New,Courier">&lt;<i>project
name</i>>.rules.mk</font></b> would be:
<p><font face="Courier New, Courier, mono">_&lt;<i>action name</i>>_&lt;<i>pass
name</i>>_TARGETS_ += &lt;<i>my targets</i>></font>
<p>For example, to add the targets defined by the variable <i>PREPROCFILES</i>
to the <b>STANDARD</b> pass for the <b>COMP</b> action would be:
<p><font face="Courier New, Courier, mono">_COMP_STANDARD_TARGETS_ += ${PREPROCFILES}</font>
<p>There are some targets for passes and actions that are derived from
other passes and actions; refer to the above table (<a href="#TGTS for Passes/Actions">Main
Targets and the Passes/Actions that are Executed</a>) to select the appropriate
passes and actions target variable to use.&nbsp; For example, to add the
targets defined by the variable <i>PREPROCFILES</i> to the <b>STANDARD</b>
pass for the <b>BUILD</b> action, you would look it up in the table and
see that it corresponds to the <b>STANDARD</b> pass and the <b>COMP</b>
action, which would also be:
<p><font face="Courier New, Courier, mono">_COMP_STANDARD_TARGETS_ += ${PREPROCFILES}</font>
<br>&nbsp;
<h2>
<a NAME="AddingAnotherPass"></a><a href="#ToC_AddingAnotherPass">Adding
another pass</a></h2>
It may be desirable to make an additional pass to traverse a given set
of subdirectories for a specific action.&nbsp; A pass by itself performs
no action.&nbsp; The user must take additional steps to define what actions
and targets will be associated with a pass.&nbsp; New passes can be added
with a few lines in the <b><font face="Courier New,Courier">&lt;<i>project
name</i>>.passes.mk</font></b> file.
<p>The example in this section adds two passes for the <b>BUILD</b> action,
which is already defined in ODE and associated with several passes. <b>PREPROCPASS</b>
will be run before the predefined passes.&nbsp; <b>POSTPROCPASS</b> will
be run after the predefined passes.&nbsp; For an example of creating a
new pass and action which are independent of current actions or passes,
see the <i><a href="ODETutorial.htm#Adding Another Pass">ODE Tutorial</a></i>.
<p>&nbsp; <font face="Courier New, Courier, mono">.if !defined(MAKEFILE_PASS)</font>
<br><tt><font face="Courier New, Courier, mono">&nbsp; _BUILD_PASSES_ :=
PREPROCPASS ${_BUILD_PASSES_} POSTPROCPASS</font></tt>
<br><font face="Courier New, Courier, mono">&nbsp; .endif</font>
<p>The following would be added to specify target variables for the <b>BUILD</b>
action for each of the new passes.
<p>&nbsp; <font face="Courier New, Courier, mono">_BUILD_PREPROCPASS_TARGETS_
= ${PREPROCBUILDTARGETS}</font>
<br><font face="Courier New, Courier, mono">&nbsp; _BUILD_POSTPROCPASS_TARGETS_
= ${POSTPROCBUILDTARGETS}</font>
<p>When you add another pass you must define what subdirectories must be
traversed.&nbsp; The format of adding the pass subdirectories variable
in <b><font face="Courier New,Courier">&lt;<i>project name</i>>.passes.mk
</font></b>is:
<p><font face="Courier New, Courier, mono"># Must convert the '/' to ';'
so the main passes rules will work</font>
<br><font face="Courier New, Courier, mono">&nbsp; # for multi-level subdirectories</font>
<br><font face="Courier New, Courier, mono">&nbsp; _&lt;<i>new pass name</i>>_SUBDIRS_
= ${&lt;<i>new pass name</i>>_SUBDIRS:S|/|;|g}</font>
<p>To add the <b>PREPROCPASS</b> and <b>POSTPROCPASS</b> to <b><font face="Courier New,Courier">&lt;<i>project
name</i>>.passes.mk</font></b> you need lines like:
<p>&nbsp; <font face="Courier New, Courier, mono">_PREPROCPASS_SUBDIRS_
= ${PREPROCPASS_SUBDIRS:S|/|;|g}</font>
<br><font face="Courier New, Courier, mono">&nbsp; _POSTPROCPASS_SUBDIRS_
= ${POSTPROCPASS_SUBDIRS:S|/|;|g}</font>
<p>Then in each local makefile the subdirectories must be indicated that
need to be traversed for the new pass.&nbsp; For example, if you need to
traverse directories <font face="Courier New,Courier">lib</font> and <font face="Courier New,Courier">bin</font>
for the <b>PREPROCPASS</b> in <font face="Courier New,Courier"><b>makefile.ode</b>,</font>you
would write:
<p><font face="Courier New, Courier, mono">PREPROCPASS_SUBDIRS = lib bin</font>
<p>The new pass can be traversed using the <i>MAKEFILE_PASS</i> variable
using
<p><font face="Courier New, Courier, mono">mk MAKEFILE_PASS=PREPROCPASS</font>
<p>In these directories, the makefiles should set the <i>PREPROCBUILD_TARGETS</i>
variable to the targets for the <b>BUILD</b> action in the <b>PREPROCPASS</b>.
<h2>
<a NAME="AddingAnotherActionTarget"></a><a href="#ToC_AddingAnotherActionTarget">Adding
another action and associated targets</a></h2>
It is possible to add new actions onto a pass.&nbsp; A few steps are required
to add a new action.&nbsp; First the action must be added to the default
actions.&nbsp; This can be done by assigning the action name to the <i>EXTRA_ACTIONS</i>
variable in the <b><font face="Courier New,Courier">&lt;<i>project name</i>>.passes.mk</font></b>
file.&nbsp; The format for this is:
<p><font face="Courier New, Courier, mono">EXTRA_ACTIONS = &lt;<i>new action
name</i>></font>
<p>The passes that are needed for this action must be indicated.&nbsp;
This also can be added to the <b><font face="Courier New,Courier">&lt;<i>project
name</i>>.passes.mk</font></b> file.&nbsp; The format for defining the
passes associated with an action is:
<p><font face="Courier New, Courier, mono">.if defined(MAKEFILE_PASS)</font>
<br><font face="Courier New, Courier, mono">&nbsp; _&lt;<i>new action name</i>>_PASSES_
= ${MAKEFILE_PASS}</font>
<br><font face="Courier New, Courier, mono">&nbsp; .else</font>
<br><font face="Courier New, Courier, mono">&nbsp; _&lt;<i>new action name</i>>_PASSES_
= &lt;<i>passes for new action></i></font>
<br><font face="Courier New, Courier, mono"><i>&nbsp; </i>.endif</font>
<p>The last change to the <b><font face="Courier New,Courier">&lt;<i>project
name</i>>.passes.mk</font></b> file will be to associate the target name
with the action.&nbsp; The format for this is:
<p><font face="Courier New, Courier, mono">_&lt;<i>NEW ACTION NAME</i>>_ACTION_
= &lt;<i>new action name</i>></font>
<br><font face="Courier New, Courier, mono">&nbsp; _&lt;<i>new action name</i>>_action_
= &lt;<i>NEW ACTION NAME</i>></font>
<p>Notice the case of the above two lines.&nbsp; Uppercase variable name
equal lowercase value and lowercase variable name equals uppercase value.
<p>Now for an example of what the <b><font face="Courier New,Courier">&lt;<i>project
name</i>>.passes.mk</font></b> would look like at this point, we'll assume
we're adding the action <b>PREPROC</b> and it uses the pass <b>PREPROCPASS</b>:
<p><font face="Courier New, Courier, mono"># Beginning of changes for PREPROC
action</font>
<br><font face="Courier New, Courier, mono">&nbsp; EXTRA_ACTIONS = PREPROC</font>
<br><font face="Courier New, Courier, mono">&nbsp; .if defined(MAKEFILE_PASS)</font>
<br><font face="Courier New, Courier, mono">&nbsp; _PREPROC_PASSES_ = ${MAKEFILE_PASS}</font>
<br><font face="Courier New, Courier, mono">&nbsp; .else</font>
<br><font face="Courier New, Courier, mono">&nbsp; _PREPROC_PASSES_ = PREPROCPASS</font>
<br><font face="Courier New, Courier, mono">&nbsp; .endif</font>
<br><font face="Courier New, Courier, mono">&nbsp; _PREPROC_ACTION_ = preproc</font>
<br><font face="Courier New, Courier, mono">&nbsp; _preproc_action_ = PREPROC</font>
<br><font face="Courier New, Courier, mono">&nbsp; # ending of changes
for PREPROC action</font>
<p>Some additional steps are needed to associate a main target to the pass
and action, and to associate what targets are executed for the pass and
action combination.&nbsp; First the main target must be defined.&nbsp;
The main target's name must be the lowercase version of your action name
with "_all" appended to it.&nbsp; This target can be defined in <b><font face="Courier New,Courier">&lt;<i>project
name</i>>.rules.mk</font></b> and has the format:
<p><font face="Courier New, Courier, mono">&lt;<i>new action name</i>>_all:
$${_all_targets_};@</font>
<p>Next the targets that are executed during this main target can be defined
in <b><font face="Courier New,Courier">&lt;<i>project name</i>>.rules.mk</font></b>.&nbsp;
Also order the actions so subdirectory recursion occurs sequentially.&nbsp;
The format for the targets is:
<p><font face="Courier New, Courier, mono">_&lt;<i>new action name</i>>_&lt;<i>new
pass name</i>>_TARGETS_ = &lt;<i>new targets</i>></font>
<br><font face="Courier New, Courier, mono">&nbsp; .if !defined(SPECIAL_PASSES)</font>
<br><font face="Courier New, Courier, mono">&nbsp; .ORDER: ${&lt;<i>new
action name</i>>:L:@.ACTION.@${_PASS_ACTIONS_}@}</font>
<br><font face="Courier New, Courier, mono">&nbsp; .endif # SPECIAL_PASSES</font>
<p>For example, if we had the action <b>PREPROC</b> and the pass <b>PREPROCPASS</b>
and wanted to have the targets defined by the variable <i>PREPROCTARGETS</i>
we could have:
<p><font face="Courier New, Courier, mono">preproc_all: $${_all_targets_};@</font>
<br><font face="Courier New, Courier, mono">&nbsp; _PREPROC_PREPROCPASS_TARGETS_
= ${PREPROCTARGETS}</font>
<br><font face="Courier New, Courier, mono">&nbsp; .if !defined(SPECIAL_PASSES)</font>
<br><font face="Courier New, Courier, mono">&nbsp; .ORDER: ${PREPROC:L:@.ACTION.@${_PASS_ACTIONS}@}</font>
<br><font face="Courier New, Courier, mono">&nbsp; .endif # SPECIAL_PASSES</font>
<p>Once local makefiles have been updated to include which subdirectories
need to be traversed.&nbsp; You can execute the main target from the <b>build</b>
or <b>mk</b> command line.&nbsp; For example:
<p><font face="Courier New, Courier, mono">mk preproc_all</font>
<p>For more information on procedures on adding another pass or target,
see the <i><a href="ODETutorial.htm#Adding Another Target">ODE Tutorial</a></i>.
<h2>
<a NAME="AddingAnotherPlatform"></a><a href="#ToC_AddingAnotherPlatform">Adding
another platform</a></h2>
This section provides information about adding another platform in the
rules files.&nbsp; When adding another platform, you must modify the <b>Buildconf,
new_platform.mk,</b> and <b>sb.conf</b> files.&nbsp; You will see the steps
necessary to add a platform called <b>new_platform</b>.&nbsp; There may
be additional steps needed in rules files to define proper compilers or
compiler variables.
<ul>1. In the <b>Buildconf</b> file, add platform-specific lines as desired,
as in the following example:
<ul><font face="Courier New, Courier, mono">for <i>new_platform</i> replace
setenv INCDIRS -I/include/<i>new_platform</i></font></ul>
2.&nbsp; In the <b>rc_files/sb.conf</b> file add <i>:new_platform</i> to
machine_list line.
<p>3.&nbsp; Create the file <b>src/rules_mk/new_platform.mk</b> and add
the following lines.</ul>

<ul><font face="Courier New, Courier, mono">###############################################################################</font>
<br><font face="Courier New, Courier, mono"># New Platform specific variables</font>
<br><font face="Courier New, Courier, mono">#</font>
<br><font face="Courier New, Courier, mono">TARGET_MACHINE = <i>new_platform</i></font>
<br><font face="Courier New, Courier, mono">CCFAMILY ?= <i>CCFAMILY</i></font>
<br><font face="Courier New, Courier, mono">CCTYPE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
?= <i>CCTYPE</i></font></ul>

<hr width="100%">
<h1>
<a NAME="CCppRules"></a><a href="#ToC_CCppRules">C/C++ rules</a></h1>

<h2>
<a NAME="DefaultVarsBldTools"></a><a href="#ToC_DefaultVarsBldTools">Default
variables for build tools</a></h2>
The release administrator usually decides which tools (compiler, linker,
etc.) are used for a project. The names of these tools are set in the common
makefiles. You can override these specifications, if necessary, on the
command line, in the <b>Makeconf</b> resource configuration file, or the
<b>makefile</b>
by changing the variables that define them.
<p>For example, if you need to use a different linker than that used for
the rest of the project, you can specify:
<dl><font face="Courier New, Courier, mono">_LD_ = gld</font></dl>
in the makefile for your source code. This indicates that the <b>gld</b>
linker should be used in the build.
<br>&nbsp;
<br>&nbsp;
<table BORDER >
<caption><b><font size=+1>Variables used for specifying tools</font></b></caption>

<tr>
<th ALIGN=LEFT VALIGN=TOP>Variable Name&nbsp;</th>

<th ALIGN=LEFT VALIGN=TOP>Type of Tool</th>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>_CC_&nbsp;</td>

<td ALIGN=LEFT VALIGN=TOP>C/C++ Compiler&nbsp;</td>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>_LD_</td>

<td ALIGN=LEFT VALIGN=TOP>Linker to create executables</td>
</tr>

<tr>
<td>_SHLD_</td>

<td>Linker to create shared libraries</td>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>_AR_</td>

<td ALIGN=LEFT VALIGN=TOP>Archiver&nbsp;</td>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>_RANLIB_&nbsp;</td>

<td ALIGN=LEFT VALIGN=TOP>Archive library symbol table regenerator</td>
</tr>

<tr>
<td>_IMPLIB_</td>

<td>Import library generator</td>
</tr>

<tr>
<td>_CPPFILT_</td>

<td>C++ name demangling tool</td>
</tr>

<tr>
<td>_STRIP_</td>

<td>Symbol stripping tool</td>
</tr>
</table>

<br>&nbsp;
<table BORDER >
<caption><b><font size=+1>Variables used to define target and dependents</font></b></caption>

<tr>
<th ALIGN=LEFT VALIGN=TOP>Variable Name&nbsp;</th>

<th ALIGN=LEFT VALIGN=TOP>Description</th>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>PROGRAMS</td>

<td ALIGN=LEFT VALIGN=TOP>The executable program names to be built.</td>
</tr>

<tr>
<td>OBJECTS</td>

<td>A list of object files to be built.</td>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>OFILES</td>

<td ALIGN=LEFT VALIGN=TOP>The objects that PROGRAMS, LIBRARIES and SHARED_LIBRARIES
are made of and depend on.</td>
</tr>

<tr>
<td>EXTRA_OFILES</td>

<td>The objects that PROGRAMS, LIBRARIES and SHARED_LIBRARIES are made
of but don't depend on.</td>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>LIBRARIES</td>

<td ALIGN=LEFT VALIGN=TOP>The static/archive library targets to be built.</td>
</tr>

<tr>
<td>SHARED_LIBRARIES</td>

<td>The dynamic library targets to be built.</td>
</tr>

<tr>
<td>LIBS, LIBSENV, LIBSARGS</td>

<td>The libraries that PROGRAMS and SHARED_LIBRARIES are made of and depend
on.</td>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>EXTRA_LIBS&nbsp;</td>

<td ALIGN=LEFT VALIGN=TOP>The libraries that PROGRAMS and SHARED_LIBRARIES
are made of but don't depend on.</td>
</tr>

<tr>
<td>HFILES</td>

<td>A list of header files on which PROGRAMS and OFILES are dependent.</td>
</tr>

<tr>
<td>INCLUDES</td>

<td>A list of header files to export.</td>
</tr>

<tr>
<td>PREPROCESS</td>

<td>A list of C/C++ files to preprocess only.</td>
</tr>

<tr>
<td>BACKSLASH_PATHS</td>

<td>When the value of this variable is a non-zero value (note that zero
values include the undefined state and the empty/whitespace state, in addition
to the number "0"), the C/C++ and Java compilation tools will be passed
values of .IMPSRC, .ALLSRC, etc. with backslashes as the directory separator.&nbsp;
By default, this variable is defined as "1" on Windows and OS/2 if the
value of CCFAMILY is "visual" or "vage".&nbsp; Otherwise, the variable
is undefined (and thus the .IMPSRC, etc. pathnames will use forward slashes).</td>
</tr>

<tr>
<td>ENDIAN</td>

<td>While this variable has no direct effect on ODE processes, it may utilized
by users who wish to perform endian-specific functionality.&nbsp; The default
value, as set in <b>std.mk</b>, on Alpha and Intel platforms (machine names
that begin with <b>alpha</b>, <b>x86</b>, or <b>ia64</b>) is "little".&nbsp;
The default on all other platforms is "big".</td>
</tr>

<tr>
<td>GEN_CC_LISTINGS</td>

<td>When defined, default flags are placed in the compiler-specific LISTING_FLAGS
variables to generate compiler listing files (.lst).&nbsp; See <a href="#SettingCCPPCompilerFlags">Setting
C/C++ Compiler Flags</a> for information on LISTING_FLAGS.</td>
</tr>

<tr>
<td>GEN_MAPS</td>

<td>When defined, default flags are placed in the compiler-specific LDFLAGS
and SHLDFLAGS variables to generate map files (.map).&nbsp; The following
CCFAMILY compilers are supplied with default flags by the ODE rules: vage,
visual, cset, gnu (on Linux platforms only), and the native MVS/USS compiler.</td>
</tr>

<tr>
<td>KEEP_PRELINKER_FILES</td>

<td>When defined on MVS/USS, the _TMPS and _STEPS environment variables
for all three USS compiler types (_C89, _CC, and _CXX) will be set to values
that cause prelinker files to be generated and kept on HFS (_TMPS variables
are set to 0xfffffffd, _STEPS to 0xffffffff).</td>
</tr>
</table>

<br>&nbsp;
<table BORDER >
<caption><b><font size=+1>Variables used to define target suffixes and
prefixes</font></b></caption>

<tr>
<th ALIGN=LEFT VALIGN=TOP>Variable Name&nbsp;</th>

<th ALIGN=LEFT VALIGN=TOP>Description</th>
</tr>

<tr>
<td>PROG_SUFF</td>

<td>Program target suffix, defaults to <b>.exe </b>on OS/2 and Windows,
and the empty string elsewhere.</td>
</tr>

<tr>
<td>OBJ_SUFF</td>

<td>Objects target suffix, defaults to <b>.obj </b>on OS/2 and Windows,
and <b>.o </b>elsewhere.</td>
</tr>

<tr>
<td>STATLIB_SUFF</td>

<td>Archive (static) library suffix, defaults to <b>.lib</b> on OS/2 and
Windows, and <b>.a</b> elsewhere.</td>
</tr>

<tr>
<td>IMPLIB_SUFF</td>

<td>Import library suffix, defaults to <b>.x</b> on MVS/USS <b>.lib</b>
on OS/2 and Windows, <b>.a</b> on AIX, <b>.sl</b> on HP-UX, and <b>.so</b>
elsewhere.</td>
</tr>

<tr>
<td>SHLIB_SUFF</td>

<td>Shared library suffix, defaults to <b>.a</b> on MVS/USS and AIX, <b>.dll
</b>on
OS/2 and Windows, <b>.sl</b> on HP-UX, and <b>.so</b> elsewhere.</td>
</tr>

<tr>
<td>LIB_SUFF</td>

<td>If USE_SHARED_LIBRARY is defined, this is the same as IMPLIB_SUFF.&nbsp;
Otherwise, it is the same as STATLIB_SUFF.</td>
</tr>

<tr>
<td>LIB_PREF</td>

<td>Library name prefix.&nbsp; On all Unix platforms, this defaults to
<b>lib</b>.&nbsp;
Elsewhere, the default is the empty string (i.e., no prefix).</td>
</tr>

<tr>
<td>CC_SUFF</td>

<td>C/C++ source file suffix(es), defaults to <b>.c</b>, <b>.cc</b> and
<b>.cpp</b>.</td>
</tr>

<tr>
<td>PP_SUFF</td>

<td>C/C++ preprocessor target suffix, defaults to <b>.pp</b></td>
</tr>

<tr>
<td>LST_SUFF</td>

<td>C/C++ listing file suffix, defaults to <b>.lst</b></td>
</tr>

<tr>
<td>MAP_SUFF</td>

<td>C/C++ linker map file suffix, defaults to <b>.map</b></td>
</tr>

<tr>
<td>PRE_SUFF</td>

<td>MVS/USS prelinker output file suffix, defaults to <b>.p</b></td>
</tr>
</table>

<h2>
<a NAME="SelectingCCompiler"></a><a href="#ToC_SelectingCCompiler">Selecting
a C/C++ compiler, linker and archiver</a></h2>
&nbsp;
<table BORDER COLS=7 WIDTH="100%" >
<caption><b><font size=+1>Options for CCFAMILY and CCTYPE variables</font></b></caption>

<tr>
<td><b>CCFAMILY</b></td>

<td><b>CCTYPE</b></td>

<td><b>Compiler</b></td>

<td><b>Linker/Loader</b></td>

<td><b>Shared Linker</b></td>

<td><b>Archiver</b></td>

<td><b>Description</b></td>
</tr>

<tr>
<td>cset</td>

<td>cc</td>

<td>cc</td>

<td>cc</td>

<td>cc</td>

<td>ar</td>

<td>IBM C Set ++ for Unix<sub>1</sub> (C)&nbsp;</td>
</tr>

<tr>
<td>cset</td>

<td>ansi</td>

<td>c89</td>

<td>c89</td>

<td>c89</td>

<td>ar</td>

<td>IBM C Set ++ for Unix<sub>1</sub> (ANSI C)&nbsp;</td>
</tr>

<tr>
<td>cset</td>

<td>cpp</td>

<td>xlC</td>

<td>xlC&nbsp;</td>

<td>xlC
<br>makeC++SharedLib (AIX)</td>

<td>ar</td>

<td>IBM C Set ++ for Unix<sub>1</sub> (C++)&nbsp;</td>
</tr>

<tr>
<td>cset</td>

<td>cppr</td>

<td>xlC_r</td>

<td>xlC_r</td>

<td>xlC_r
<br>makeC++SharedLib_r (AIX)</td>

<td>ar</td>

<td>IBM C Set ++ for Unix<sub>1</sub> (thread safe C++)&nbsp;</td>
</tr>

<tr>
<td>gnu</td>

<td>cc</td>

<td>gcc</td>

<td>gcc</td>

<td>gcc</td>

<td>ar</td>

<td>GNU (C)</td>
</tr>

<tr>
<td>gnu</td>

<td>ansi</td>

<td>gcc (with the <b>-ansi</b> flag)</td>

<td>gcc</td>

<td>gcc</td>

<td>ar</td>

<td>GNU (ANSI C)</td>
</tr>

<tr>
<td>gnu</td>

<td>cpp</td>

<td>g++</td>

<td>g++</td>

<td>g++</td>

<td>ar</td>

<td>GNU (C++)</td>
</tr>

<tr>
<td>kai</td>

<td>cc
<br>ansi
<br>cpp</td>

<td>KCC</td>

<td>KCC</td>

<td>KCC</td>

<td>ar</td>

<td>KAI (C/ANSI C/C++)</td>
</tr>

<tr>
<td>native</td>

<td>cc</td>

<td>cc
<br>icc (OS/400)</td>

<td>cc
<br>ld (HP-UX)
<br>icc (OS/400)</td>

<td>cc
<br>ld (OS/400)</td>

<td>ar
<br>qar (OS/400)</td>

<td>The native (vendor-supplied) C compiler.</td>
</tr>

<tr>
<td>native</td>

<td>ansi</td>

<td>c89
<br>icc (OS/400)</td>

<td>c89
<br>ld (HP-UX)
<br>icc (OS/400)</td>

<td>c89
<br>ld (OS/400)</td>

<td>ar
<br>qar (OS/400)</td>

<td>The native (vendor-supplied) ANSI C compiler.</td>
</tr>

<tr>
<td>native</td>

<td>cpp</td>

<td>CC (Solaris, IRIX)
<br>aCC (HP-UX)
<br>c++ (MVS/USS)
<br>icc (OS/400)
<br>cxx (Tru64)</td>

<td>CC (Solaris, IRIX)
<br>aCC (HP-UX)
<br>c++ (MVS/USS)
<br>icc (OS/400)
<br>cxx (Tru64)</td>

<td>CC (Solaris, IRIX)
<br>aCC (HP-UX)
<br>c++ (MVS/USS)
<br>ld (OS/400)
<br>cxx (Tru64)</td>

<td>ar
<br>qar (OS/400)</td>

<td>The native (vendor-supplied) C++ compiler.</td>
</tr>

<tr>
<td>vage</td>

<td>cc
<br>ansi
<br>cpp</td>

<td>icc</td>

<td>ilink</td>

<td>ilink</td>

<td>ilib</td>

<td>IBM VisualAge for C++ for OS/2 and Windows<sub>2</sub> (C/ANSI C/C++)</td>
</tr>

<tr>
<td>visual</td>

<td>cc
<br>ansi
<br>cpp</td>

<td>cl</td>

<td>link</td>

<td>link</td>

<td>lib</td>

<td>Microsoft Visual C++ (C/ANSI C/C++)</td>
</tr>
</table>

<ol>
<li>
This may be called VisualAge depending on the version, but the commands
and flags are still C Set style, so "cset" is still used for the value
of CCFAMILY.</li>

<li>
The CCFAMILY value "vage" corresponds only to the Windows and OS/2 versions
of IBM's C/C++ compiler.&nbsp; The Unix versions are supported with the
value "cset".</li>
</ol>
<b><i>CCFAMILY</i></b> and <b><i>CCTYPE</i> </b>can be set in the Makeconf
for project defaults for specific platforms.&nbsp; It is possible to set
<b><i>CCFAMILY</i></b>and
<b><i>CCTYPE</i></b>
in local makefiles to select a different C/C++ compiler for a specific
directory.&nbsp; <b><i>CCFAMILY</i></b> and <b><i>CCTYPE</i></b> can also
be set in the environment. <b><i>CCFAMILY</i></b>and
<b><i>CCTYPE </i></b>can
also be set on the command line to either the
<b>build</b> or <b>mk </b>commands.&nbsp;
For example,
<p><font face="Courier New, Courier, mono">mk CCFAMILY=cset CCTYPE=cpp</font>
<p>Another variable, <b><i>CCVERSION</i></b>, is available for cases where
different versions of the same compiler require different flags or syntax
to work equivalently.&nbsp; Although the default rules do not provide many
built-in specializations based on <b><i>CCVERSION</i></b>, the user need
only define version-specific compiler variables to contain the desired
settings, and then set <b><i>CCVERSION</i></b> to that version.&nbsp; For
example,
<p><font face="Courier New, Courier, mono">_native_cpp_6.9_CFLAGS_ = -myflag1
-myflag2</font>
<br><font face="Courier New, Courier, mono">CCVERSION = 6.9</font>
<p>The rules will automatically search for the version-specific variables
first if <b><i>CCVERSION</i></b> is set, so the user needn't modify the
rules to add version-specific variables (the above lines could be added
to Makeconf, for example).
<h2>
<a NAME="SettingCCPPCompilerFlags"></a><a href="#ToC_SettingCCPPCompilerFlags">Setting
C/C++ compiler flags</a></h2>
You can specify flags for the compiler through variables. These variables
are defined either on the command line, in a makefile, or as environment
variables. You can change what gets passed to the compiler by changing
the variable either in the makefile or on the command line.
<p>You use different variables to perform similar functions from various
build control points. This can serve to identify the role of the person
performing the function. Some of these roles can include a developer performing
a build, a developer setting a shell environment variable, or a team leader
editing a makefile. The following shows variables for changing the compiler
option list, and the control point from which the specification was made.
<br>&nbsp;
<table BORDER >
<tr>
<th ALIGN=LEFT VALIGN=TOP>Variable&nbsp;</th>

<th ALIGN=LEFT VALIGN=TOP>Source of Specification&nbsp;</th>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>CARGS&nbsp;</td>

<td ALIGN=LEFT VALIGN=TOP><b>build/mk</b> command line&nbsp;</td>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>CENV&nbsp;</td>

<td ALIGN=LEFT VALIGN=TOP>Shell environment variables&nbsp;</td>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>CFLAGS&nbsp;</td>

<td ALIGN=LEFT VALIGN=TOP>Makeconf or local makefiles</td>
</tr>

<tr>
<td>LISTING_FLAGS</td>

<td>Typically used to place flags necessary to generate listing files.&nbsp;
When GEN_CC_LISTINGS is defined, default values will be generated for specific
compilers: gnu, cset, vage, visual, and the native OS/390 compilers.&nbsp;
Otherwise, this variable is undefined.</td>
</tr>
</table>

<p>For example, you use the variable <b><i>CARGS</i></b> to change a compiler
option from the command line. The statement:
<p><b>build CARGS=-DTARGET</b>
<p>adds the value <b>-DTARGET</b> to the compiler (<b>cc</b>) command line.
<br>&nbsp;
<h2>
<a NAME="SettingCCPPCompilerFlags"></a><a href="#ToC_SettingCCPPCompilerFlags">Setting
C/C++ precompiler flags</a></h2>
When using the <b><i>PREPROCESS</i></b> variable to specify C/C++ files
from which to generate preprocessor output, the <a href="#SettingCCPPCompilerFlags">C/C++
compiler flags</a> are used.&nbsp; However, there is one other variable
available for flags that will <i>only</i> be used when generating preprocessor
output (not when generating object files):
<br>&nbsp;
<table BORDER >
<tr>
<td><b>Variable</b></td>

<td><b>Source of Specification</b></td>
</tr>

<tr>
<td>PPFLAGS</td>

<td>Environment, command line, Makeconf, or local makefiles</td>
</tr>
</table>

<p>The rules supply default values of <b><i>PPFLAGS</i></b> for the supported
compilers (typically -P or -E), so typically this variable does not need
to be set by the user.
<h2>
<a NAME="Header_ComVars"></a><a href="#ToC_ComVars">Setting C/C++ compiler
command line variables</a></h2>
Another way to specify variables on the command line to be passed to the
compiler is to use the <b>CDEFS</b> variable. This variable behaves similarly
to the above compiler variables, but is also used in the dependency generation
tool, <b>gendep</b>. <b>CDEFS</b> can be set in a makefile or on the command
line. For example,
<p><font face="Courier New, Courier, mono">build "CDEFS=-DTARGET"</font>
<p>The benefit to using <b><i>CDEFS</i></b> is that a single specification
of <b><i>CDEFS </i></b>in a makefile will be used for all the tools that
process command line variables, specifically <b>mk</b>, <b>build</b>, and
<b>gendep</b>.
<h2>
<a NAME="SettingCCPPOptDbgFlags"></a><a href="#ToC_SettingCCPPOptDbgFlags">Setting
C/C++ optimization and debugging flags</a></h2>
The variable <b><i>DEBUGGING</i></b>, when set, will enable the default
values for <b>CC_OPT_LEVEL</b>, <b>LD_OPT_LEVEL</b>, and <b>SHLD_OPT_LEVEL</b>
for the appropriate compiler/linker version. There is also the context
defined as <b>&lt;CONTEXT>_dbg</b> to separate a debug build from a release
build.&nbsp; For example using the build command for a release build,
<p><font face="Courier New, Courier, mono">build -m x86_nt_4</font>
<p>and using the build command for a debug build,
<p><font face="Courier New, Courier, mono">build -m x86_nt_4_dbg</font>
<p>An environmental variable, <b>OPT_LEVEL</b>, allows defining one of
the various debugging and optimization options available for use with both
the compiler and the linker. Because the <b>-g</b> option (build with debug
on) is used by both the <b>cc</b> compiler and <b>ld</b> linker, the <b>build</b>
command passes <b>OPT_LEVEL</b> to both.&nbsp; For example,
<p><font face="Courier New, Courier, mono">build OPT_LEVEL=-g0</font>
<p>You can limit optimization to only the compiler, the shared library
linker, or the program linker by prepending <b>CC_</b>,<b> SHLD_</b>, or
<b>LD_</b>,
respectively, to the <b>OPT_LEVEL</b> variable.&nbsp; For example,
<p><font face="Courier New, Courier, mono">build CC_OPT_LEVEL=-g</font>
<h2>
<a NAME="SettingCCPPCompilerIncDirs"></a><a href="#ToC_SettingCCPPCompilerIncDirs">Setting
C/C++ compiler include directories</a></h2>
Compilers such as <b>cc</b> accept a list of include (<b>-I</b>) options,
each with a directory name. Each directory in the list specified by these
options is searched to find files named in the <b>#include</b> statements
in the C/C++ source file.
<p>The following table shows variables for changing the <b>-I</b> options
list, and the source of the specification. The order of the variables in
the table is the order in which their contents will be given on the command
line.
<br>&nbsp;
<table BORDER >
<tr>
<th ALIGN=LEFT VALIGN=TOP>Variable&nbsp;</th>

<th ALIGN=LEFT VALIGN=TOP>Source of Specification</th>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>INCARGS&nbsp;</td>

<td ALIGN=LEFT VALIGN=TOP><b>build/mk</b> command line&nbsp;</td>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>INCFLAGS&nbsp;</td>

<td ALIGN=LEFT VALIGN=TOP>Makeconf or local makefiles</td>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>INCENV&nbsp;</td>

<td ALIGN=LEFT VALIGN=TOP>Shell environment variables&nbsp;</td>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>INCDIRS&nbsp;</td>

<td ALIGN=LEFT VALIGN=TOP>Buildconf and buildconf.exp configuration files.&nbsp;
Since this variable is not processed by genpath (the other three are),
the contents will be used as-is.&nbsp; Therefore, it is normally used for
include directories outside of the sandbox chain.</td>
</tr>
</table>

<p>As an example, assume the directory <b>../../corona/flare</b> is in
a sandbox, and <b>../../corona/spots</b> is in the backing build. The statement:
<dl><font face="Courier New, Courier, mono">build "INCARGS=-I../../corona/flare
-I../../corona/spots"</font></dl>
causes
<dl><b>../../corona/flare</b> and <b>../../corona/spots</b>, in the sandbox
and the backing build, respectively, to be searched for each <b>#include</b>
file in the source files being built.</dl>

<h2>
<a NAME="SettingLinkerFlags"></a><a href="#ToC_SettingLinkerFlags">Setting
linker flags</a></h2>
As with compiler flags, you can also specify flags for the linker through
variables. These variables are defined either on the command line, in a
<b>makefile</b>,
or <b>Buildconf </b>files.
<p>The following table shows variables for changing the linking options,
and the source of the specification:
<table BORDER >
<tr>
<th ALIGN=LEFT VALIGN=TOP>Variable&nbsp;</th>

<th ALIGN=LEFT VALIGN=TOP>Where to define it</th>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>LDARGS</td>

<td ALIGN=LEFT VALIGN=TOP>On the <b>build </b>or <b>mk</b> command line&nbsp;</td>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>LDENV&nbsp;</td>

<td ALIGN=LEFT VALIGN=TOP>Shell environment variables&nbsp;</td>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>LDFLAGS</td>

<td ALIGN=LEFT VALIGN=TOP>In the Makeconf file or local makefiles</td>
</tr>

<tr>
<td>LD_TRAILING_FLAGS</td>

<td>Flags appended to the linker command</td>
</tr>
</table>

<p>The following table shows variables for changing the shared linking
options, and the source of the specification:
<table BORDER >
<tr>
<th ALIGN=LEFT VALIGN=TOP>Variable</th>

<th ALIGN=LEFT VALIGN=TOP>Where to define it</th>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>SHLDARGS</td>

<td ALIGN=LEFT VALIGN=TOP>On the <b>build </b>or <b>mk</b> command line&nbsp;</td>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>SHLDENV&nbsp;</td>

<td ALIGN=LEFT VALIGN=TOP>Shell environment variables&nbsp;</td>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>SHLDFLAGS&nbsp;</td>

<td ALIGN=LEFT VALIGN=TOP>In the Makeconf file or local makefiles</td>
</tr>

<tr>
<td>SHLD_TRAILING_FLAGS</td>

<td>Flags appended to the shared linker command</td>
</tr>
</table>

<p>For example, you use the variable <b>LDARGS</b> to change a linker option
from the command line. The statement:
<dl><font face="Courier New, Courier, mono">build "LDARGS=-nostdlib"</font></dl>
indicates that the standard library should not be used during the linking
phase of the compile.
<h2>
<a NAME="SettingLinkerSearchDirs"></a><a href="#ToC_SettingLinkerSearchDirs">Setting
linker library search directories</a></h2>
The linker accepts a list of <b>-L</b> options, each with a directory name.
The list of directories extracted from these specifications is searched
for libraries during the linking process.
<p>The following shows variables for specifying the directory list, and
the source of the specification:
<br>&nbsp;
<table BORDER WIDTH="814" >
<tr>
<th ALIGN=LEFT VALIGN=TOP>Variable&nbsp;</th>

<th ALIGN=LEFT VALIGN=TOP>Source of Specification&nbsp;</th>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>LIBARGS&nbsp;</td>

<td ALIGN=LEFT VALIGN=TOP>On the <b>build</b> or <b>mk</b> command line</td>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>LIBENV&nbsp;</td>

<td ALIGN=LEFT VALIGN=TOP>Shell environment variables&nbsp;</td>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>LIBFLAGS&nbsp;</td>

<td ALIGN=LEFT VALIGN=TOP>Makeconf or local makefiles</td>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>LIBDIRS&nbsp;</td>

<td ALIGN=LEFT VALIGN=TOP>Buildconf and buildconf.exp configuration files.&nbsp;
Since this variable is not processed by genpath (the other three are),
the contents will be used as-is.&nbsp; Therefore, it is normally used for
library directories outside of the sandbox chain.</td>
</tr>
</table>
For example, the command:
<dl><font face="Courier New, Courier, mono">build "LIBARGS=-L../../export/rios_aix_4/usr/lib
-L../../export/rios_aix_4/lib2"</font></dl>
causes
<dl><b>../../export/rios_aix_4/lib</b> and <b>../../export/rios_aix_4/lib2</b>
to be searched for</dl>
each library specified on the _<b>LD_</b> (and <b>_SHLD_</b>) command line.
<h2>
<a NAME="AddingProgramTarget"></a><a href="#ToC_AddingProgramTarget">Adding
a program target</a></h2>
To build a new program in a directory that already contains other programs,
edit the makefile and add the new program name to the <b>PROGRAMS</b> list.
For example, source subdirectory <b>answers</b> contains the programs <b>yes.c</b>
and <b>no.c</b>. To also build the program <b>maybe.c</b>, edit makefile
and change:
<dl><font face="Courier New, Courier, mono">PROGRAMS = yes${PROG_SUFF}
no${PROG_SUFF}</font>
<p>to
<p><font face="Courier New, Courier, mono">PROGRAMS = yes${PROG_SUFF} no${PROG_SUFF}
maybe${PROG_SUFF}</font></dl>
To simply build the <b>maybe.c</b> in a new directory, edit the makefile
in the new directory, and include these lines in the makefile:
<dl><font face="Courier New, Courier, mono">PROGRAMS = maybe${PROG_SUFF}</font>
<br><font face="Courier New, Courier, mono">&nbsp; .include &lt;$</font>{RULES_MK}></dl>
This sequence tells the common makefiles to build the <b>maybe.c</b> program
only.
<h2>
<a NAME="LocationforBuiltObjs"></a><a href="#ToC_LocationforBuiltObjs">Location
for built object files</a></h2>
By default, all object code is built in the <font face="Courier New,Courier">obj</font>
area. If you wish to build objects in another location, change the <i>OBJECTDIR</i>
variable in a <b>Buildconf</b>. You may specify either a relative or absolute
path name for the value of <i>OBJECTDIR</i>. If you specify a relative
path name, it must start from the <b>src</b> directory.
<h2>
<a NAME="c_and_cpp"></a><a href="#ToC_c_and_cpp">Building C and C++ in
the same directory</a></h2>
To build C and C++ source code in the same directory (i.e., using two different
values of CCTYPE), the variables in the following table can be used:
<br>&nbsp;
<table BORDER WIDTH="100%" >
<tr>
<td><b>Variable Name</b></td>

<td><b>Description</b></td>
</tr>

<tr>
<td>C_OFILES, C_OBJECTS</td>

<td>Objects to be built by a C compiler.&nbsp; See also C_CCTYPE.</td>
</tr>

<tr>
<td>CPP_OFILES, CPP_OBJECTS</td>

<td>Objects to be built by a C++ compiler.&nbsp; See also CPP_CCTYPE.</td>
</tr>

<tr>
<td>C_PROGRAMS</td>

<td>Programs to be built by a C linker.&nbsp; See also C_CCTYPE.</td>
</tr>

<tr>
<td>CPP_PROGRAMS</td>

<td>Programs to be built by a C++ linker.&nbsp; See also CPP_CCTYPE.</td>
</tr>

<tr>
<td>C_LIBRARIES</td>

<td>Static libraries to be built by a C archiver.&nbsp; See also C_CCTYPE.</td>
</tr>

<tr>
<td>CPP_LIBRARIES</td>

<td>Static libraries to be built by a C++ archiver.&nbsp; See also CPP_CCTYPE.</td>
</tr>

<tr>
<td>C_SHARED_LIBRARIES</td>

<td>Dynamic libraries to be built by a C linker.&nbsp; See also C_CCTYPE.</td>
</tr>

<tr>
<td>CPP_SHARED_LIBRARIES</td>

<td>Dynamic libraries to be built by a C++ linker.&nbsp; See also CPP_CCTYPE.</td>
</tr>

<tr>
<td>C_PREPROCESS</td>

<td>Preprocessor output files to be built by a C preprocessor.&nbsp; See
also C_CCTYPE.&nbsp; <b>Note: this variable is not fully implemented and
may not work for all cases.</b></td>
</tr>

<tr>
<td>CPP_PREPROCESS</td>

<td>Preprocessor output files to be built by a C++ preprocessor.&nbsp;
See also CPP_CCTYPE.&nbsp; <b>Note: this variable is not fully implemented
and may not work for all cases.</b></td>
</tr>

<tr>
<td>C_CCFAMILY</td>

<td>The CCFAMILY to use for building C objects, programs, etc.&nbsp; The
default value is "${CCFAMILY}" (i.e., the normal/default CCFAMILY). <b>Note:
this variable is not fully implemented and may not work for all cases.</b></td>
</tr>

<tr>
<td>CPP_CCFAMILY</td>

<td>The CCFAMILY to use for building C++ objects, programs, etc.&nbsp;
The default value is "${CCFAMILY}" (i.e., the normal/default CCFAMILY).
<b>Note:
this variable is not fully implemented and may not work for all cases.</b></td>
</tr>

<tr>
<td>C_CCTYPE</td>

<td>The CCTYPE to use for building C objects, programs, etc., referenced
in the C_OFILES, C_OBJECTS, C_PROGRAMS, C_LIBRARIES, C_SHARED_LIBRARIES,
and C_PREPROCESS variables.&nbsp; The default value is "ansi".</td>
</tr>

<tr>
<td>CPP_CCTYPE</td>

<td>The CCTYPE to use for building C++ objects, programs, etc., referenced
in the CPP_OFILES, CPP_OBJECTS, CPP_PROGRAMS, CPP_LIBRARIES, CPP_SHARED_LIBRARIES,
and CPP_PREPROCESS variables.&nbsp; The default value is "cpp".</td>
</tr>

<tr>
<td>C_CCVERSION</td>

<td>The CCVERSION to use for building C objects, programs, etc.&nbsp; The
default value is "${CCVERSION}" (i.e., the normal/default CCVERSION). <b>Note:
this variable is not fully implemented and may not work for all cases.</b></td>
</tr>

<tr>
<td>CPP_CCVERSION</td>

<td>The CCVERSION to use for building C++ objects, programs, etc.&nbsp;
The default value is "${CCVERSION}" (i.e., the normal/default CCVERSION).
<b>Note:
this variable is not fully implemented and may not work for all cases.</b></td>
</tr>
</table>

<p>Note that none of these variables function completely on their own.&nbsp;
They must be used in variables that cause ODE to generate output.&nbsp;
For example, C_OFILES and/or CPP_OFILES would need to be added to OFILES
in order to be utilized.&nbsp; See typical usage in the example below.
<p>Note also that the variables which aren't fully implemented <i>may</i>
work in simple cases.&nbsp; These variables will be enhanced in future
builds or releases.
<p>Example makefile:
<p><tt>##############################################</tt>
<br><tt>CPP_OFILES = foo1${OBJ_SUFF} foo2${OBJ_SUFF}</tt>
<br><tt>C_OFILES = bar${OBJ_SUFF}</tt>
<p><tt>CPP_PROGRAMS = foo${PROG_SUFF}</tt>
<br><tt>C_PROGRAMS = bar${PROG_SUFF}</tt>
<p><tt>OFILES = ${CPP_OFILES} ${C_OFILES}</tt>
<br><tt>PROGRAMS = ${CPP_PROGRAMS} ${C_PROGRAMS}</tt>
<p><tt>.include &lt;${RULES_MK}></tt>
<p><tt>foo${PROG_SUFF}_OFILES = ${CPP_OFILES}</tt>
<br><tt>bar${PROG_SUFF}_OFILES = ${C_OFILES}</tt>
<br><tt>##############################################</tt>
<p>This will build two programs: foo and bar.&nbsp; foo is a C++ program
comprised of foo1.o and foo2.o.&nbsp; bar is a C program comprised of bar.o.&nbsp;
The objects and programs for foo will be built with CCTYPE "cpp", while
bar will be built with CCTYPE "ansi".
<h2>
<a NAME="Strip_Tool"></a><a href="#ToC_Strip_Tool">Strip tool usage</a></h2>
To use the symbolic stripping tool ("strip" on most Unix platforms), the
following ODE variables are available:
<br>&nbsp;
<table BORDER >
<tr>
<td>STRIP</td>

<td>The name of the strip command.&nbsp; The default value is "strip".</td>
</tr>

<tr>
<td>STRIPFLAGS</td>

<td>Flags that will be used with the STRIP command.</td>
</tr>

<tr>
<td>STRIP_OBJ
<br>STRIP_EXE
<br>STRIP_ARCH
<br>STRIP_LIB</td>

<td>These boolean variables (when defined) will cause ODE to run the STRIP
tool on the target file(s) when generating objects, executable programs,
archive libraries, and shared libraries, respectively.</td>
</tr>
</table>

<p>
<hr width="100%">
<h1>
<a NAME="GendepRules"></a><a href="#ToC_GendepRules">Dependency generation
rules</a></h1>
The common makefiles provide rules to generate makefile-style dependencies
using either a compiler-provided dependency generator, or the ODE-provided
dependency generator, <a href="ODEBuildReference.htm#HDRGENDEP">gendep</a>.
These dependencies can then be converted to make dependency format and
combined into a single file using the ODE-provided <a href="ODEBuildReference.htm#HDRMKDEP">mkdep</a>
tool. The <b>gendep</b> tool can only be used to parse C/C++ source files.
See<a href="#JavaDependencyGeneration"> Dependency Generation</a> for information
on generating dependencies for Java source files.
<h2>
<a NAME="GendepFlags"></a><a href="#ToC_GendepFlags">Dependency variables</a></h2>

<table BORDER >
<caption><b><font size=+1>Variables that control dependency generation
using gendep and mkdep.</font></b></caption>

<tr>
<th ALIGN=LEFT VALIGN=TOP>Variable</th>

<th ALIGN=LEFT VALIGN=TOP>Description</th>
</tr>

<tr>
<td>DEPENDENCIES</td>

<td>If defined, dependency files are generated, otherwise they are not.&nbsp;
The default set of rules will initially dictate what tool should be used
to generate the dependencies, depending on the platform.</td>
</tr>

<tr>
<td>GENDEP</td>

<td>The dependency generation tool to use.&nbsp; Currently defaults to
the ODE-provided <b>gendep</b>.</td>
</tr>

<tr>
<td>USE_GENDEP</td>

<td>If defined, use the tool specified by <b>GENDEP</b>, otherwise use
the default dependency generation tool.&nbsp; The default tool may be <b>GENDEP</b>,
or may be the compiler's dependency generator, depending on the platform
and compiler.</td>
</tr>

<tr>
<td>NO_DEFAULT_GENDEP</td>

<td>If defined, do not use the default rules to decide whether or not to
use to the <b>GENDEP</b> tool.&nbsp; If not defined, the ODE-supplied rules
will determine, based on the current platform and the chosen compiler,
if <b>GENDEP</b> should be used.&nbsp; If this variable is defined, the
variable <b>USE_GENDEP</b> must also be defined in order to use <b>GENDEP</b>.</td>
</tr>

<tr>
<td>DEP_SUFF</td>

<td>Dependency file suffix, defaults to .u.&nbsp; Note that most compilers,
as well as <b>gendep</b>, will generate dependency files with a .u extension,
but some compilers generate dependency files with a .d suffix.&nbsp; Specifying
the DEP_SUFF to another extension will not cause any of the dependency
generation tools to output files with a different extension.</td>
</tr>

<tr>
<td>GENDEPFLAGS</td>

<td>Flags to use with the <b>GENDEP</b> tool. Set in <b>Makeconf</b> file
or local makefile.</td>
</tr>

<tr>
<td>GENDEPARGS</td>

<td>Flags to use with the <b>GENDEP</b> tool. Set from the <b>build</b>
or <b>mk</b> command line.&nbsp;</td>
</tr>

<tr>
<td>GENDEPENV</td>

<td>Flags to use with the <b>GENDEP</b> tool. Set as a shell environment
variable.</td>
</tr>

<tr>
<td>CDEFS</td>

<td>Specify CDEFS to assign variables via the -D option to <b>build</b>,
<b>mk</b>,
and <b>gendep</b>. i.e. CDEFS=-DTARGET.&nbsp; Specify on the command line
or in a local makefile.</td>
</tr>

<tr>
<td>MD</td>

<td>The tool to convert and combine the dependency (.u/.d) files into one
file.&nbsp; Currently defaults to the ODE-provided <b><a href="ODEMakeReference.htm#runtimecommands">.rmkdep</a></b>
(an internalized version of <b>mkdep</b>).</td>
</tr>

<tr>
<td>MDFLAGS</td>

<td>Flags to use with the <b>MD</b> tool. Set in <b>Makeconf</b> file or
local makefile.</td>
</tr>

<tr>
<td>MDARGS</td>

<td>Flags to use with the <b>MD</b> tool. Set from the <b>build</b> or
<b>mk</b>
command line.&nbsp;</td>
</tr>

<tr>
<td>MDENV</td>

<td>Flags to use with the <b>MD</b> tool. Set as a shell environment variable.</td>
</tr>

<tr>
<td>DEPEND_MK</td>

<td>The file to combine and convert dependencies into by running the <b>mkdep</b>
command.&nbsp; Defaults to "depend.mk".</td>
</tr>

<tr>
<td>RUN_MD_WITH_END</td>

<td>Normally the MD tool is run using the .EXIT special target, which is
processed even when errors occur during building.&nbsp; Defining RUN_MD_WITH_END
will cause MD to be run using the .END special target, which will only
be processed if no errors occur.&nbsp; This can help prevent invalid dependencies
from being added to depend.mk.</td>
</tr>
</table>
Flags to <i>GENDEPFLAGS</i>, <i>GENDEPENV</i>, <i>GENDEPARGS</i>, <i>MDFLAGS</i>,
<i>MDENV</i>,
<i>MDARGS</i>,
and <i>CDEFS</i> can be specified on a per-target basis by prepending the
variable with the target name.&nbsp; For example, to add the <b>-debug</b>
flag for generating the dependency file<b> "file1.u"
</b>with
<b>gendep</b>,
it would look like:
<p><font face="Courier New, Courier, mono"># test1-specific GENDEPFLAGS</font>
<br><font face="Courier New, Courier, mono">&nbsp; test1.u_GENDEPFLAGS
= -debug</font>
<h2>
<a NAME="UseGendepTable"></a><a href="#ToC_UseGendepTable">Default gendep
usage</a></h2>
The following table displays which platforms and compilers will automatically
use the <b>gendep</b> tool.&nbsp; A platform-combination that <i>doesn't</i>
use
<b>gendep</b> is assumed to be capable of generating dependencies from
the compiler.&nbsp; To use <b>gendep</b> when it is not used by default,
define the <i>USE_GENDEP</i> variable in <b>Makeconf</b>, a makefile, or
the <b>mk</b>, or <b>build</b> command line.&nbsp; Similarly, to completely
disable the default definitions of <i>USE_GENDEP</i> as seen in the table
below, define the variable <i>NO_DEFAULT_GENDEP</i>.
<br>&nbsp;
<table BORDER=2 COLS=2 WIDTH="50%" >
<tr>
<th WIDTH="30%">Platform</th>

<th WIDTH="70%">Compilers with USE_GENDEP defined</th>
</tr>

<tr>
<td>Windows</td>

<td>Microsoft Visual C++</td>
</tr>

<tr>
<td>HP-UX</td>

<td>All non-GNU compilers</td>
</tr>

<tr>
<td>OS/2 Warp</td>

<td>All compilers except Visual Age C++ 3.6 and higher</td>
</tr>

<tr>
<td>OS/390 MVS/USS</td>

<td>The native compiler</td>
</tr>

<tr>
<td>OS/400</td>

<td>The native compiler</td>
</tr>

<tr>
<td>all others</td>

<td>None (all supported compilers generate dependencies)</td>
</tr>
</table>

<h2>
<a NAME="GendepMakefile"></a><a href="#ToC_GendepMakefile">Example makefile</a></h2>
This example shows what might be typical usage for configuring the use
of <b>gendep</b> and <b>mkdep</b>.
<ul><font face="Courier New, Courier, mono"># Sample makefile to set up
gendep and mkdep</font>
<br><font face="Courier New, Courier, mono"># mk or build will compile
the testprog program and then</font>
<br><font face="Courier New, Courier, mono"># call gendep to generate dependency
files file1.u and</font>
<br><font face="Courier New, Courier, mono"># file2.u.&nbsp; mkdep will
then be called to create a</font>
<br><font face="Courier New, Courier, mono"># depend.mk file from file1.u
and file2.u.</font>
<p><font face="Courier New, Courier, mono"># Program to build</font>
<br><font face="Courier New, Courier, mono">PROGRAMS = testprog${PROG_SUFF}</font>
<p><font face="Courier New, Courier, mono"># Files used to build testprog</font>
<br><font face="Courier New, Courier, mono">OFILES = file1${OBJ_SUFF} file2${OBJ_SUFF}</font>
<p><font face="Courier New, Courier, mono"># Define variable to create
dependency files during the mk/build process</font>
<br><font face="Courier New, Courier, mono">DEPENDENCIES=</font>
<p><font face="Courier New, Courier, mono"># Define variable to use the
ODE-provided gendep tool</font>
<br><font face="Courier New, Courier, mono">USE_GENDEP=</font>
<p><font face="Courier New, Courier, mono"># Define command line variables
for use with compiler and gendep</font>
<br><font face="Courier New, Courier, mono">CDEFS = -DUNIX -DDEBUG</font>
<p><font face="Courier New, Courier, mono"># Define additional flags to
gendep</font>
<br><font face="Courier New, Courier, mono">GENDEPFLAGS = -I../include
-nodup</font>
<p><font face="Courier New, Courier, mono"># Define additional flags to
mkdep</font>
<br><font face="Courier New, Courier, mono">MDFLAGS = -I/usr/include -elxdep
-top -rm</font>
<p><font face="Courier New, Courier, mono"># Include system rules</font>
<br><font face="Courier New, Courier, mono">.include &lt;${RULES_MK}></font></ul>

<hr width="100%">
<h1>
<a NAME="JavaRules"></a><a href="#ToC_JavaRules">Java rules</a></h1>
The common makefiles provide rules to compile .java files, create javadocs,
generate native header files, create RMI stubs, and create .jar archives/libraries.&nbsp;
These rules have been written for, and tested with, JDK 1.1 and 1.2.&nbsp;
It is unknown how well they will work with JDK 1.0.
<p>Note that the Java rules are not employed unless <b>BUILDJAVA</b> is
defined...this is to prevent unnecessary compilations in a multi-platform
environment (since typically Java compiles only need to be done once, so
<b>BUILDJAVA</b>
need only be defined on one platform).&nbsp; Similarly, the Java documentation
is only generated if <b>BUILDJAVADOCS</b> is defined (unless the <b>javadoc_all</b>
target is used to build them).&nbsp; See the
<a href="#JavaMiscVars">Miscellaneous
Variables</a> and <a href="#JavadocVars">Javadoc Variables</a> sections
for more information.
<h2>
<a NAME="JavaVariables"></a><a href="#ToC_JavaVariables">Java variables</a></h2>
The following table lists the variables that control Java processing.
<p>Note: for all toolname variables (<b>JAVAC</b><i>, </i><b>JAR</b><i>,
</i><b>RMIC</b>,
etc.), you may optionally surround each name with a single underscore (e.g.,
_JAVAC_). This is provided to maintain consistency with other toolname
variables such as <b>_CC_</b>, <b>_AR_</b>, etc.
<br>&nbsp;
<br>&nbsp;
<table BORDER WIDTH="100%" >
<caption><a NAME="JavaCompilerVars"></a><b><font size=+1><a href="#ToC_JavaCompilerVars">Java
compiler variables</a></font></b></caption>

<tr>
<th ALIGN=LEFT VALIGN=TOP>Variable</th>

<th ALIGN=LEFT VALIGN=TOP>Description</th>
</tr>

<tr>
<td>JAVAC</td>

<td>The Java compiler tool to use, defaults to <b>javac</b></td>
</tr>

<tr>
<td>JARGS</td>

<td>Set on the <b>build</b> or <b>mk</b> command line to add flags to the
<i>JAVAC</i>
tool</td>
</tr>

<tr>
<td>JENV</td>

<td>Set as a shell environment variable to add flags to the <i>JAVAC</i>
tool</td>
</tr>

<tr>
<td>JFLAGS</td>

<td>Set in <b>Makeconf</b> file or local makefile to add flags to the <i>JAVAC</i>
tool</td>
</tr>

<tr>
<td>JVM_JFLAGS</td>

<td>Normally when USE_JAVA_RESPFILE is defined, both flags and source files
are put into the response file.&nbsp; This can cause problems with certain
flags, primarily -J.&nbsp; Parameters put into JVM_JFLAGS will always be
passed on the command line rather than added to the response file, which
solves this problem.</td>
</tr>

<tr>
<td>JAVA_OPT_LEVEL</td>

<td>Optimization level flag used by <i>JAVAC</i>. When the variable <i>DEBUGGING
</i>is
defined, the default value is "-g".&nbsp; Otherwise, no default value exists.</td>
</tr>

<tr>
<td>JAVASRC</td>

<td>This variable is deprecated; use <i>JAVA_CLASSES</i> instead.</td>
</tr>

<tr>
<td>JAVA_CLASSES</td>

<td>The list of <b>.class</b> files to generate.&nbsp; The package name
should not be given (use <i>JAVA_PACKAGE_NAME</i> if needed).&nbsp; For
example, <tt>"JAVA_CLASSES = Gui${CLASS_SUFF} Main${CLASS_SUFF}"</tt>.&nbsp;
Note: this variable replaces the <i>JAVASRC</i> variable used in earlier
releases of ODE.&nbsp; However, for compatibility, <i>JAVASRC</i> will
still function as expected.</td>
</tr>

<tr>
<td>JAVAC_FILE_ARGS</td>

<td>When <i>JAVAC_MULTICALL</i> isn't defined, the contents of this variable
are used as the file arguments to the <i>JAVAC</i> command.&nbsp; The default
value is the contents of <i>JAVA_CLASSES</i> (with .java suffixes and full
pathnames as generated by the results of <b>mk</b>'s searching).&nbsp;
This variable can be used to help alleviate command line length problems
by using shell wildcards (e.g., *.java) which will be passed as-is to the
<i>JAVAC</i>
command.</td>
</tr>

<tr>
<td>JAVAC_SRCDIR</td>

<td>If set, the <i>JAVAC</i> tool will use the contents of this variable
with the <b>-classpath</b> flag.&nbsp; Unset by default.&nbsp; See also
the <i>USE_GENPATH_FOR_JAVA_SRCDIR</i> and <i>JAVA_SRCDIR_GENPATH_FLAGS</i>variables
(in the <a href="#JavaMiscVars">Miscellaneous variables</a> table).</td>
</tr>

<tr>
<td>JAVAC_MULTICALL</td>

<td>By default the <b>JAVAC</b> tool is run once with all of the <b>.java</b>
files as arguments.&nbsp; This may cause command line length overflow.&nbsp;
Defining <b>JAVAC_MULTICALL</b> will cause the <b>JAVAC</b> tool to be
run separately for each <b>.java</b> file instead.&nbsp; This has the side
effect of only recompiling <b>.java </b>files that are out-of-date with
respect to their respective<b> .class </b>files (for full dependency checking,
however, one must use <b>JAVA_DEPENDENCIES</b>).</td>
</tr>

<tr>
<td>GROUP_JAVA_DEPS</td>

<td>When defined, each <b>.class</b> file listed in <b>JAVA_CLASSES</b>
will have <i>all</i> the corresponding <b>.java</b> files as dependents.&nbsp;
However, the <b>JAVAC</b> tool is only called once per directory, conditionally,
with <i>all</i> <b>.java</b> files as arguments.&nbsp; This permits the
user to avoid the performance degradation of <b>JAVAC_MULTICALL</b> or
<b>JAVA_DEPENDENCIES</b>
and yet only invoke the <b>JAVAC</b> tool if one or more <b>.java</b> files
have changed.</td>
</tr>

<tr>
<td>JAVA_CLASSES_DIRS</td>

<td>Specifying any relative or absolute directories in this variable will
cause all .java files in those directories (and all subdirectories, if
<b>USE_JAVADIR_RECURSION</b>
is defined) to be added to the <b>JAVA_CLASSES</b> variable.</td>
</tr>

<tr>
<td>USE_JAVADIR_RECURSION</td>

<td>If defined, all subdirectories of the directories specified in <b>JAVA_CLASSES_DIRS</b>
are recursively searched.</td>
</tr>
</table>

<br>&nbsp;
<table BORDER WIDTH="100%" >
<caption><a NAME="JarFileVars"></a><b><font size=+1><a href="#ToC_JarFileVars">Jar/Ear/War
file variables</a></font></b></caption>

<tr>
<th ALIGN=LEFT VALIGN=TOP>Variable</th>

<th ALIGN=LEFT VALIGN=TOP>Description</th>
</tr>

<tr>
<td>JAR
<br>EAR
<br>WAR</td>

<td>The Java archive tool to use, defaults to <b>jar</b>.</td>
</tr>

<tr>
<td>JARFLAGS
<br>EARFLAGS
<br>WARFLAGS</td>

<td>Flags to use with the JAR/EAR/WAR tool.&nbsp; See <b>java.mk</b> for
defaults.</td>
</tr>

<tr>
<td>JVM_JARFLAGS
<br>JVM_EARFLAGS
<br>JVM_WARFLAGS</td>

<td>Normally when USE_JAVA_RESPFILE is defined, both flags and source files
are put into the response file.&nbsp; This can cause problems with certain
flags, primarily -J.&nbsp; Parameters put into this variable will always
be passed on the command line rather than added to the response file, which
solves this problem.</td>
</tr>

<tr>
<td>JAR_LIBRARIES
<br>EAR_LIBRARIES
<br>WAR_LIBRARIES</td>

<td>Specifies the name(s) of the jar/ear/war file(s) to create.&nbsp; The
members of the jar/ear/war file(s) is specified with the <i>JAR_OBJECTS/EAR_OBJECTS/WAR_OBJECTS</i>
and <i>OTHER_JAR_OBJECTS/OTHER_EAR_OBJECTS/OTHER_WAR_OBJECTS</i> variables.</td>
</tr>

<tr>
<td>JAR_OBJECTS
<br>EAR_OBJECTS
<br>WAR_OBJECTS</td>

<td>Specifies the files which will be added to a jar/ear/war file.&nbsp;
These files will be listed as dependents of the jar/ear/war file, so <b>mk</b>
will try to determine how to make these objects (and thus only rebuild
the file if it is out-of-date in relation to them).&nbsp; For directories
or files which <b>mk</b> doesn't know how to make, use <i>OTHER_JAR_OBJECTS/OTHER_EAR_OBJECTS/OTHER_WAR_OBJECTS</i>
instead.</td>
</tr>

<tr>
<td>OTHER_JAR_OBJECTS
<br>OTHER_EAR_OBJECTS
<br>OTHER_WAR_OBJECTS</td>

<td>Specifies other files (and directories) which will be added to a jar/ear/war
file.&nbsp; <b>mk</b> does not use these as dependents, so it will not
try to determine how to make them.&nbsp; It will, however, use its normal
search path to try to locate the files.</td>
</tr>

<tr>
<td>JAR_FILE_ARGS
<br>EAR_FILE_ARGS
<br>WAR_FILE_ARGS</td>

<td>The contents of this variable are used as the file arguments to the
<i>JAR/EAR/WAR</i>
command (the files/directories that are archived).&nbsp; The default value
is the contents of a variable called <i>ALLJAROBJS/ALLEAROBJS/ALLWAROBJS</i>,
which consists of both <i>JAR_OBJECTS/EAR_OBJECTS/WAR_OBJECTS</i> and <i>OTHER_JAR_OBJECTS/OTHER_EAR_OBJECTS/OTHER_WAR_OBJECTS
</i>by
default.&nbsp; This variable is normally overriden in order to get around
command line length problems, by using shell wildcard specifications which
will be passed as-is to the <i>JAR/EAR/WAR</i> command.&nbsp; Note that
the contents of <i>JAR_OBJECTS/EAR_OBJECTS/WAR_OBJECTS</i> will still be
used as dependents of <i>JAR_LIBRARIES/EAR_LIBRARIES/WAR_LIBRARIES</i>.</td>
</tr>

<tr>
<td>JAR_RUNDIR
<br>EAR_RUNDIR
<br>WAR_RUNDIR</td>

<td>The directory from which the <i>JAR/EAR/WAR</i> and <i>JAVAKEY</i>
tools will be run.&nbsp; The default is ${CLASSGENDIR}.</td>
</tr>

<tr>
<td>JAROBJS_NOABS</td>

<td>If defined, the <i>JAR_OBJECTS/EAR_OBJECTS/WAR_OBJECTS</i> arguments
to the <i>JAR/EAR/WAR</i><b> </b>command are passed exactly as given in
<i>JAR_OBJECTS/EAR_OBJECTS/WAR_OBJECTS</i>.&nbsp;
The default behavior is to pass the full (absolute) path to each member
of <i>JAR_OBJECTS/EAR_OBJECTS/WAR_OBJECTS</i>.</td>
</tr>

<tr>
<td>OTHER_JAROBJS_NOABS
<br>OTHER_EAROBJS_NOABS
<br>OTHER_WAROBJS_NOABS</td>

<td>If defined, the <i>OTHER_JAR_OBJECTS/OTHER_EAR_OBJECTS/OTHER_WAR_OBJECTS</i>
arguments to the <i>JAR/EAR/WAR</i> command are passed exactly as given
in <i>OTHER_JAR_OBJECTS/OTHER_EAR_OBJECTS/OTHER_WAR_OBJECTS</i>.&nbsp;
The default behavior is to pass the full (absolute) path to each member
of <i>OTHER_JAR_OBJECTS/OTHER_EAR_OBJECTS/OTHER_WAR_OBJECTS</i>.</td>
</tr>

<tr>
<td>USE_JAR_UPDATE
<br>USE_EAR_UPDATE
<br>USE_WAR_UPDATE</td>

<td>If defined, jar/ear/war files will be updated rather than created from
scratch.&nbsp; JDK1.2 or higher is required (the <b>-u</b> flag is used).&nbsp;
This functionality works in both backing builds and sandboxes, but when
used in a sandbox the jar/ear/war file(s) must exist somewhere in the backing
chain;
<b>mklinks </b>is used to copy the nearest one into the sandbox.</td>
</tr>

<tr>
<td>JAR_RESPFILE
<br>EAR_RESPFILE
<br>WAR_RESPFILE</td>

<td>The full pathname of the temporary response file used to create a jar/ear/war
file (see <i>USE_JAVA_RESPFILE</i> in the <a href="#JavaMiscVars">Miscellaneous
variables</a> section).&nbsp; The default value is the contents of <i>JAR_RESPFILE_DIR/EAR_RESPFILE_DIR/WAR_RESPFILE_DIR</i>
and <i>JAR_RESPFILE_NAME/EAR_RESPFILE_NAME/WAR_RESPFILE_NAME</i>, concatenated
together with a slash (/).&nbsp; This variable's contents will automatically
be converted to use the machine-dependent directory separator (slash or
backslash).</td>
</tr>

<tr>
<td>JAR_RESPFILE_DIR
<br>EAR_RESPFILE_DIR
<br>WAR_RESPFILE_DIR</td>

<td>The directory in which the response files used to create jar/ear/war
archives will be generated.&nbsp; The default value is the contents of
<i>JAR_RUNDIR/EAR_RUNDIR/WAR_RUNDIR</i>.</td>
</tr>

<tr>
<td>JAR_RESPFILE_NAME
<br>EAR_RESPFILE_NAME
<br>WAR_RESPFILE_NAME</td>

<td>The filename of the response files used to create jar/ear/war archives.&nbsp;
The default value is the name of the archive with ".tmp" appended (${.TARGET}.tmp).</td>
</tr>

<tr>
<td>JAR_MANIFEST
<br>EAR_MANIFEST
<br>WAR_MANIFEST</td>

<td>The name of the manifest file to place into the jar/ear/war archive.&nbsp;
This variable has no default value.&nbsp; Note: when this variable is non-empty,
the -m flag is automatically given to the <i>JAR/EAR/WAR</i> command.</td>
</tr>
</table>

<br>&nbsp;
<table BORDER WIDTH="100%" >
<caption><a NAME="SignedJarFileVars"></a><b><font size=+1><a href="#ToC_SignedJarFileVars">Signed
jar/ear/war file variables</a></font></b></caption>

<tr>
<th ALIGN=LEFT VALIGN=TOP>Variable</th>

<th ALIGN=LEFT VALIGN=TOP>Description</th>
</tr>

<tr>
<td>JAVAKEY</td>

<td>The jar/ear/war file signing tool, defaults to <b>javakey</b> (however,
if
<i>USE_JARSIGNER</i> is defined, the default is <b>jarsigner</b>)</td>
</tr>

<tr>
<td>JAVAKEYFLAGS</td>

<td>Flags to use with the <i>JAVAKEY</i> tool.&nbsp; See <b>java.mk</b>
for defaults.</td>
</tr>

<tr>
<td>JVM_JAVAKEYFLAGS</td>

<td>Normally when USE_JAVA_RESPFILE is defined, both flags and source files
are put into the response file.&nbsp; This can cause problems with certain
flags, primarily -J.&nbsp; Parameters put into JVM_JAVAKEYFLAGS will always
be passed on the command line rather than added to the response file, which
solves this problem.</td>
</tr>

<tr>
<td>SIGNED_JAR_LIBRARIES
<br>SIGNED_EAR_LIBRARIES
<br>SIGNED_WAR_LIBRARIES</td>

<td>Specifies the name(s) of the signed jar/ear/war file(s) to create.&nbsp;
The members of each jar/ear/war file is specified with the <i>SIGNED_JAR_OBJECTS/SIGNED_EAR_OBJECTS/SIGNED_WAR_OBJECTS</i>
and <i>OTHER_SIGNED_JAR_OBJECTS/OTHER_SIGNED_EAR_OBJECTSOTHER_SIGNED_WAR_OBJECTS
</i>variables
(which can be assigned in a target-specific manner, such as <i>"sigjar.jar_SIGNED_JAR_OBJECTS
= foo.class"</i>).</td>
</tr>

<tr>
<td>SIGNED_JAR_OBJECTS
<br>SIGNED_EAR_OBJECTS
<br>SIGNED_WAR_OBJECTS</td>

<td>Specifies the files which will be added to a signed jar/ear/war file.
These files will be listed as dependents of the signed jar/ear/war file,
so <b>mk</b> will try to determine how to make these objects (and thus
only rebuild the jar/ear/war file if it is out-of-date in relation to them).&nbsp;
For directories or files which <b>mk</b> doesn't know how to make, use
<i>OTHER_SIGNED_JAR_OBJECTS/OTHER_SIGNED_EAR_OBJECTS/OTHER_SIGNED_WAR_OBJECTS</i>
instead.</td>
</tr>

<tr>
<td>OTHER_SIGNED_JAR_OBJECTS
<br>OTHER_SIGNED_EAR_OBJECTS
<br>OTHER_SIGNED_WAR_OBJECTS</td>

<td>Specifies other files (and directories) which will be added to a signed
jar/ear/war file.&nbsp; <b>mk</b> does not use these as dependents, so
it will not try to determine how to make them.&nbsp; It will, however,
use its normal search path to try to locate the files.</td>
</tr>

<tr>
<td>SIGNED_JAR_FILE_ARGS
<br>SIGNED_EAR_FILE_ARGS
<br>SIGNED_WAR_FILE_ARGS</td>

<td>The contents of this variable are used as the file arguments to the
<i>JAVAKEY</i>
command (the files/directories that are archived).&nbsp; The default value
is the contents of a variable called <i>ALLSJAROBJS/ALLSEAROBJS/ALLSWAROBJS</i>,
which consists of both <i>SIGNED_JAR_OBJECTS/SIGNED_EAR_OBJECTS/SIGNED_WAR_OBJECTS</i>
and <i>OTHER_SIGNED_JAR_OBJECTS/OTHER_SIGNED_EAR_OBJECTS/OTHER_SIGNED_WAR_OBJECTS
</i>by
default.&nbsp; This variable is normally overriden in order to get around
command line length problems, by using wildcard specifications which will
be passed as-is to the <i>JAVAKEY</i> command.&nbsp; Note that the contents
of <i>SIGNED_JAR_OBJECTS/SIGNED_EAR_OBJECTS/SIGNED_WAR_OBJECTS</i> will
still be used as dependents of <i>SIGNED_JAR_LIBRARIES/SIGNED_EAR_LIBRARIES/SIGNED_WAR_LIBRARIES</i>.</td>
</tr>

<tr>
<td>SIGNED_JAR_JARFILE
<br>SIGNED_EAR_JARFILE
<br>SIGNED_WAR_JARFILE</td>

<td>The name of the temporary [unsigned] jar file that is created during
signed jar creation.&nbsp; The default name is the signed jar target name
plus ".jar" (for example, <b>sigjar.jar.jar</b>).&nbsp; This file is removed
after the <b>signed jar</b> file is created.&nbsp; <b>Note</b>: this variable
is ignored if <i>USE_JARSIGNER</i> is defined.</td>
</tr>

<tr>
<td>USE_JARSIGNER</td>

<td>If this variable is defined, use the JDK 1.2 (and higher) method of
signing jar/ear/war files.&nbsp; This implies the use of the <b>jarsigner</b>
command, and omits the need for a directive file.</td>
</tr>

<tr>
<td>JAVAKEY_DIRECT_FILE</td>

<td>The name of the temporary directive file used to create the signed
jar/ear/war file.&nbsp; Defaults to the target name plus ".d" (e.g., sigjar.jar.d).&nbsp;
Removed after the signed jar/ear/war file is created.&nbsp; <b>Note</b>:
this variable is ignored if <i>USE_JARSIGNER </i>is defined.</td>
</tr>

<tr>
<td>JAVA_SIGN_SIGNER</td>

<td>Name of the signer identity for creating the signed jar/ear/war file.&nbsp;
Default is "duke".&nbsp; This should always be overridden by the user.&nbsp;
The name used must already exist in the identity database.</td>
</tr>

<tr>
<td>JAVA_SIGN_CERT</td>

<td>The certificate number used for creating the signed jar/ear/war file.&nbsp;
Default is 1 (one).&nbsp; <b>Note</b>: this variable is ignored if <i>USE_JARSIGNER</i>
is defined.</td>
</tr>

<tr>
<td>JAVA_SIGN_CHAIN</td>

<td>The certificate chain depth used for creating the signed jar/ear/war
file.&nbsp; Default is 0 (zero).&nbsp; May not be supported by the javakey
command, but provided anyway.&nbsp; <b>Note</b>: this variable is ignored
if <i>USE_JARSIGNER</i> is defined.</td>
</tr>

<tr>
<td>JAVA_SIGN_SIGFILE</td>

<td>The name used for the generated signature file and block, which are
put into the signed jar file.&nbsp; Note that this name must be 8 characters
or less.&nbsp; Default is the target name without the extension (for example.,
if the signed jar/ear/war filename is <b>"sigjar.jar"</b>, the default
value of this variable would be "sigjar").&nbsp; <b>Note</b>: this variable
is ignored if <i>USE_JARSIGNER</i> is defined.</td>
</tr>

<tr>
<td>SJAROBJS_NOABS
<br>SEAROBJS_NOABS
<br>SWAROBJS_NOABS</td>

<td>If defined, the <i>SIGNED_JAR_OBJECTS/SIGNED_EAR_OBJECTS/SIGNED_WAR_OBJECTS</i>
arguments to the <i>JAR/EAR/WAR</i> command are passed exactly as given.&nbsp;
The default behavior is to pass the full (absolute) path to each member
of <i>SIGNED_JAR_OBJECTS/SIGNED_EAR_OBJECTS/SIGNED_WAR_OBJECTS</i>.</td>
</tr>

<tr>
<td>OTHER_SJAROBJS_NOABS
<br>OTHER_SEAROBJS_NOABS
<br>OTHER_SWAROBJS_NOABS</td>

<td>If defined, the <i>OTHER_SIGNED_JAR_OBJECTS/OTHER_SIGNED_EAR_OBJECTS/OTHER_SIGNED_WAR_OBJECTS</i>
arguments to the <i>JAR/EAR/WAR</i> command are passed exactly as given.&nbsp;
The default behavior is to pass the full (absolute) path to each member
of <i>OTHER_SIGNED_JAR_OBJECTS/OTHER_SIGNED_EAR_OBJECTS/OTHER_SIGNED_WAR_OBJECTS</i>.</td>
</tr>

<tr>
<td>JAR_RUNDIR
<br>EAR_RUNDIR
<br>WAR_RUNDIR</td>

<td>See the description for this variable in the <a href="#JarFileVars">Jar/Ear/War
variables</a> table.</td>
</tr>

<tr>
<td>USE_JAR_UPDATE
<br>USE_EAR_UPDATE
<br>USE_WAR_UPDATE</td>

<td>See the description for this variable in the <a href="#JarFileVars">Jar/Ear/War
variables</a> table.</td>
</tr>

<tr>
<td>JAR_RESPFILE
<br>EAR_RESPFILE
<br>WAR_RESPFILE</td>

<td>See the description for this variable in the <a href="#JarFileVars">Jar/Ear/War
variables</a> table.</td>
</tr>

<tr>
<td>JAR_RESPFILE_DIR
<br>EAR_RESPFILE_DIR
<br>WAR_RESPFILE_DIR</td>

<td>See the description for this variable in the <a href="#JarFileVars">Jar/Ear/War
variables</a> table.</td>
</tr>

<tr>
<td>JAR_RESPFILE_NAME
<br>EAR_RESPFILE_NAME
<br>WAR_RESPFILE_NAME</td>

<td>See the description for this variable in the <a href="#JarFileVars">Jar/Ear/War
variables</a> table.</td>
</tr>

<tr>
<td>SIGNED_JAR_MANIFEST
<br>SIGNED_EAR_MANIFEST
<br>SIGNED_WAR_MANIFEST</td>

<td>The name of the manifest file to place into the signed jar/ear/war
archive.&nbsp; This variable has no default value.&nbsp; Note: when this
variable is non-empty, the -m flag is automatically given to the <i>JAR/EAR/WAR</i>
command.</td>
</tr>
</table>

<br>&nbsp;
<table BORDER WIDTH="100%" >
<caption><a NAME="JavadocVars"></a><b><font size=+1><a href="#ToC_JavadocVars">Javadoc
variables</a></font></b></caption>

<tr>
<th ALIGN=LEFT VALIGN=TOP>Variable</th>

<th ALIGN=LEFT VALIGN=TOP>Description</th>
</tr>

<tr>
<td>JAVADOC</td>

<td>The Java API documentation tool to use, defaults to <b>javadoc</b></td>
</tr>

<tr>
<td>JAVADOCFLAGS</td>

<td>Flags to use with the <b>JAVADOC</b> tool.&nbsp; See <b>java.mk</b>
for defaults.</td>
</tr>

<tr>
<td>JVM_JAVADOCFLAGS</td>

<td>Normally when <b>USE_JAVA_RESPFILE</b> is defined, both flags and source
files are put into the response file.&nbsp; This can cause problems with
certain flags, primarily <b>-J</b>.&nbsp; Parameters put into <b>JVM_JAVADOCFLAGS</b>
will always be passed on the command line rather than added to the response
file, which solves this problem.</td>
</tr>

<tr>
<td>JAVADOCS</td>

<td>The <b>.java</b> files or package names that will be used to generate
API documentation with the <b>JAVADOC</b> tool.</td>
</tr>

<tr>
<td>JAVADOC_GENDIR</td>

<td>The directory where the documentation (.html) files are generated.&nbsp;
The default value is ".", which will cause the docs to be placed in the
object tree of the sandbox (similar to where compiler objects are generated).</td>
</tr>

<tr>
<td>JAVADOC_SRCDIR</td>

<td>If set, the <b>JAVADOC</b> tool will use the contents of this variable
with the -sourcepath flag.&nbsp; Unset by default.&nbsp; See also the <b>USE_GENPATH_FOR_JAVA_SRCDIR</b>
and <b>JAVA_SRCDIR_GENPATH_FLAGS</b> variables (in the <a href="#JavaMiscVars">Miscellaneous
variables</a> table).</td>
</tr>

<tr>
<td>BUILDJAVADOCS</td>

<td>The Java documentation actions will only be performed if this variable
is defined (however, if the <b>javadoc_all</b> target is used, this variable
need not be defined).&nbsp; This operates independently of <b>BUILDJAVA</b>,
so you can build Java documentation without performing any other Java actions.&nbsp;
This variable is undefined by default.</td>
</tr>

<tr>
<td>JAVADOC_AFTER_JAVAC</td>

<td>If this variable is defined, then the <b>JAVADOC</b> pass will occur
after the <b>OBJECTS</b>/<b>JAVAC</b> pass, rather than before the <b>EXPINC</b>/<b>JAVAH</b>
pass.&nbsp; This variable is undefined by default.</td>
</tr>
</table>

<br>&nbsp;
<table BORDER WIDTH="100%" >
<caption><a NAME="JavadepVars"></a><b><font size=+1><a href="#ToC_JavadepVars">Java
dependency file variables</a></font></b></caption>

<tr>
<th ALIGN=LEFT VALIGN=TOP>Variable</th>

<th ALIGN=LEFT VALIGN=TOP>Description</th>
</tr>

<tr>
<td>JAVADEP</td>

<td>The Java dependency generator tool to use, which defaults to <b>jikes</b>.</td>
</tr>

<tr>
<td>JAVADEPFLAGS</td>

<td>Flags to use with the <i>JAVADEP</i> tool.&nbsp; See <b>java.mk </b>for
defaults.</td>
</tr>

<tr>
<td>JVM_JAVADEPFLAGS</td>

<td>Normally when USE_JAVA_RESPFILE is defined, both flags and source files
are put into the response file.&nbsp; This can cause problems with certain
flags, primarily -J.&nbsp; Parameters put into JVM_JAVADEPFLAGS will always
be passed on the command line rather than added to the response file, which
solves this problem.</td>
</tr>

<tr>
<td>JAVADEP_FILE_ARGS</td>

<td>When <i>JAVADEP_MULTICALL</i> isn't defined, the contents of this variable
are used as the file arguments to the <i>JAVADEP</i> command.&nbsp; The
default value is the contents of <i>JAVA_CLASSES</i> (with .java suffixes
and full pathnames as generated by the results of <b>mk</b>'s searching).&nbsp;
This variable can be used to help alleviate command line length problems
by using shell wildcards (e.g., *.java) which will be passed as-is to the
<i>JAVADEP</i>
command.</td>
</tr>

<tr>
<td>JAVADEP_SRCDIR</td>

<td>If set, the <i>JAVADEP</i> tool will use the contents of this variable
with the -classpath flag.&nbsp; Otherwise, the tool will search for classes
in the environment variable<i> CLASSPATH</i>.&nbsp; Unset by default.&nbsp;
See also the <i>USE_GENPATH_FOR_JAVA_SRCDIR</i> and <i>JAVA_SRCDIR_GENPATH_FLAGS</i>
variables (in the <a href="#JavaMiscVars">Miscellaneous variables</a> table).</td>
</tr>

<tr>
<td>JAVA_DEPENDENCIES</td>

<td>If this variable is defined, the <i>JAVADEP</i> command is run before
compiling each <b>.java</b> file.&nbsp; Otherwise, no dependency information
is generated.</td>
</tr>

<tr>
<td>DEPEND_FILE_DIRS</td>

<td>The directories (whitespace-delimited) in which mkdep will look for<b>
.u/.d </b>files.&nbsp; This is only necessary with the non-ODE version
of Jikes, which creates the dependency files where the .java files are
located.&nbsp; Thus, the typical value to use with the old <b>jikes</b>
program is the src directory in which <b>mk</b> is currently processing,
"${SANDBOXBASE}/src${MAKEDIR}".&nbsp; This variable is undefined by default.</td>
</tr>

<tr>
<td>JAVADEP_MULTICALL</td>

<td>When dependencies are created during the <b>depend_all</b> action,
by default the <i>JAVADEP</i> tool is run once with all of the .java files
as arguments.&nbsp; This may cause command line length overflow.&nbsp;
Defining <i>JAVADEP_MULTICALL</i> will cause the <i>JAVADEP</i> tool to
be run separately for each <b>.java</b> file instead.</td>
</tr>
</table>

<br>&nbsp;
<table BORDER WIDTH="100%" >
<caption><a NAME="JavahVars"></a><b><font size=+1><a href="#ToC_JavahVars">Java
header file variables</a></font></b></caption>

<tr>
<th ALIGN=LEFT VALIGN=TOP>Variable</th>

<th ALIGN=LEFT VALIGN=TOP>Description</th>
</tr>

<tr>
<td>JAVAH</td>

<td>The Java header file tool to use, defaults to <b>javah</b></td>
</tr>

<tr>
<td>JAVAHFLAGS</td>

<td>Flags to use with the <i>JAVAH</i> tool.&nbsp; See <b>java.mk</b> for
defaults.</td>
</tr>

<tr>
<td>JVM_JAVAHFLAGS</td>

<td>Normally when USE_JAVA_RESPFILE is defined, both flags and source files
are put into the response file.&nbsp; This can cause problems with certain
flags, primarily -J.&nbsp; Parameters put into JVM_JAVAHFLAGS will always
be passed on the command line rather than added to the response file, which
solves this problem.</td>
</tr>

<tr>
<td>JAVAH_CLASSES</td>

<td>The classes for which the <i>JAVAH</i> tool will be run to generate
headers.&nbsp; The package name should not be given (see <i>JAVA_PACKAGE_NAME</i>).</td>
</tr>

<tr>
<td>JAVAH_GENDIR</td>

<td>The directory where the header files will be generated.&nbsp; The default
value is ".", which will cause the headers to be placed in the object tree
of the sandbox (similar to where compiler objects are generated).</td>
</tr>

<tr>
<td>JAVAH_SRCDIR</td>

<td>If set, the <i>JAVAH</i> tool will use the contents of this variable
with the -classpath flag.&nbsp; Otherwise, the tool will search for classes
in the environment variable <i>CLASSPATH</i>.&nbsp; Unset by default.&nbsp;
See also the <i>USE_GENPATH_FOR_JAVA_SRCDIR </i>and <i>JAVA_SRCDIR_GENPATH_FLAGS</i>
variables (in the <a href="#JavaMiscVars">Miscellaneous variables</a> table).</td>
</tr>

<tr>
<td>NO_JAVAH_SUFFRULES</td>

<td>If set, the suffix transforms from ${CLASS_SUFF} to .h and .c which
run <i>JAVAH</i>, are not defined.</td>
</tr>
</table>

<br>&nbsp;
<table BORDER WIDTH="100%" >
<caption><a NAME="RMIVars"></a><b><font size=+1><a href="#ToC_RMIVars">RMI
compiler variables</a></font></b></caption>

<tr>
<th ALIGN=LEFT VALIGN=TOP>Variable</th>

<th ALIGN=LEFT VALIGN=TOP>Description</th>
</tr>

<tr>
<td>RMIC</td>

<td>The Java RMI stub compiler tool to use, defaults to <b>rmic</b></td>
</tr>

<tr>
<td>RMICFLAGS</td>

<td>Flags to use with the RMIC tool.&nbsp; See <b>java.mk</b> for defaults.</td>
</tr>

<tr>
<td>JVM_RMICFLAGS</td>

<td>Normally when USE_JAVA_RESPFILE is defined, both flags and source files
are put into the response file.&nbsp; This can cause problems with certain
flags, primarily -J.&nbsp; Parameters put into JVM_RMICFLAGS will always
be passed on the command line rather than added to the response file, which
solves this problem.</td>
</tr>

<tr>
<td>RMI_CLASSES</td>

<td>The classes for which the RMIC tool will be run to generate RMI stub
classes.&nbsp; The package name should not be given (see JAVA_PACKAGE_NAME).&nbsp;
The stubs will be created in the CLASSGENDIR directory.</td>
</tr>

<tr>
<td>RMIC_GENDIR</td>

<td>The directory where the RMI stub class files are generated.&nbsp; The
default value is ${CLASSGENDIR}.</td>
</tr>

<tr>
<td>RMIC_SRCDIR</td>

<td>If set, the RMIC tool will use the contents of this variable with the
<b>-classpath</b>
flag.&nbsp; Otherwise, the tool will search for classes in the environment
variable CLASSPATH.&nbsp; Unset by default.&nbsp; See also the USE_GENPATH_FOR_JAVA_SRCDIR
and<i> </i>JAVA_SRCDIR_GENPATH_FLAGS variables (in the <a href="#JavaMiscVars">Miscellaneous
variables</a> table).</td>
</tr>

<tr>
<td>RMI_DURING_JAVAC</td>

<td>If this variable is defined, the RMI processing will occur during the
JAVAC (OBJECTS) pass.&nbsp; Otherwise, RMI processing will occur during
the JAVAH (EXPINC) pass.&nbsp; This variable is undefined by default.</td>
</tr>
</table>

<br>&nbsp;
<table BORDER WIDTH="100%" >
<caption><a NAME="JavaMiscVars"></a><b><font size=+1><a href="#ToC_JavaMiscVars">Miscellaneous
variables</a></font></b></caption>

<tr>
<th ALIGN=LEFT VALIGN=TOP>Variable</th>

<th ALIGN=LEFT VALIGN=TOP>Description</th>
</tr>

<tr>
<td>BUILDJAVA</td>

<td>If defined, Java-related actions (except creating javadocs) are performed
(otherwise they are not). Typically, users will only define this variable
on one platform, since Java class files can be used on all platforms.&nbsp;
Undefined by default.</td>
</tr>

<tr>
<td>USE_JAVA_PASSES</td>

<td>When defined, the normal ODE pass names <b>EXPINC</b>, <b>OBJECTS</b>,
<b>EXPLIB</b>,and
<b>STANDARD</b>
are replaced with <b>JAVAH</b>,
<b>JAVAC</b>, <b>JAR</b>, and <b>EARWAR</b>,
respectively.&nbsp; These Java passes only build Java-related targets,
but are otherwise the same with regards to order of execution and the <b>SUBDIRS</b>
variable used to control directory traversal (however, see <b>CONVERT_JAVA_SUBDIRS</b>).&nbsp;
Undefined by default.</td>
</tr>

<tr>
<td>USE_JAVA_RESPFILE</td>

<td>If this variable is defined, the files normally given on the command
line to the <b>JAVAC, JAVADOC</b>, and <b>JAR/EAR/WAR</b> commands are
given in a response file instead.&nbsp; This is typically employed when
there are sufficient files to create command line length problems.&nbsp;
Undefined by default.&nbsp; <b>Note</b>: you must be using JDK 1.2 for
this method to work properly.</td>
</tr>

<tr>
<td>JAVA_PACKAGE_NAME</td>

<td>The package in which the java files of the current directory belong.&nbsp;
The default value is the subdirectory below src in which <b>mk</b> is currently
building (with slashes converted to periods).&nbsp; For example, if you
are building in <b><tt>${SANDBOXBASE}/src/COM/ibm/project/bin</tt></b>,
then the default value is <b><tt>COM.ibm.project.bin</tt></b>.</td>
</tr>

<tr>
<td>CLASSGENDIR</td>

<td>The directory where class files are generated.&nbsp; This should be
a full path.&nbsp; Optionally, <b>CLASSGEN_SUBDIR</b> may be used instead
to simply specify a subdirectory of the sandbox.&nbsp; The default value
of <b>CLASSGENDIR</b> is <b><tt>${SANDBOXBASE}${CLASSGEN_SUBDIR}</tt></b>.</td>
</tr>

<tr>
<td>CLASSGEN_SUBDIR</td>

<td>The subdirectory of the sandbox in which to generate class files.&nbsp;
This path should start with a slash, as in <b>"/export/classes"</b> (the
default value).</td>
</tr>

<tr>
<td>CLASS_SUFF</td>

<td>Suffix for class files.&nbsp; Default value is <b>.class</b></td>
</tr>

<tr>
<td>JAVA_SUFF</td>

<td>Suffix for java files.&nbsp; Default value is <b>.java</b></td>
</tr>

<tr>
<td>JAR_SUFF</td>

<td>Suffix for jar files.&nbsp; Default value is <b>.jar</b></td>
</tr>

<tr>
<td>EAR_SUFF</td>

<td>Suffix for ear files.&nbsp; Default value is <b>.ear</b></td>
</tr>

<tr>
<td>WAR_SUFF</td>

<td>Suffix for war files.&nbsp; Default value is <b>.war</b></td>
</tr>

<tr>
<td>JS_SUFF</td>

<td>Suffix for JavaScript files.&nbsp; Default value is <b>.js</b></td>
</tr>

<tr>
<td>XML_SUFF</td>

<td>Suffix for XML files.&nbsp; Default value is <b>.xml</b></td>
</tr>

<tr>
<td>CONVERT_JAVA_SUBDIRS</td>

<td>When defined, the default values of <b>JAVAH_SUBDIRS</b>, <b>JAVAC_SUBDIRS</b>,
<b>JAR_SUBDIRS</b>,
and<b> EARWAR_SUBDIRS</b> are the same as <b>EXPINC_SUBDIRS</b>,
<b>OBJECTS_SUBDIRS</b>,
<b>EXPLIB_SUBDIRS</b>,
and <b>STANDARD_SUBDIRS</b> respectively.&nbsp; This is intended for Java
developers who want to use the new Java pass names (see <b>USE_JAVA_PASSES</b>),
but already have existing makefiles which use the standard pass names.&nbsp;
Undefined by default.</td>
</tr>

<tr>
<td>USE_GENPATH_FOR_JAVA_SRCDIR</td>

<td>If defined, the contents of the <b>_SRCDIR</b> variables (<b>JAVAC_SRCDIR</b><i>,
</i><b>JAVADOC_SRCDIR</b>,
etc.) will be processed by the <b>:G</b> variable modifier (equivalent
of the <b>genpath</b> command).&nbsp; This allows users to put relative
paths in the <b>_SRCDIR</b> variables and have the appropriate directories
generated for the backing chain.&nbsp; Undefined by default.</td>
</tr>

<tr>
<td>JAVA_SRCDIR_GENPATH_FLAGS</td>

<td>When<i> </i><b>USE_GENPATH_FOR_JAVA_SRCDIR</b> is set, the genpath
flags in this variable are used while processing the <b>_SRCDIR</b> variables.&nbsp;
The default is <b>-S</b>, which causes only <b>src</b> directories to be
included when expanding relative paths.</td>
</tr>

<tr>
<td>JVM</td>

<td>The Java virtual machine command to use.&nbsp; The default value is
<b>java</b>.</td>
</tr>

<tr>
<td>JVMFLAGS</td>

<td>Additional flags to pass to the <b>java</b> command (Java virtual machine)
during execution of the packaging tool.&nbsp; Undefined by default.</td>
</tr>

<tr>
<td>QUOTE_JAVA_FILES</td>

<td>If defined, the value of <b>JAVA_QUOTE</b> will enclose every file
argument to every Java command.&nbsp; This provides a way of properly processing
filenames which contain shell metacharacters (such as the dollar sign).&nbsp;
This variable is undefined by default.</td>
</tr>

<tr>
<td>JAVA_QUOTE</td>

<td>The character that will be prepended and appended to all filenames
passed to Java commands.&nbsp; The default value is the contents of the
<b>FILE_QUOTE</b>
variable, which is a single quote by default.</td>
</tr>
</table>

<h2>
<a NAME="JavaPasses"></a><a href="#ToC_JavaPasses">Passes used for Java
processing</a></h2>
Each of the Java targets are processed during a particular pass, as follows:
<table BORDER >
<tr>
<td><b>Target</b></td>

<td><b>Pass<sub>1</sub></b></td>

<td><b>Pass<sub>2</sub></b></td>
</tr>

<tr>
<td>JAVADOCS</td>

<td>JAVADOCS</td>

<td>JAVADOCS</td>
</tr>

<tr>
<td>JAVAH_CLASSES
<br>RMI_CLASSES (if RMI_DURING_JAVAC is <i>not</i> defined)</td>

<td>EXPINC</td>

<td>JAVAH</td>
</tr>

<tr>
<td>JAVA_CLASSES
<br>RMI_CLASSES (if RMI_DURING_JAVAC is defined)</td>

<td>OBJECTS</td>

<td>JAVAC</td>
</tr>

<tr>
<td>JAR_LIBRARIES
<br>SIGNED_JAR_LIBRARIES</td>

<td>EXPLIB</td>

<td>JAR</td>
</tr>

<tr>
<td>EAR_LIBRARIES
<br>SIGNED_EAR_LIBRARIES
<br>WAR_LIBRARIES
<br>SIGNED_WAR_LIBRARIES</td>

<td>STANDARD</td>

<td>EARWAR</td>
</tr>
</table>

<ol>
<li>
These pass names are used when <b>USE_JAVA_PASSES</b> is <i>not</i> defined.</li>

<li>
These pass names are used when <b>USE_JAVA_PASSES</b> <i>is</i> defined.</li>
</ol>

<h2>
<a NAME="LocationForClassFiles"></a><a href="#ToC_LocationForClassFiles">Location
for built class files</a></h2>
Since Java class files are platform independent, the output can be shared
between different platforms.&nbsp; The location for the built class files
is indicated by the variables <i>CLASSGENDIR</i> or <i>CLASSGEN_SUBDIR</i>
(see above).&nbsp; The default value for <i>CLASSGENDIR</i> is "${SANDBOXBASE}${CLASSGEN_SUBDIR}".&nbsp;
This applies to the output of both JAVAC compiles and RMIC compiles.&nbsp;
The <i>CLASSPATH</i> set in the <b><tt>Buildconf</tt></b> and <b><tt>Buildconf.exp</tt></b>
files also uses this location as a default.
<br>&nbsp;
<h2>
<a NAME="JavaDependencyGeneration"></a><a href="#ToC_JavaDependencyGeneration">Dependency
generation</a></h2>
When the variable<i> JAVA_DEPENDENCIES</i> is defined, Java dependency
information is generated before each compilation.&nbsp; For faster processing,
the <b>depend_all</b> target can be executed once before doing normal building
(for example., "<b><tt>mk -DBUILDJAVA -DJAVA_DEPENDENCIES depend_all</tt></b>").&nbsp;
The default tool for generating Java dependency information is called <b>jikes</b>.&nbsp;
The <b>jikes</b> program is included with ODE on most platforms, but is
not supported at the same level as the normal ODE tools (only defects in
the dependency generation functionality will be addressed, and at Severity
levels 3 and 4 only).&nbsp; The jikes documentation, discussion forum,
and other information can be found at the Jikes project page at <a href="http://oss.software.ibm.com/developerworks/opensource/jikes/">http://oss.software.ibm.com/developerworks/opensource/jikes/</a>.&nbsp;
Pre-built binaries are currently available on all <a href="ODEAdminsGuide.htm#Header_4">supported
operating systems</a> <i>except</i> MVS/USS and OS/400.&nbsp; The version
number that <b>jikes</b> displays will be the Jikes version the source
originated from with the letter "o" appended to show that it is the ODE
edition.
<p>The ODE-buildable Jikes source code is available for download in the
same location(s) as the ODE tools, as the filename <b>%release_name%_b<i>num</i>_jikes_src.zip</b>
(where <i>num</i> is the build number).&nbsp; This file will likely only
be updated as necessary (i.e., bug fixes or other ports), thus the build
number for the source code will often be behind the current ODE build.
<p>The version of Jikes distributed with ODE differs slightly from the
one on the Jikes project web site.&nbsp; Namely:
<ul>
<li>
Dependency files (.u) are created in the current directory instead of where
the .java file(s) are located.</li>

<li>
.java files are always used as dependents when possible (instead of .class
files).&nbsp; This prevents circular dependencies as well as unwanted recompilation.&nbsp;
Ensure the root of the source tree where the package is located is in the
CLASSPATH (see below).</li>
</ul>
The following behaviors are common to both the original Jikes project as
well as ODE's edition:
<ul>
<li>
The archive of base Java packages must be explicitly stated in <i>CLASSPATH</i>,
otherwise Jikes will not be able to locate the standard classes (for example
java.lang.String) and errors may result. In JDK 1.1, this archive is lib/classes.zip.
In JDK 1.2, the archive is jre/lib/rt.jar.</li>

<li>
The root of the source tree (where the first component of the package name
begins) should be added to<i> CLASSPATH</i>.&nbsp; So, for example, one
might set <i>CLASSPATH</i> as follows on Unix platforms (assuming the first
component of the package starts in the root of src tree and the export/classes
directory):</li>

<br><b>&nbsp;&nbsp;&nbsp; CLASSPATH=/sandbox/src:/sandbox/export/classes</b>
<br>Using<i> JAVADEP_SRCDIR</i> instead of <i>CLASSPATH</i> will also work,
and will prevent having the above change affect other Java-related tools.
<li>
Jikes may generate errors and warnings about things that javac doesn't
complain about, yet the dependency file generation is not affected.&nbsp;
For this reason, the rules both ignore the return code of Jikes and redirect
its output to the null device (/dev/null or NUL: depending on the platform).&nbsp;
The dependency generator is not intended to be used to locate problems
in source code.&nbsp; This behavior can be overridden by setting <i>JAVADEPFLAGS</i>
as desired.</li>
</ul>

<h2>
<a NAME="JavaMakefile"></a><a href="#ToC_JavaMakefile">Example makefile</a></h2>
This example shows what might be typical usage for creating various Java
targets.
<ul><font face="Courier New, Courier, mono"># We will build both Java objects
and javadocs, so define both.</font>
<br><font face="Courier New, Courier, mono"># Their values are unimportant,
so long as they are defined.</font>
<br><font face="Courier New, Courier, mono"># These would normally be set
either in Makeconf or from the command</font>
<br><font face="Courier New, Courier, mono"># line, of course.</font>
<br><font face="Courier New, Courier, mono">BUILDJAVA =</font>
<br><font face="Courier New, Courier, mono">BUILDJAVADOCS =</font>
<p><font face="Courier New, Courier, mono"># Put the class files in an
alternate directory of the sandbox's export tree</font>
<br><font face="Courier New, Courier, mono">CLASSGEN_SUBDIR = /export/Java/classes</font>
<p><font face="Courier New, Courier, mono"># Build the class files</font>
<br><font face="Courier New, Courier, mono">JAVA_CLASSES = MyClass${CLASS_SUFF}
MyGui${CLASS_SUFF}</font>
<p><font face="Courier New, Courier, mono"># Generate a JNI header</font>
<br><font face="Courier New, Courier, mono">JAVAH_CLASSES = MyClass${CLASS_SUFF}</font>
<p><font face="Courier New, Courier, mono"># Since we use an alternative
class generation location,</font>
<br><font face="Courier New, Courier, mono"># the following is needed for
javah to find the class files.</font>
<br><font face="Courier New, Courier, mono">JAVAH_SRCDIR = ${CLASSGENDIR}${PATHSEP}${CLASSPATH}</font>
<p><font face="Courier New, Courier, mono"># Document everything in the
current directory/package</font>
<br><font face="Courier New, Courier, mono">JAVADOCS = ${JAVA_PACKAGE_NAME}</font>
<p><font face="Courier New, Courier, mono"># Maybe this makefile isn't
located in ${SANDBOXBASE}/src/COM/ibm/myproject</font>
<br><font face="Courier New, Courier, mono"># (just as an example), so
force it to think so.</font>
<br><font face="Courier New, Courier, mono">JAVA_PACKAGE_NAME = COM.ibm.myproject</font>
<p><font face="Courier New, Courier, mono"># Generate a jar file.</font>
<br><font face="Courier New, Courier, mono"># Includes both the native
header file and the entire COM directory (within</font>
<br><font face="Courier New, Courier, mono"># the ${CLASSGENDIR} directory,
which is the default setting of JAR_RUNDIR).</font>
<br><font face="Courier New, Courier, mono"># Note that the header file
will be stored with its full pathname (since mk</font>
<br><font face="Courier New, Courier, mono"># will expand it during the
search for members of JAR_OBJECTS), one of</font>
<br><font face="Courier New, Courier, mono"># the side effects of using
jar on multiple directories.&nbsp; Optimal jar usage</font>
<br><font face="Courier New, Courier, mono"># may require exporting everything
that is to be jarred to a common directory</font>
<br><font face="Courier New, Courier, mono"># structure and setting JAR_RUNDIR
to the base of that structure (so that</font>
<br><font face="Courier New, Courier, mono"># all the objects can be relative
paths).</font>
<br><font face="Courier New, Courier, mono">JAR_LIBRARIES = MyJar${JAR_SUFF}</font>
<br><font face="Courier New, Courier, mono">JAR_OBJECTS = COM_ibm_myproject_MyClass.h</font>
<br><font face="Courier New, Courier, mono">OTHER_JAR_OBJECTS = COM</font>
<p><font face="Courier New, Courier, mono"># Install the jar file</font>
<br><font face="Courier New, Courier, mono">IDIR = /bin/</font>
<p><font face="Courier New, Courier, mono">ILIST = ${JAR_LIBRARIES}</font>
<p><font face="Courier New, Courier, mono">.include &lt;${RULES_MK}></font></ul>

<hr width="100%">
<h1>
<a NAME="ShlibRules"></a><a href="#ToC_ShlibRules">Shared library rules</a></h1>
The generation of shared libraries is typically a very platform and compiler
dependent process, and is more complex than archive library or normal executable
creation.&nbsp; As a result, the ODE rules to generate them are unique
in some ways, especially on Windows and OS/2 platforms.&nbsp; Because the
user may often need to alter the default behavior for shared library creation,
this section has been written to provide a guide to the variables and processes
involved.
<p>Library creation and linkage into executables is affected by four makefiles:<b>std.mk</b>,
<b>lib.mk</b>,
<b>prog.mk</b>,
and to a lesser degree, <b>bld.passes.mk</b>.
<b>std.mk</b> contain the
default values for all of the variables (tool names, flags, etc.). <b>lib.mk</b>
contains the commands that generate shared (and archive) libraries and
their related files.&nbsp; <b>prog.mk</b> contains the commands which create
executables (which may link with shared and/or archive libraries).
<b>bld.passes.mk</b>
controls the pass in which the archive and shared libraries are generated
(both are created during the EXPLIB pass).&nbsp; For a complete understanding
of how the shared library rules function, it is suggested that <b>lib.mk</b>
and <b>std.mk</b> are studied.
<h2>
<a NAME="ShlibVariables"></a><a href="#ToC_ShlibVariables">Variables</a></h2>

<table BORDER >
<caption><b><font size=+1>Variables involved with shared library creation</font></b></caption>

<tr>
<td><b>Variable</b></td>

<td><b>Description</b></td>
</tr>

<tr>
<td>SHARED_LIBRARIES</td>

<td>The user should specify the full name of the libraries to be created
in this variable.</td>
</tr>

<tr>
<td>USE_SHARED_LIBRARY</td>

<td>If defined, the value of LIB_SUFF will be set equal to the value of
IMPLIB_SUFF (LIB_SUFF otherwise defaults to STATLIB_SUFF).&nbsp; Also,
if defined, this variable will cause the MVS/USS compiler to use the DLL
flag.</td>
</tr>

<tr>
<td>BUILD_SHARED_OBJECTS</td>

<td>Define this in makefiles where object code is generated which is intended
to be put into a shared library.&nbsp; This ensures that the needed CFLAGS
are used at compile time.</td>
</tr>

<tr>
<td>SHLD</td>

<td>The shared library linker.&nbsp; Usually the same tool as LD, but there
are exceptions (e.g., cset on AIX).&nbsp; Since the compiler-specific versions
take priority, one must use them to override the defaults (e.g., _vage_cpp_SHLD_).</td>
</tr>

<tr>
<td>SHLDFLAGS</td>

<td>The flags used with the SHLD tool.&nbsp; The contents of this variable
will be <i>added</i> to those in the compiler-specific version of this
flag (e.g., _vage_cpp_SHLDFLAGS_), so the latter would have to be overridden
in order to <i>replace</i> the default flags.</td>
</tr>

<tr>
<td>SHLD_TRAILING_FLAGS</td>

<td>Flags appended to the shared library linker command. This variable
normally is used with the "-l" and "-L" linker flags for old compilers/linkers
that don't re-read libraries to resolve symbols found in object files.</td>
</tr>

<tr>
<td>SHLDENV
<br>SHLDARGS</td>

<td>Other flags for the SHLD tool can added to these variables if desired.</td>
</tr>

<tr>
<td>IMPLIB_SUFF</td>

<td>The suffix of the import library (the library that is linked with when
executables are created).</td>
</tr>

<tr>
<td>SHLIB_SUFF</td>

<td>The suffix of the shared library (the library that is used at runtime).</td>
</tr>

<tr>
<td>MAJOR_VER_LIBSUFF</td>

<td>For operating systems which use the shared library naming convention
"libname.so<i>.m.n</i>", where <i>m</i> is the major version of the library,
this variable allows the user to set the major version suffix.&nbsp; The
default value is ".0".</td>
</tr>

<tr>
<td>MINOR_VER_LIBSUFF</td>

<td>For operating systems which use the shared library naming convention
"libname.so<i>.m.n</i>", where <i>n</i> is the minor version of the library,
this variable allows the user to set the minor version suffix.&nbsp; The
default value is ".0".</td>
</tr>

<tr>
<td>DEFFILE_SUFF</td>

<td>The suffix of the module definition file (.def by default).</td>
</tr>

<tr>
<td>RESPFILE_SUFF</td>

<td>The suffix of the response file (.rsp by default).</td>
</tr>

<tr>
<td>EXPFILE_SUFF</td>

<td>The suffix of the export file (.exp by default).</td>
</tr>

<tr>
<td>IMPLIB</td>

<td>The tool that generates an import library.&nbsp; Typically only used
with the Visual Age compilers.</td>
</tr>

<tr>
<td>IMPLIBFLAGS</td>

<td>Flags to be used with the IMPLIB tool.&nbsp; The compiler-specific
version (e.g., _vage_cpp_IMPLIBFLAGS_) should be used to override defaults.</td>
</tr>

<tr>
<td>IMPLIBARGS</td>

<td>The arguments to be given to the IMPLIB tool.&nbsp; Although additional
flags may be used in this variable, this variable must contain the objects
the tool will operate on (for OS/2, the library name and the .dll or .def
file, for Windows, just the .def file alone).</td>
</tr>

<tr>
<td>CPPFILT</td>

<td>The tool that generates demangled symbol names (used to produce .def
files).</td>
</tr>

<tr>
<td>CPPFILTFLAGS</td>

<td>The flags used with the CPPFILT tool.</td>
</tr>

<tr>
<td>DEFFILE_LINE1
<br>DEFFILE_LINE2
<br>DEFFILE_LINE3
<br>DEFFILE_LINE4
<br>DEFFILE_LINE5</td>

<td>Data in these five variables will be written out, in order, to the
.def file during autogeneration.&nbsp; The default lines include the bare
minimum LIBRARY and EXPORTS lines.&nbsp; See std.mk for the exact default
values.</td>
</tr>

<tr>
<td>IMPORT_LIBRARIES</td>

<td>Not typically overridden by the user, this is a list of all import
libraries to be created (which is generated from the SHARED_LIBRARIES list
automatically).</td>
</tr>

<tr>
<td>IMPLIB_SOURCES</td>

<td>Not typically overridden by the user, this is a list of the dependents
of the IMPORT_LIBRARIES target (which is normally the matching shared library,
since most import libraries are generated as a result of generating the
shared library...except with the Visual Age compiler for Windows, in which
case the default value is the matching .def file).</td>
</tr>

<tr>
<td>NO_LINK_EXPFILES</td>

<td>On Unix platforms, users may wish to maintain export files for creating
shared libraries.&nbsp; They can be added to OFILES so the shared library
will rebuild when the export file changes, but they may not want them to
be treated as objects when the link command is run.&nbsp; Defining NO_LINK_EXPFILES
prevents files that end in EXPFILE_SUFF from being used in the link command
(providing that OFILES is used to include them).</td>
</tr>

<tr>
<td>NO_IMPLIB_COMMANDS</td>

<td>If defined, the import library will be assumed to be generated as a
side effect of the linker rather than created using a separate command.&nbsp;
As a result, no dependencies on .def files will be created.&nbsp; Note:
this variable is only meaningful when CCFAMILY is set to "visual" or "vage".</td>
</tr>

<tr>
<td>SHLIB_DURING_EXPSHLIB</td>

<td>Causes the shared library to be generated during the EXPSHLIB pass
instead of EXPLIB.</td>
</tr>

<tr>
<td>SHLIB_DURING_STANDARD</td>

<td>Causes the shared library to be generated during the STANDARD pass
instead of EXPLIB.</td>
</tr>
</table>

<h2>
<a NAME="ShlibMakefile"></a><a href="#ToC_ShlibMakefile">Example makefile</a></h2>
This example shows what might be typical usage for creating shared libraries.&nbsp;
Also see the lib/makefile in the bbexample for a more complete example.
<ul><font face="Courier New, Courier, mono"># Define the following so LIB_SUFF
is set conveniently.</font>
<br><font face="Courier New, Courier, mono"># This would normally be set
in Makeconf or in the environment.</font>
<br><font face="Courier New, Courier, mono">USE_SHARED_LIBRARY =</font>
<p><font face="Courier New, Courier, mono"># Define the objects; they are
located in subdirectories</font>
<br><font face="Courier New, Courier, mono"># (whose makefiles should define
BUILD_SHARED_OBJECTS).</font>
<br><font face="Courier New, Courier, mono">OBJECTS_SUBDIRS = shlibobjs</font>
<br><font face="Courier New, Courier, mono">OFILES = shlibobjs/foo1${OBJ_SUFF}
shlibobjs/foo2${OBJ_SUFF}</font>
<p><font face="Courier New, Courier, mono"># The name of the shared library.</font>
<br><font face="Courier New, Courier, mono">SHARED_LIBRARIES = ${LIB_PREF}foo${SHLIB_SUFF}</font>
<p><font face="Courier New, Courier, mono"># Where and what should we export?</font>
<br><font face="Courier New, Courier, mono">EXPDIR = /usr/lib/</font>
<br><font face="Courier New, Courier, mono">EXPLIBTOP = ../../</font>
<br><font face="Courier New, Courier, mono">EXPLIB_TARGETS = export_${LIB_PREF}foo${LIB_SUFF}</font>
<p><font face="Courier New, Courier, mono">.include &lt;${RULES_MK}></font></ul>

<h2>
<a NAME="ShlibNotes"></a><a href="#ToC_ShlibNotes">Compiler notes</a></h2>
The following<i> CCFAMILY</i> values (for example., compilers) have special
behaviors (on the shown platforms) in the rules where building shared libraries
is concerned.&nbsp; Compilers not listed have no known peculiarities worth
mentioning and should not require any unusual changes to variables or rules.
<h3>
<a NAME="ShlibNotes_aixcset"></a><a href="#ToC_ShlibNotes_aixcset">cset
(AIX)</a></h3>
When the <i>CCTYPE</i> is set to "cc" or "ansi", linking is performed with
the linker (<b>ld</b> by default) in one step.&nbsp; When <i>CCTYPE</i>
is "cpp", the makeC++SharedLib script is used to generate a shared object,
which is then put into an <b>ar</b> archive.&nbsp; In both cases, the final
result is (due to the default value of SHLIB_SUFF) a .a file.&nbsp; In
the "cpp" case, the intermediate shared object is named the same as the
shared library with ".so" appended (for example., libmylib.a.so).
<h3>
<a NAME="ShlibNotes_mvsnative"></a><a href="#ToC_ShlibNotes_mvsnative">native
(MVS/USS)</a></h3>
When USE_SHARED_LIBRARY is defined, the compiler-specific <i>CFLAGS</i>
will include the DLL flag.&nbsp; This is needed for all modules, even the
objects from which executables are made.
<h3>
<a NAME="ShlibNotes_vage"></a><a href="#ToC_ShlibNotes_vage">vage (Windows
NT/95 and OS/2)</a></h3>
The default linker is <b>ilink</b>, so special measures must be taken to
link with the compiler (<b>icc</b>).&nbsp; A working example of this is
included in the lib/makefile of the bbexample.&nbsp; The rules support
two ways of generating a DLL, depending on how symbols are exported.&nbsp;
The first way is to run <b>cppfilt</b> on all objects to produce a list
of all public symbols, and output that to a .def file (from which the import
library and export file are created, the latter of which is used to produce
the DLL).&nbsp; The other is to rely on the user to provide the .def file
(or mark their code with the _Export keyword appropriately).&nbsp; To autogenerate
the .def file with <b>cppfilt</b>, the user need only put an export file
(with the same name as the DLL) in the LIBS variable for Windows NT/95.&nbsp;
For OS/2, the .def file should be added to LIBS (again, using the same
name as the DLL).&nbsp; For an example, see the lib/makefile in the bbexample.
<h3>
<a NAME="ShlibNotes_visual"></a><a href="#ToC_ShlibNotes_visual">visual
(Windows NT/95)</a></h3>
There is no .def file autogeneration for MS Visual C++ provided in the
rules.&nbsp; So the user must either provide a .def file or insure the
code is decorated with the appropriate exporting keywords.&nbsp; As with
Visual Age, the linking is done with the linker (<b>link</b>) rather than
the compiler (<b>cl</b>).&nbsp; To use the compiler for linking, see the
lib/makefile of the bbexample for an example of the variables that must
be modified.
<br>
<hr width="100%">
<h1>
<a NAME="ExportingRules"></a><a href="#ToC_ExportingRules">Exporting rules</a></h1>
In some builds it may be desirable to export header files and libraries
to a common area for others to utilize.&nbsp; Exporting header files to
a common location enables your compiler search lines to be shorter and
puts your public header files in a known and public location.&nbsp; If
a build is already organized in such a way that header files are already
in a public and known location the exporting of header files can be bypassed.&nbsp;
The same holds true for libraries.
<br>&nbsp;
<table BORDER >
<caption><b><font size=+1>Variables that control exporting</font></b></caption>

<tr>
<th ALIGN=LEFT VALIGN=TOP>Variable</th>

<th ALIGN=LEFT VALIGN=TOP>Description</th>
</tr>

<tr>
<td>INCLUDES
<br>EXPINCS
<br>EXPINC_TARGETS</td>

<td>A list of targets or files to export during the EXPINC pass.&nbsp;
The user must prepend the string "expinc_" to each file/target in EXPINC_TARGETS
(but not to INCLUDES or EXPINCS).&nbsp; Use only filenames in these variables;
absolute and relative paths should not be used (if such a situation comes
up, simply specify the path to the file using the
<b>.PATH[.suffix]</b>
special target or the <b>VPATH</b> variable and put only the filename in
<b>INCLUDES</b>,
et al.).</td>
</tr>

<tr>
<td>EXPLIBS
<br>EXPLIB_TARGETS</td>

<td>A list of targets or files to export during the EXPLIB pass.&nbsp;
The user must prepend the string "export_" to each file/target in EXPLIB_TARGETS
(but not to EXPLIBS).&nbsp; Use only filenames in these variables; absolute
and relative paths should not be used (if such a situation comes up, simply
specify the path to the file using the <b>.PATH[.suffix]</b> special target
or the <b>VPATH</b> variable and put only the filename in
<b>EXPLIBS</b>,
et al.).</td>
</tr>

<tr>
<td>EXPSHLIBS</td>

<td>A list of targets or files to export during the EXPSHLIB pass.&nbsp;
NOTE: <a href="#ShlibVariables">SHLIB_DURING_EXPSHLIB</a> must be defined
for this variable to take effect.</td>
</tr>

<tr>
<td>EXPPGMS</td>

<td>A list of targets or files to export during the STANDARD pass.&nbsp;
NOTE: STDPASS_DURING_EXPORT must be defined for this variable to fully
take effect.</td>
</tr>

<tr>
<td>EXPDIR
<br>EXPINCDIR
<br>EXPLIBDIR
<br>EXPPGMDIR</td>

<td>The subdirectories below the export base directory where the headers
and libraries will be exported.&nbsp; EXPDIR is used to export both headers
and libraries to the same directories, whereas EXPINCDIR and EXPLIBDIR
and EXPPGMDIR are used to export each type to different directories (EXPLIBDIR
is also used for EXPSHLIBS).&nbsp; Subdirectory specifications must have
both leading and trailing forward slashes.&nbsp; If automatic generation
of EXPTOP/EXPINCTOP/EXPLIBTOP/EXPPGMTOP is desired, they should also not
contain any parent directory specifications ("<tt>..</tt>").&nbsp; If the
user forgets to set any of these variables, "/MISSING_EXPDIR/" will be
used instead. These variables may contain multiple directories separated
by whitespace characters.</td>
</tr>

<tr>
<td>EXPTOP
<br>EXPINCTOP
<br>EXPLIBTOP
<br>EXPPGMTOP</td>

<td><i>NOTE: It is normally not necessary to set these variables explicitly,
since they are automatically generated by the rules (if they are not yet
set) if EXPDIR/EXPINCDIR/EXPLIBDIR/EXPPGMDIR are set properly.</i>&nbsp;
The relative path from the EXPDIR/EXPINCDIR/EXPLIBDIR/EXPPGMDIR subdirectory
to the base export directory.&nbsp; Effectively, this is a path consisting
of the same number of ".." (parent directory) components as there are directory
components in the associated EXPDIR/EXPINCDIR/EXPLIBDIR/EXPPGMDIR variable.&nbsp;
Subdirectory specifications must have a trailing forward slash.&nbsp; These
variables are not used on Windows and OS/2 platforms, nor are they used
if EXPORT_USING_TAR, EXPORT_USING_COPY, or EXPLINK_ABSPATH are defined.</td>
</tr>

<tr>
<td>EXPINC_SUBDIRS</td>

<td>The list of subdirectories to traverse to export header files.</td>
</tr>

<tr>
<td>EXPLIB_SUBDIRS</td>

<td>The list of subdirectories to traverse to export libraries.</td>
</tr>

<tr>
<td>EXPSHLIB_SUBDIRS</td>

<td>The list of subdirectories to traverse to export shared libraries.&nbsp;
NOTE: <a href="#ShlibVariables">SHLIB_DURING_EXPSHLIB</a> must be defined
for this variable to take effect.</td>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>EXPORT_USING_COPY</td>

<td ALIGN=LEFT VALIGN=TOP>If defined, headers and libraries will be copied
to the export directory using the CP command (instead of using symbolic
links).&nbsp; This variable has no effect on Windows and OS/2 platforms.&nbsp;
If EXPORT_USING_TAR is also set, EXPORT_USING_COPY will be used instead.</td>
</tr>

<tr>
<td>EXPORT_USING_TAR</td>

<td>If defined, headers and libraries will be copied to the export directory
using the TAR command (instead of using symbolic links).&nbsp; This variable
has no effect on Windows and OS/2 platforms.&nbsp; If EXPORT_USING_COPY
is also set, EXPORT_USING_COPY will be used instead.</td>
</tr>

<tr>
<td>C_TARFLAGS</td>

<td>Flags used during tar file creation when EXPORT_USING_TAR is defined.&nbsp;
Default value is "-cf".</td>
</tr>

<tr>
<td>X_TARFLAGS</td>

<td>Flags used during tar file extraction when EXPORT_USING_TAR is defined.&nbsp;
Default value is "-xf".</td>
</tr>

<tr>
<td>CHMOD_ON_EXPORT</td>

<td>If defined, the <b>chmod</b> command will be run on the exported file(s).&nbsp;
See also <b>EMODE</b>.</td>
</tr>

<tr>
<td>CHOWN_ON_EXPORT</td>

<td>If defined, the <b>chown</b> command will be run on the exported file(s).&nbsp;
See also <b>EOWNER</b> and <b>EGROUP</b>.</td>
</tr>

<tr>
<td>EMODE</td>

<td>The permissions to be set on files exported with the EXPORT_USING_TAR
and EXPORT_USING_COPY methods. This is effectively the first argument to
the <b>chmod</b> command. Default value is 644.</td>
</tr>

<tr>
<td>EOWNER</td>

<td>The user ownership to be set on files exported with the EXPORT_USING_TAR
and EXPORT_USING_COPY methods.&nbsp; This is effectively the first argument
to the <b>chown</b> command, on the left side of the colon (e.g., jdoe
in "jdoe:users"). Default value is ${OWNER}, which defaults to ${USER},
or "root" if that is undefined.</td>
</tr>

<tr>
<td>EGROUP</td>

<td>The group ownership to be set on files exported with the EXPORT_USING_TAR
and EXPORT_USING_COPY methods.&nbsp; This is effectively the first argument
to the <b>chown</b> command, on the right side of the colon (e.g., users
in "jdoe:users").&nbsp; Default value is ${GROUP}, or "staff" if that is
undefined.</td>
</tr>

<tr>
<td>EXPLINK_ABSPATH</td>

<td>When exporting using symbolic links, use the absolute path to the target
file rather than the relative path.&nbsp; This can be used if the file
being exported is not where the rules expect it (see below), or if absolute
paths are simply preferred.</td>
</tr>

<tr>
<td>EXPORTDIR</td>

<td>Normally set in the <b>Buildconf</b> file, this variable gives the
path to the top of the export tree (normally context-specific) from the
base src directory.&nbsp; The default value is "<tt>../export/${CONTEXT}</tt>".</td>
</tr>

<tr>
<td>EXPORTDIRTOP</td>

<td>The relative path from EXPORTDIR to the export tree base (normally
SANDBOXBASE/export), which should include a trailing directory separator.&nbsp;
For the default value of EXPORTDIR, this would be "<tt>../</tt>", the default
value.&nbsp; The default value is calculated based on the number of directory
components in EXPORTDIR, and therefore rarely needs to be overridden.</td>
</tr>

<tr>
<td>OBJECTDIRTOP</td>

<td>The relative path from OBJECTDIR to the object tree base (normally
SANDBOXBASE/obj), which should include a trailing directory separator.&nbsp;
For the typical value of OBJECTDIR ("<tt>../obj/${CONTEXT}</tt>"), this
would be "<tt>../</tt>".&nbsp; The default value is calculated based on
the number of directory components in OBJECTDIR, and therefore rarely needs
to be overridden.</td>
</tr>

<tr>
<td>EXPORTBASE</td>

<td>The relative path from where <b>mk</b> is running (normally from within
the obj tree) to the top of the export tree (i.e., EXPORTDIR).&nbsp; See
rules_mk/std.mk for the default value (it is composed of MAKETOP, OBJECTDIRTOP,
and EXPORTDIR).</td>
</tr>

<tr>
<td>RELATIVE_EXPLIB_TARGET</td>

<td>The relative path to each exported library from within EXPLIBDIR.&nbsp;
See rules_mk/std.mk for the default value; it is calculated automatically,
so therefore rarely needs to be overridden (see also USE_OLD_RELEXP_METHOD).&nbsp;
Target-specific versions of this variable may be used.&nbsp; NOTE: this
variable affects both the EXPLIB and EXPSHLIB passes.</td>
</tr>

<tr>
<td>RELATIVE_EXPINC_TARGET</td>

<td>The relative path to each exported header from within EXPINCDIR.&nbsp;
See rules_mk/std.mk for the default value; it is calculated automatically,
so therefore rarely needs to be overridden (see also USE_OLD_RELEXP_METHOD).&nbsp;
Target-specific versions of this variable may be used.</td>
</tr>

<tr>
<td>RELATIVE_EXPPGM_TARGET</td>

<td>The relative path to each exported program from within EXPPGMDIR.&nbsp;
See rules_mk/std.mk for the default value; it is calculated automatically,
so therefore rarely needs to be overridden (see also USE_OLD_RELEXP_METHOD).&nbsp;
Target-specific versions of this variable may be used.</td>
</tr>

<tr>
<td>USE_OLD_RELEXP_METHOD</td>

<td>If this variable is defined, the default values of RELATIVE_EXPLIB_TARGET
and RELATIVE_EXPINC_TARGET will be set the "old" way, which was to assume
the files existed in either the obj or src trees, respectively.</td>
</tr>

<tr>
<td>BACKED_SANDBOXDIR</td>

<td>Path separator delimited list of paths to the sandboxes in the backing
chain. Set internally by the ODE tools and not meant to be overridden by
the user.</td>
</tr>

<tr>
<td>QUOTE_EXPORT_FILES</td>

<td>If defined, filenames used in commands associated with the exporting
rules target(s) will be surrounded by the value of <b>EXP_QUOTE</b>.&nbsp;
This allows files with shell metacharacters to be exported without allowing
the shell to interpret the characters (for example, the dollar signs in
Java internal class filenames).&nbsp; By default, this variable is not
defined.</td>
</tr>

<tr>
<td>EXP_QUOTE</td>

<td>The quote character used when <b>QUOTE_EXPORT_FILES</b> is defined.&nbsp;
The default value is the contents of <b>FILE_QUOTE</b>, which is a single
quote (') by default.</td>
</tr>

<tr>
<td>STDPASS_DURING_EXPORT</td>

<td>Normally, nothing is exported during the STANDARD pass.&nbsp; If you
wish to export programs, define this variable so that two things will happen:
(1) files listed in EXPPGMS will get exported properly during STANDARD,
and (2) so that the proper files will be exported (and directories traversed)
if the export_all target is invoked.</td>
</tr>
</table>

<p>On UNIX, files are exported as symbolic links by default.&nbsp; The
symbolic links are generated as relative paths to the original file, not
absolute paths (unless the original file exists outside of the sandbox
environment, e.g. /usr/include/stdio.h).&nbsp; This is done both to minimize
needless file duplication and to improve reusability when retargeting sandboxes.&nbsp;
However, in order to avoid problems with symbolic links to nonexistent
files, one should always completely build the backing build or any shared
sandboxes to resolve these links.&nbsp; Users that experience difficulties
with symbolic link exporting should use the EXPORT_USING_TAR or EXPORT_USING_COPY
variables instead.&nbsp; Consider also the EXPLINK_ABSPATH variable, which
links using the full (absolute) path to the target.
<p>An example of a local makefile to utilize the exporting rules:
<p>&nbsp;<font face="Courier New, Courier, mono"> # Export progdefs.h to
<i>sandbox_base</i>/export/<i>machine</i>/usr/inc</font>
<br><font face="Courier New, Courier, mono">&nbsp; #&nbsp;&nbsp;&nbsp;
and my_lib.lib to <i>sandbox_base</i>/export/<i>machine</i>/usr/lib</font>
<br><font face="Courier New, Courier, mono">&nbsp; EXPINCS&nbsp;&nbsp;
= progdefs.h</font>
<br><font face="Courier New, Courier, mono">&nbsp; EXPLIBS&nbsp;&nbsp;
= ${LIB_PREF}my_lib${LIB_SUFF}</font>
<p><font face="Courier New, Courier, mono">&nbsp; # Now set the subdirectory
where we'll export the files.</font>
<br><font face="Courier New, Courier, mono">&nbsp; # Note the leading and
trailing slashes on the following two variables:</font>
<br><font face="Courier New, Courier, mono">&nbsp; EXPINCDIR = /usr/inc/</font>
<br><font face="Courier New, Courier, mono">&nbsp; EXPLIBDIR = /usr/lib/</font>
<p><font face="Courier New, Courier, mono">&nbsp; .include &lt;${RULES_MK}>&nbsp;</font>
<hr width="100%">
<h1>
<a NAME="SetupRules"></a><a href="#ToC_SetupRules">Setup rules</a></h1>
In some builds it may be desirable to copy miscellaneous tools to a common
area before the actual building begins, e.g. programs that all developers
use (perhaps from outside the sandbox area) into the tools tree of the
sandbox.&nbsp; Executing the <b>setup_all</b> target will achieve this.
<br>&nbsp;
<table BORDER >
<caption><b><font size=+1>Variables that control setup actions</font></b></caption>

<tr>
<th ALIGN=LEFT VALIGN=TOP>Variable</th>

<th ALIGN=LEFT VALIGN=TOP>Description</th>
</tr>

<tr>
<td>SETUP_SCRIPTS
<br>SETUP_PROGRAMS
<br>SETUP_FILES</td>

<td>A list of files to install during the SETUP pass.&nbsp; File specifications
can include either absolute or relative paths; absolute paths are not relative
to the sandbox base, so it is possible to reference files outside of the
sandbox environment.&nbsp; The user should <i>not</i> prepend the string
"setup_" to each file/target; it is done automatically.&nbsp; Each of these
variables function identically; the different names are only to clarify
the intent to the person maintaining the makefiles.</td>
</tr>

<tr>
<td>SETUPBASE</td>

<td>The absolute path which represents the base directory under which SETUPDIR
will reference, the target directory for copied files.&nbsp; The default
value is the context-specific tools subdirectory (SANDBOXBASE/tools/CONTEXT).</td>
</tr>

<tr>
<td>SETUPDIR</td>

<td>The subdirectory below the SETUPBASE directory where the files will
be copied.&nbsp; <a href="#TargSpecVar">Target-specific versions</a> of
the variable may be used.&nbsp; Subdirectory specifications must have both
leading and trailing forward slashes.&nbsp; If the user forgets to set
this variable, "/MISSING_SETUPDIR/" will be used instead.</td>
</tr>

<tr>
<td>SETUP_SUBDIRS</td>

<td>The list of subdirectories to traverse during the SETUP pass.</td>
</tr>

<tr>
<td>QUOTE_SETUP_FILES</td>

<td>If defined, filenames used in commands associated with the setup_all
target(s) will be surrounded by the value of <b>SETUP_QUOTE</b>.&nbsp;
This allows files with shell metacharacters to be copied without allowing
the shell to interpret the characters (for example, the dollar signs in
Java internal class filenames).&nbsp; By default, this variable is not
defined.</td>
</tr>

<tr>
<td>SETUP_QUOTE</td>

<td>The quote character used when <b>QUOTE_SETUP_FILES</b> is defined.&nbsp;
The default value is the contents of <b>FILE_QUOTE</b>, which is a single
quote (') by default.</td>
</tr>
</table>

<p>An example of a local makefile to utilize the setup rules follows.&nbsp;
Note the fact that we change SETUPBASE in order to be able to copy files
to anywhere in the sandbox.
<p><font face="Courier New, Courier, mono"># Export prog.ksh to <i>sandbox_base</i>/tools/<i>machine</i>/mybin</font>
<br><font face="Courier New, Courier, mono">#&nbsp;&nbsp;&nbsp; and /bin/ls&nbsp;
to
<i>sandbox_base</i>/tools/<i>machine</i>/localbin</font>
<br><font face="Courier New, Courier, mono">#&nbsp;&nbsp;&nbsp; and all
of the .txt files to <i>sandbox_base</i>/src/doc/txts</font>
<br><font face="Courier New, Courier, mono">&nbsp; SETUP_SCRIPTS&nbsp;
= prog.ksh</font>
<br><font face="Courier New, Courier, mono">&nbsp; SETUP_PROGRAMS = /bin/ls</font>
<br><font face="Courier New, Courier, mono">&nbsp; SETUP_FILES = foo1.txt
foo2.txt foo3.txt</font>
<p><font face="Courier New, Courier, mono">&nbsp; SETUPBASE = ${SANDBOXBASE}</font>
<p><font face="Courier New, Courier, mono">&nbsp; prog.ksh_SETUPDIR = /tools/${CONTEXT}/mybin/</font>
<br><font face="Courier New, Courier, mono">&nbsp; /bin/ls_SETUPDIR = /tools/${CONTEXT}/localbin/</font>
<br><font face="Courier New, Courier, mono">&nbsp; SETUPDIR = /src/doc/txts/</font>
<p><font face="Courier New, Courier, mono">&nbsp; .include &lt;${RULES_MK}>&nbsp;</font>
<hr width="100%">
<h1>
<a NAME="InstallRules"></a><a href="#ToC_InstallRules">Install rules</a></h1>
The <b>install_all </b>and<b> instdep_all</b>&nbsp; targets, both of which
copy shippable objects into a location from which they can be used as input
into the <a href="ODEPackagingReference.htm">packaging</a> tools (<b>instdep_all</b>
copies conditionally based on the timestamps of the files being installed),
derives its information from the following makefile variables.
<table BORDER >
<tr>
<th ALIGN=LEFT VALIGN=TOP>Variable</th>

<th ALIGN=LEFT VALIGN=TOP>Description</th>
</tr>

<tr>
<td><b>ILIST</b></td>

<td>A list of executable or data files to install. Use only filenames in
this variable; absolute and relative paths should not be used (if such
a situation comes up, simply specify the path to the file using the <b>.PATH[.suffix]</b>
special target or the <b>VPATH</b> variable and put only the filename in
<b>ILIST</b>).</td>
</tr>

<tr>
<td><b>IDIR</b></td>

<td>The directory (under <b>TOSTAGE</b>) in which to install the executable
or data files. Leading and trailing slashes must be used.&nbsp; If the
user forgets to set this variable, <b>/MISSING_IDIR/</b> will be used instead.
IDIR may contain multiple directories separated by whitespace characters.</td>
</tr>

<tr>
<td><b>IDIR_PREF</b></td>

<td>This prefered prefix for the installation root directory. The default
values are: for HP-UX, Solaris, and IRIX it is <b><tt>/opt</tt></b>, for
AIX and Linux it is <b><tt>/usr</tt></b>, for all other platforms it is
<b><tt>/usr/lpp</tt></b>.</td>
</tr>

<tr>
<td><b>IMODE</b></td>

<td>The permissions to be set on installed executable files.&nbsp; The
default value is <b>755</b>.</td>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP><b>IGROUP&nbsp;</b>
<br><b>GROUP</b></td>

<td ALIGN=LEFT VALIGN=TOP>The group to be set for installed files. The
default value is <b>staff</b>. These variables are not used on Windows
or OS/2.&nbsp; <b>IGROUP</b> takes precedence over <b>GROUP</b>, but otherwise
the two are identical.</td>
</tr>

<tr>
<td><b>IOWNER</b></td>

<td>The owner to be set for installed executable files. Default value is
the contents of <b>${USER} </b>(typically set by the operating system).
This variable is not used on Windows or OS/2.</td>
</tr>

<tr>
<td><b>TOSTAGE</b></td>

<td>The base directory in which all built executable programs are installed.
The default value is&nbsp; <b>${SANDBOXBASE}/inst.images/${CONTEXT}/shipdata</b>.</td>
</tr>

<tr>
<td><b>NO_CHOWN</b></td>

<td>If defined then the <b>chown</b> command is not run after the installed
file is copied</td>
</tr>

<tr>
<td><b>NO_CHMOD</b></td>

<td>If defined then the <b>chmod</b> command is not run after the installed
file is copied</td>
</tr>

<tr>
<td><b>INSTALL_USING_CRLFCON</b></td>

<td>If defined then <b>crlfcon</b> tool will be used instead of the default
copy command.</td>
</tr>

<tr>
<td><b>QUOTE_INSTALL_FILES</b></td>

<td>If defined, filenames used in commands associated with the install_all
target(s) will be surrounded by the value of <b>INST_QUOTE</b>.&nbsp; This
allows files with shell metacharacters to be installed without allowing
the shell to interpret the characters (for example, the dollar signs in
Java internal class filenames).&nbsp; By default, this variable is not
defined.</td>
</tr>

<tr>
<td><b>INST_QUOTE</b></td>

<td>The quote character used when <b>QUOTE_INSTALL_FILES</b> is defined.&nbsp;
The default value is the contents of <b>FILE_QUOTE</b>, which is a single
quote (') by default.</td>
</tr>

<tr>
<td><b>INSTALL_USING_DEPS</b></td>

<td>When defined and <b>install_all</b> is the action, the behavior mimics
<b>instdep_all</b>.&nbsp;
That is, files are conditionally installed based on timestamp information.</td>
</tr>

<tr>
<td><b>INSTALL_PRELINKER_FILES</b></td>

<td>When defined on MVS/USS, all targets given in <b>ILIST</b> will automatically
be duplicated in that variable with <b>PRE_SUFF</b> (<b>.p</b>) suffixes.&nbsp;
This provides a way to automatically have prelinker files installed without
listing them explicitly.</td>
</tr>
</table>

<h2>
<a NAME="UsingMakefiletoInstall"></a><a href="#ToC_UsingMakefiletoInstall">Using
the makefile to specify installation of a new target</a></h2>
When the <b>install_all</b> or <b>instdep_all</b> targets are built, the
common makefiles copy any files listed in the <b>ILIST</b> variable into
the directory specified by the <b>TOSTAGE</b> and<i> </i><b>IDIR</b> variables.
<p>As an example, assume you have a makefile with three executable targets
you are building; <b>yes[.exe]</b>,
<b>no[.exe]</b>, and <b>maybe[.exe]</b>.&nbsp;
The following makefile would build all programs and install each program
into the directory <b><tt>${TOSTAGE}/bin</tt></b>.
<dl>
<dl><tt>PROGRAMS = yes${PROG_SUFF} no${PROG_SUFF} maybe${PROG_SUFF}</tt>
<br><tt>ILIST = ${PROGRAMS}</tt>
<br><tt>IDIR = /bin/</tt>
<br><tt>.include &lt;${RULES_MK}></tt></dl>
</dl>
To specify only to install the programs <b>yes[.exe]
</b>and<b> no[.exe]
</b>(excluding
<b>maybe[.exe]</b>),
change the <b>ILIST</b> line to:
<dl>
<dl><tt>ILIST = yes${PROG_SUFF} no${PROG_SUFF}</tt></dl>
</dl>
To specify to the install target to install all the programs in the directory
<b><tt>${TOSTAGE}/lib</tt></b>
(as opposed to<tt> <b>${TOSTAGE}/bin</b>)</tt>, change the <b>IDIR</b>
line to:
<dl>
<dl><tt>IDIR = /lib/</tt></dl>
</dl>

<p><br>
<hr width="100%">
<h1>
<a NAME="NLSRules"></a><a href="#ToC_NLSRules">NLS rules</a></h1>
National Language Support (NLS) describes a product that has been designed
and built to work with different national languages, cultural differences,
etc.&nbsp; These rules provide a mechanism for building applications that
have separated Machine Readable Information (MRI) from the executable code.&nbsp;
Examples of language/cultural separation are menus, icons, help, labels,
error messages, etc.&nbsp; These rules provide a mechanism for stored language/cultural
specific source files in a separate location and building language/cultural
specific files into appropriate directories.&nbsp; ODE NLS support will
allow for sharing of non-language/cultural specific files, like object
files, in a common platform dependent location as the default.
<p>Some variables used for NLS rules (see other sections for more detailed
NLS variables):
<table BORDER WIDTH="100%" >
<tr>
<td><b>Variable</b></td>

<td><b>Description</b></td>
</tr>

<tr>
<td>NLV</td>

<td>Set to the National Language Version (NLV) to be built.&nbsp; For example,
NLV=en_US or NLV=en_US-8859-1</td>
</tr>

<tr>
<td>ODEMRINAME</td>

<td>Root directory of the MRI (default value is 'src' ).</td>
</tr>

<tr>
<td>_NLV_GENINC_</td>

<td>Include search path (like _GENINC_ but doesn't include it) that specifies
the NLV only search path.&nbsp; This variable is set by the rules.</td>
</tr>

<tr>
<td>_NLV_SEARCHPATH_</td>

<td>The search order to find NLV files. This variable is set by the rules.</td>
</tr>

<tr>
<td>&lt;nlv>_ALT</td>

<td>The alternative NLV for the current NLV.&nbsp; This allows for alternative
files to be used when the current is not available.&nbsp; So if you wanted
the alternative language for France-French to be US-English you would set:
fr_FA_ALT = en_US</td>
</tr>
</table>

<p>Note: Only one NLV can be built at a time.&nbsp; This restriction exists
since there may be problems with file search paths that would cause ODE
to unintentionally find a different language file than what is expected.&nbsp;
An example of how to build both US-English and France-French would be:
<pre>&nbsp;&nbsp; build NLV=en_US
&nbsp;&nbsp; build NLV=fr_FA</pre>

<h2>
<a NAME="NLSOrganization"></a><a href="#ToC_NLSOrganization">Organization</a></h2>
The organization of the backing build is structured as such:
<p><font face="Courier New, Courier, mono">backingbuild</font>
<br><font face="Courier New, Courier, mono">&nbsp;&nbsp; +- src</font>
<br><font face="Courier New, Courier, mono">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- &lt;dir1></font>
<br><font face="Courier New, Courier, mono">&nbsp;&nbsp; +- ${ODEMRINAME}</font>
<br><font face="Courier New, Courier, mono">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- &lt;nlv1></font>
<br><font face="Courier New, Courier, mono">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- &lt;dir1></font>
<br><font face="Courier New, Courier, mono">&nbsp;&nbsp; +- obj</font>
<br><font face="Courier New, Courier, mono">&nbsp;&nbsp;&nbsp;&nbsp; +-
&lt;platform 1></font>
<br><font face="Courier New, Courier, mono">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- &lt;dir1></font>
<br><font face="Courier New, Courier, mono">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- &lt;nlv1></font>
<br><font face="Courier New, Courier, mono">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+- &lt;dir1></font>
<br><font face="Courier New, Courier, mono">&nbsp;&nbsp; +- &lt;all other
ODE directories></font>
<p>Here <tt>backingbuild</tt> is the backing build name with 3 subdirectories.&nbsp;
The <b>NLV</b> directories are subdirectories to the <b>ODEMRINAME
</b>directory.&nbsp;
The subdirectories of the <b>NLV</b> directories match the subdirectories
of the<b> <tt>src</tt> </b>directory.&nbsp;&nbsp; For example, if there
is the <b>src </b>subdirectory <tt>bin/sbls </tt>then for each <b>NLV </b>there
would be corresponding <tt>${ODEMRINAME}/${NLV}/bin/sbls </tt>subdirectories
if needed.
<h2>
<a NAME="NLSPrograms"></a><a href="#ToC_NLSPrograms">Programs and shared
libraries</a></h2>
The NLS extension of non-NLS programs and shared libraries simply provides
a mechanism for placing the language dependent programs and shared libraries
in a language specific directory.
<p>This table shows some of the NLS variables used for programs and shared
libraries:
<table BORDER WIDTH="100%" >
<tr>
<td><b>Variable</b></td>

<td><b>Description</b></td>
</tr>

<tr>
<td>NLV_PROGRAMS</td>

<td>The same as PROGRAMS except it is genereated in the directory .../obj/&lt;plat>/&lt;nlv>/&lt;dir>/...&nbsp;</td>
</tr>

<tr>
<td>NLV_SHARED_LIBRARIES</td>

<td>The same as SHARED_LIBRARIES except it is genereated in the directory
.../obj/&lt;plat>/&lt;nlv>/&lt;dir>/...&nbsp;</td>
</tr>

<tr>
<td>_NLV_PROGRAMS_</td>

<td>The NLV_PROGRAMS with the relative path added to the program name.
This is set by the rules.</td>
</tr>

<tr>
<td>_NLV_SHARED_LIBRARIES_</td>

<td>The NLV_SHARED_LIBRARIES with the relative path added to the program
name. This is set by the rules.</td>
</tr>
</table>

<p>An example of a local makefile to utilize the NLS programs rules:
<p><font face="Courier New, Courier, mono"># Need to set NLV=&lt;lang>
in order to build NLV_PROGRAMS</font>
<br><font face="Courier New, Courier, mono">&nbsp; NLV_PROGRAMS = server${PROG_SUFF}</font>
<p><font face="Courier New, Courier, mono"># The object files that make
up the server program</font>
<br><font face="Courier New, Courier, mono">&nbsp; OFILES = server${OBJ_SUFF}
main${OBJ_SUFF}</font>
<p><font face="Courier New, Courier, mono">&nbsp; # A dummy target to run
the program.&nbsp; Notice that we used the _NLV_PROGRAMS_ variable</font>
<br><font face="Courier New, Courier, mono">&nbsp; # that was set internally
by the rules.</font>
<br><font face="Courier New, Courier, mono">&nbsp; runmyprog: .SPECTARG</font>
<br><font face="Courier New, Courier, mono">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
${_NLV_PROGRAMS_}</font>
<p><font face="Courier New, Courier, mono">&nbsp; .include &lt;${RULES_MK}></font>
<h2>
<a NAME="NLSJavaProperties"></a><a href="#ToC_NLSJavaProperties">Java properties</a></h2>
The Java Properties feature, also known as resource bundles, can contain
language/cultural dependent information for Java applications/applets.
Property source files typically need to have a utility called native2ascii
run on them so they can be properly read on the target platform.&nbsp;
The property files by default are generated in the same directory where
the class files are generated by <b>javac</b>.
<p>This table shows the variables used to control the properties utility:
<table BORDER >
<tr>
<td><b>Variable</b></td>

<td><b>Description</b></td>
</tr>

<tr>
<td>N2A</td>

<td>The native to ascii utility name.&nbsp; Default value is <b>native2ascii</b>.</td>
</tr>

<tr>
<td>N2A_DEFAULTS</td>

<td>N2A default flags.&nbsp; Default value is <b>-encoding ${N2ACODEPAGE}</b></td>
</tr>

<tr>
<td>N2ACENV</td>

<td>Set as an environment variable</td>
</tr>

<tr>
<td>N2AFLAGS</td>

<td>Set from the local makefile</td>
</tr>

<tr>
<td>N2AARGS</td>

<td>Set from <b>build/mk</b> command line</td>
</tr>
</table>

<p>This table shows the variables used to control input and output files:
<table BORDER WIDTH="100%" >
<tr>
<td><b>Variable</b></td>

<td><b>Description</b></td>
</tr>

<tr>
<td>PROPERTIES</td>

<td>List of Java properties files which the <b>N2A</b> utility will generate.</td>
</tr>

<tr>
<td>&lt;NLV>_N2ACODEPAGE</td>

<td>The codepage to use with the <b>N2A</b> utility.&nbsp; Default is <b>Cp1252</b>.&nbsp;
See below table for other defaults.</td>
</tr>

<tr>
<td>PROP_SUFF</td>

<td>The target (output) file suffix.&nbsp; Default value is <b>.properties</b>.</td>
</tr>

<tr>
<td>PROPSRC_SUFF</td>

<td>The source (input) file suffix.&nbsp; Default value is <b>.prop</b>.&nbsp;
Ignored if <b>PROPERTIES_SAMESUFF</b> is used.</td>
</tr>

<tr>
<td>PROPERTIES_SAMESUFF</td>

<td>When this variable is defined, each of the output files will be created
from an input file of the same name (and therefore with the same suffix).&nbsp;
In this case, the <b>PROPERTIES_SUBDIR</b> must not refer to any directory
in the default search path (e.g., anywhere under the export tree should
be fine, which is the default value of that variable).&nbsp; By default,
this variable is not defined.</td>
</tr>

<tr>
<td>PROPERTIES_SUBDIR</td>

<td>The subdirectory under the sandbox base directory to use for <b>N2A</b>'s
output file(s).&nbsp; No leading or trailing slash should be used.&nbsp;
The default value is <b><tt>export/classes/${JAVA_PACKAGE_NAME}</tt></b>
(with the periods in <b>JAVA_PACKAGE_NAME</b> converted to slashes).</td>
</tr>

<tr>
<td>PROPERTIESGENDIR</td>

<td>The full/absolute directory to use for <b>N2A</b>'s output file(s).&nbsp;
This normally does not need to be altered if the output files are intended
to go into the sandbox (use <b>PROPERTIES_SUBDIR</b>).&nbsp; The default
value is <b><tt>${SANDBOXBASE}/${PROPERTIES_SUBDIR}</tt></b>.</td>
</tr>

<tr>
<td>BUILDJAVA</td>

<td>This must be defined to use the properties rules, just as with all
of the other <a href="#JavaRules">Java rules</a>.</td>
</tr>
</table>

<p>This table contains valid codepages and some default values:
<table BORDER >
<tr>
<td><b>Variable</b></td>

<td><b>Codepage</b></td>
</tr>

<tr>
<td>default_N2ACODEPAGE</td>

<td>Cp1252</td>
</tr>

<tr>
<td>zh_CN_N2ACODEPAGE</td>

<td>Cp1281</td>
</tr>

<tr>
<td>zh_TW_N2ACODEPAGE</td>

<td>Cp950</td>
</tr>

<tr>
<td>ja_CP_N2ACODEPAGE</td>

<td>SJIS</td>
</tr>

<tr>
<td>ja_N2ACODEPAGE</td>

<td>SJIS</td>
</tr>

<tr>
<td>ko_N2ACODEPAGE</td>

<td>Cp949</td>
</tr>
</table>

<p>An example of a local makefile to utilize the Java properties rules:
<p><font face="Courier New, Courier, mono"># Java property files (resource
bundles) to create with native2ascii.</font>
<br><font face="Courier New, Courier, mono"># Remember to turn BUILDJAVA
on, since these are Java rules.</font>
<br><font face="Courier New, Courier, mono">&nbsp; BUILDJAVA =</font>
<br><font face="Courier New, Courier, mono">&nbsp; PROPERTIES = Hello_en_US${PROP_SUFF}
\</font>
<br><font face="Courier New, Courier, mono">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Hello_fr_FA${PROP_SUFF} \</font>
<br><font face="Courier New, Courier, mono">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Hello_ja_JP${PROP_SUFF} \</font>
<br><font face="Courier New, Courier, mono">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Hello${PROP_SUFF}</font>
<p><font face="Courier New, Courier, mono">&nbsp; .include &lt;${RULES_MK}></font>
<h2>
<a NAME="NLSHelps"></a><a href="#ToC_NLSHelps">Help files</a></h2>
Help files can be built as part of the build process with a help compiler.&nbsp;
Help files are common on the Windows operating systems.&nbsp; There is
an implied suffix transformation from .hpj to .hlp.
<p>This table shows some of the variables used for help files:
<table BORDER >
<tr>
<td><b>Variable</b></td>

<td><b>Description</b></td>
</tr>

<tr>
<td>HELPS</td>

<td>The names of .hlp files to be output of the help compiler</td>
</tr>

<tr>
<td>HELPS_SRCS</td>

<td>The files that HELPS depends on.&nbsp; (&lt;target name>.hpj is an
implied source)</td>
</tr>

<tr>
<td>NLV_HELPS</td>

<td>The same as HELPS except it is generated in the directory .../obj/&lt;plat>/&lt;nlv>/&lt;dir>/...&nbsp;</td>
</tr>

<tr>
<td>_NLV_HELPS_</td>

<td>The NLV_HELPS with the relative path added to the help file&nbsp; name.
This is set by the rules.</td>
</tr>

<tr>
<td>HLP_SUFF</td>

<td>The HELPS file suffix.&nbsp; Default is <b>.hlp</b>.</td>
</tr>

<tr>
<td>HPJ_SUFF</td>

<td>The HELPS_SRCS file suffix.&nbsp; Default is <b>.hpj</b>.</td>
</tr>

<tr>
<td>RTF_SUFF</td>

<td>The rich text format (RTF) file suffix.&nbsp; Default is <b>.rtf</b>.</td>
</tr>
</table>

<p>This table shows the variables used to control the help compiler:
<table BORDER >
<tr>
<td><b>Variable</b></td>

<td><b>Description</b></td>
</tr>

<tr>
<td>HC</td>

<td>The help compiler name.&nbsp; Default value is <b>hcrtf</b>.</td>
</tr>

<tr>
<td>HC_DEFAULTS</td>

<td>Help compiler default flags.&nbsp; Default value is <b>-x -xn</b>.</td>
</tr>

<tr>
<td>HCENV</td>

<td>Set as an environment variable</td>
</tr>

<tr>
<td>HCFLAGS</td>

<td>Set from the local makefile</td>
</tr>

<tr>
<td>HCARGS</td>

<td>Set from <b>build/mk</b> command line</td>
</tr>
</table>

<p>An example of a local makefile to utilize the help rules:
<p><font face="Courier New, Courier, mono"># Need to set NLV=&lt;lang>
in order to build NLV_PROGRAMS</font>
<p><font face="Courier New, Courier, mono"># HELPS_SRCS is not set since
we rely on the implied source langcontents.hpj</font>
<br><font face="Courier New, Courier, mono">NLV_HELPS = langcontents${HLP_SUFF}</font>
<p><font face="Courier New, Courier, mono"># Language independent help
targets&nbsp;&nbsp; # HELPS_SRCS is not set since we rely on the implied
source contents.hpj&nbsp;&nbsp; HELPS = contents${HLP_SUFF}</font>
<p><font face="Courier New, Courier, mono">.include &lt;${RULES_MK}></font>
<h2>
<a NAME="NLSIPFHelps"></a><a href="#ToC_NLSIPFHelps">IPF help files and
documents</a></h2>
In the Visual Age development system, help files and online documents also
can be built with the ipfc compiler.&nbsp; The source files have extension
.ipf and have a different format than <b>.hpj </b>files.&nbsp; There is
no implied suffix transformation from .ipf to .hlp or from .ipf to .inf.&nbsp;
The user must specify the appropriate variables to cause compilation.
<p>This table shows some of the variables used for compiling help files
from ipf files:
<table BORDER >
<tr>
<td><b>Variable</b></td>

<td><b>Description</b></td>
</tr>

<tr>
<td>IPFHELPS</td>

<td>The target names of help files to be output of the ipfc help compiler.
This variable is required.&nbsp;</td>
</tr>

<tr>
<td>IPFHELPS_SRCS</td>

<td>The files that IPFHELPS depends on, including any that are imbedded.&nbsp;
If this variable is not specified, the source is computed from the target
in IPFHELPS.</td>
</tr>

<tr>
<td>NLV_IPFHELPS</td>

<td>The same as IPFHELPS except it is generated in the directory .../obj/&lt;plat>/&lt;nlv>/&lt;dir>/...&nbsp;</td>
</tr>

<tr>
<td>_NLV_IPFHELPS_</td>

<td>The NLV_IPFHELPS with the relative path added to the help file&nbsp;
name. This is set by the rules.</td>
</tr>

<tr>
<td>HLP_SUFF</td>

<td>The IPFHELPS file suffix.&nbsp; Default is <b>.hlp</b>.</td>
</tr>

<tr>
<td>IPF_SUFF</td>

<td>The IPFHELPS_SRCS file suffix.&nbsp; Default is <b>.ipf</b>.</td>
</tr>
</table>

<p>This table shows the variables used to control ipfc when compiling help
files:
<table BORDER >
<tr>
<td><b>Variable</b></td>

<td><b>Description</b></td>
</tr>

<tr>
<td>IPFC</td>

<td>The help compiler name.&nbsp; Default value is <b>ipfc</b>.</td>
</tr>

<tr>
<td>IPFHELPS_DEFAULTS</td>

<td>Help compiler default flags.&nbsp; Default value is <b>/q /hlp</b>.</td>
</tr>

<tr>
<td>IPFHELPSENV</td>

<td>Set as an environment variable</td>
</tr>

<tr>
<td>IPFHELPSFLAGS</td>

<td>Set from the local makefile</td>
</tr>

<tr>
<td>IPFHELPSARGS</td>

<td>Set from <b>build/mk</b> command line</td>
</tr>
</table>

<p>This table shows some of the variables used for compiling inf documents
from ipf files:
<table BORDER >
<tr>
<td><b>Variable</b></td>

<td><b>Description</b></td>
</tr>

<tr>
<td>INFS</td>

<td>The target names of inf documents to be output of the ipfc compiler.&nbsp;
This variable is required.</td>
</tr>

<tr>
<td>INFS_SRCS</td>

<td>The files that INFS depends on, including any that are imbedded.&nbsp;
If this variable is not specified, the source is computed from the target.&nbsp;</td>
</tr>

<tr>
<td>NLV_INFS</td>

<td>The same as INFS except it is generated in the directory .../obj/&lt;plat>/&lt;nlv>/&lt;dir>/...&nbsp;</td>
</tr>

<tr>
<td>_NLV_INFS_</td>

<td>The NLV_INFS with the relative path added to the document name. This
is set by the rules.</td>
</tr>

<tr>
<td>INF_SUFF</td>

<td>The INFS file suffix.&nbsp; Default is <b>.inf</b>.</td>
</tr>

<tr>
<td>IPF_SUFF</td>

<td>The INFS_SRCS file suffix.&nbsp; Default is <b>.ipf</b>.</td>
</tr>
</table>

<p>This table shows the variables used to control ipfc when compiling inf
documents:
<table BORDER >
<tr>
<td><b>Variable</b></td>

<td><b>Description</b></td>
</tr>

<tr>
<td>IPFC</td>

<td>The help compiler name.&nbsp; Default value is <b>ipfc</b>.</td>
</tr>

<tr>
<td>INFS_DEFAULTS</td>

<td>Help compiler default flags.&nbsp; Default value is <b>/q /inf</b>.</td>
</tr>

<tr>
<td>INFSENV</td>

<td>Set as an environment variable</td>
</tr>

<tr>
<td>INFSFLAGS</td>

<td>Set from the local makefile</td>
</tr>

<tr>
<td>INFSARGS</td>

<td>Set from <b>build/mk</b> command line</td>
</tr>
</table>

<p>An example of a makefile to utilize the ipf help and document rules:
<p><font face="Courier New, Courier, mono"># compile the help file from
two files.&nbsp; main${IPF_SUFF} imbeds appendix${IPF_SUFF}</font>
<br><font face="Courier New, Courier, mono">&nbsp; IPFHELPS = main${HLP_SUFF}</font>
<br><font face="Courier New, Courier, mono">&nbsp; IPFHELPS_SRCS = main${IPF_SUFF}
appendix${IPF_SUFF}</font>
<p><font face="Courier New, Courier, mono">&nbsp; # compile the inf document
from the same sources</font>
<br><font face="Courier New, Courier, mono">&nbsp; INFS = main${INF_SUFF}</font>
<br><font face="Courier New, Courier, mono">&nbsp; INFS_SRCS = main${IPF_SUFF}
appendix${IPF_SUFF}</font>
<p><font face="Courier New, Courier, mono">&nbsp; .include &lt;${RULES_MK}></font>
<h2>
<a NAME="NLSMessages"></a><a href="#ToC_NLSMessages">Messages</a></h2>
This section addresses message files those that are compiled with the message
compiler.&nbsp; There is an implied suffix transformation from .mc to .h.
<p>This table shows some of the variables used for message files:
<table BORDER >
<tr>
<td><b>Variable</b></td>

<td><b>Description</b></td>
</tr>

<tr>
<td>MC_HDRS</td>

<td>The names of message files to be compiled to .h.</td>
</tr>

<tr>
<td>MC_HDRS_SRCS</td>

<td>The files that MC_HDRS depends on.&nbsp; Default value is <b>&lt;target
name without the suffix>.mc</b>.</td>
</tr>

<tr>
<td>MC_SUFF</td>

<td>The MC_HDRS_SRCS file suffix.&nbsp; Default is <b>.mc</b>.</td>
</tr>

<tr>
<td>HDR_SUFF</td>

<td>The MC_HDRS file suffix.&nbsp; Default is <b>.h</b>.</td>
</tr>
</table>

<p>This table shows the variables used to control the help compiler:
<table BORDER >
<tr>
<td><b>Variable</b></td>

<td><b>Description</b></td>
</tr>

<tr>
<td>MC</td>

<td>The message compiler name. Default value is <b>mc</b></td>
</tr>

<tr>
<td>MC_DEFAULTS</td>

<td>Message compiler default flags. Default value is <b>-r</b>.</td>
</tr>

<tr>
<td>MCENV</td>

<td>Set as an environment variable.</td>
</tr>

<tr>
<td>MCFLAGS</td>

<td>Set from the local makefile.</td>
</tr>

<tr>
<td>MCARGS</td>

<td>Set from <b>build/mk</b> command line.</td>
</tr>
</table>

<p>An example of a local makefile to utilize the message rules:
<p><font face="Courier New, Courier, mono"># C include header files generated
by MC</font>
<br><font face="Courier New, Courier, mono">&nbsp; MC_HDRS = msgs${HDR_SUFF}</font>
<p><font face="Courier New, Courier, mono"># Object files include the MC_HDRS
that is built</font>
<br><font face="Courier New, Courier, mono">&nbsp; PROGRAMS = server${PROG_SUFF}</font>
<br><font face="Courier New, Courier, mono">&nbsp; OFILES&nbsp;&nbsp; =
server${OBJ_SUFF} main${OBJ_SUFF}</font>
<p><font face="Courier New, Courier, mono">&nbsp; .include &lt;${RULES_MK}></font>
<h2>
<a NAME="NLSCatalogs"></a><a href="#ToC_NLSCatalogs">Catalogs</a></h2>
This section addresses catalog files that are generated with the gencat
utility.&nbsp; There is an implied suffix transformation from .mc to .h.
<p>This table shows some of the variables used for catalogs:
<table BORDER >
<tr>
<td><b>Variable</b></td>

<td><b>Description</b></td>
</tr>

<tr>
<td>MSG_HDRS</td>

<td>The names of message files to be compiled to .h using MKCATDEFS and
catalogs generated using GENCAT</td>
</tr>

<tr>
<td>MSG_HDRS_SRCS</td>

<td>The files that MSG_HDRS depends on.&nbsp; Default value is <b>&lt;target
name without the suffix>.msg</b>.</td>
</tr>

<tr>
<td>CATALOGS</td>

<td>The names of the catalog files to be generated using GENCAT that will
be located in .../obj/&lt;platform>/&lt;nlv>/&lt;dir>/...</td>
</tr>

<tr>
<td>CATALOGS_SRCS</td>

<td>The files that CATALOGS depends on.&nbsp; Default value is <b>&lt;target
name without the suffix>.msg</b>.</td>
</tr>

<tr>
<td>USE_MKCATDEFS</td>

<td>When updating the CATALOGS target, use MKCATDEFS instead of GENCAT</td>
</tr>

<tr>
<td>MSG_HDRS_TAIL</td>

<td>The extra trailing string the MKCATDEFS appends to the MSG_HDRS on
some platforms.&nbsp; For UNIX it is set to <b>_msg</b>, for non-UNIX it
is not defined.</td>
</tr>

<tr>
<td>MSG_SUFF</td>

<td>The message file suffix.&nbsp; Default value is <b>.msg</b>.</td>
</tr>

<tr>
<td>CAT_SUFF</td>

<td>The catalog file suffix.&nbsp; Default value is <b>.cat</b>.</td>
</tr>
</table>

<p>This table shows the variables used to control the gencat utility:
<table BORDER >
<tr>
<td><b>Variable</b></td>

<td><b>Description</b></td>
</tr>

<tr>
<td>GENCAT</td>

<td>The catalog generating utility name.&nbsp; Default value is <b>gencat</b>.</td>
</tr>

<tr>
<td>GENCATENV</td>

<td>Set as an environment variable</td>
</tr>

<tr>
<td>GENCATFLAGS</td>

<td>Set from the local makefile</td>
</tr>

<tr>
<td>GENCATARGS</td>

<td>Set from <b>build/mk</b> command line</td>
</tr>
</table>

<p>This table shows the variables used to control the mkcatdefs utility
<table BORDER >
<tr>
<td><b>Variable</b></td>

<td><b>Description</b></td>
</tr>

<tr>
<td>MKCATDEFS</td>

<td>The catalog generating utility name.&nbsp; Default value is <b>mkcatdefs</b>
on UNIX and <b>mkcatdef</b> on non-UNIX.</td>
</tr>

<tr>
<td>MKCATENV</td>

<td>Set as an environment variable</td>
</tr>

<tr>
<td>MKCATFLAGS</td>

<td>Set from the local makefile</td>
</tr>

<tr>
<td>MKCATARGS</td>

<td>Set from <b>build/mk</b> command line</td>
</tr>
</table>

<p>An example of a local makefile to utilize the catalog rules:
<p><font face="Courier New, Courier, mono"># Catalogs are indirectly created
from MSG_HDRS</font>
<br><font face="Courier New, Courier, mono">&nbsp; CATALOGS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
= hello${CAT_SUFF}</font>
<p><font face="Courier New, Courier, mono">&nbsp; # Use en_US as the default
language</font>
<br><font face="Courier New, Courier, mono">&nbsp; .if (${NLV} == "en_US")</font>
<br><font face="Courier New, Courier, mono">&nbsp; # C header files generated
from message files.</font>
<br><font face="Courier New, Courier, mono">&nbsp; #&nbsp;&nbsp; On AIX
it is hello_msg.h, on NT it is hello.h.&nbsp; Hence the MSG_HDRS_TAIL</font>
<br><font face="Courier New, Courier, mono">&nbsp; MSG_HDRS = helloinc${MSG_HDRS_TAIL}.h</font>
<p><font face="Courier New, Courier, mono">&nbsp; # Header files to export</font>
<br><font face="Courier New, Courier, mono">&nbsp; INCLUDES = ${MSG_HDRS}</font>
<p><font face="Courier New, Courier, mono">&nbsp; # Where to export the
header files</font>
<br><font face="Courier New, Courier, mono">&nbsp; EXPINCTOP = ../../</font>
<br><font face="Courier New, Courier, mono">&nbsp; EXPINCDIR = /usr/include/</font>
<p><font face="Courier New, Courier, mono">&nbsp; # Since MSG_HDRS are
generated in the obj directory, we need to copy the</font>
<br><font face="Courier New, Courier, mono">&nbsp; # header file to the
export directory</font>
<br><font face="Courier New, Courier, mono">&nbsp; EXPORT_USING_COPY =</font>
<p><font face="Courier New, Courier, mono">&nbsp; .else</font>
<br><font face="Courier New, Courier, mono">&nbsp; # Only for English we
need to generate the header file helloinc.h.&nbsp; For all</font>
<br><font face="Courier New, Courier, mono">&nbsp; # other NLVs we just
use CATALOGS and mkcatdefs</font>
<br><font face="Courier New, Courier, mono">&nbsp; CATALOGS&nbsp;&nbsp;&nbsp;&nbsp;
+= helloinc${CAT_SUFF}</font>
<p>&nbsp; <font face="Courier New, Courier, mono"># Need to use mkcatdefs
to process symbol definitions</font>
<br><font face="Courier New, Courier, mono">&nbsp; USE_MKCATDEFS =</font>
<p><font face="Courier New, Courier, mono">&nbsp; # Suppress generation
of header file</font>
<br><font face="Courier New, Courier, mono">&nbsp; MKCATFLAGS&nbsp;&nbsp;&nbsp;
= -h</font>
<p><font face="Courier New, Courier, mono">&nbsp; .endif # NLV == en_US</font>
<p><font face="Courier New, Courier, mono">.include &lt;${RULES_MK}></font>
<h2>
<a NAME="NLSCodePage"></a><a href="#ToC_NLSCodePage">Codepage conversions</a></h2>
This section deals with text files that codepage conversions occur during
a build process .
<p>This table shows some of the variables used for codepage conversion
files:
<table BORDER >
<tr>
<td><b>Variable</b></td>

<td><b>Description</b></td>
</tr>

<tr>
<td>CODEPAGE_TGTS</td>

<td>The names of files to be converted using ICONV</td>
</tr>

<tr>
<td>CODEPAGE_SRCS</td>

<td>The files that CODEPAGE_TGTS depends on.&nbsp; If not defined, it defaults
to the tail of CODEPAGE_TGTS with the added suffix of .iconv.&nbsp; Specifically,
the default is: ${.TARGET:T}${ICONV_SUFF}</td>
</tr>

<tr>
<td>CODEPAGE_FROM</td>

<td>The codepage of the CODEPAGE_SRCS</td>
</tr>

<tr>
<td>CODEPAGE_TO</td>

<td>The target codepage of CODEPAGE_TGTS</td>
</tr>

<tr>
<td>USE_CRLFCON</td>

<td>If defined, the tool <b>crlfcon</b> will be run on the source before
the codpage conversion occurs</td>
</tr>

<tr>
<td>ICONV_SUFF</td>

<td>The codepage source file suffix.&nbsp; Default value is <b>.iconv</b>.</td>
</tr>
</table>

<p>This table shows the variables used to control the iconv utility:
<table BORDER >
<tr>
<td><b>Variable</b></td>

<td><b>Description</b></td>
</tr>

<tr>
<td>ICONV</td>

<td>The codepage conversion utiltity name (default value is "iconv" )</td>
</tr>

<tr>
<td>ICONVENV</td>

<td>Set as an environment variable</td>
</tr>

<tr>
<td>ICONVFLAGS</td>

<td>Set from the local makefile</td>
</tr>

<tr>
<td>ICONVARGS</td>

<td>Set from <b>build/mk</b> command line</td>
</tr>
</table>

<p>An example of a local makefile to utilize the NLS codepage conversion
rules:
<p><font face="Courier New, Courier, mono"># Files to be run through a
codepage conversion program (iconv)</font>
<br><font face="Courier New, Courier, mono">&nbsp; CODEPAGE_TGTS&nbsp;
= README.TXT</font>
<p><font face="Courier New, Courier, mono"># The target codepage for README.TXT
is ISO8859-1</font>
<br><font face="Courier New, Courier, mono">&nbsp; CODEPAGE_TO = ISO8859-1</font>
<p><font face="Courier New, Courier, mono"># The source codepage is platform
dependent</font>
<br><font face="Courier New, Courier, mono">&nbsp; .ifdef WINNT</font>
<br><font face="Courier New, Courier, mono">&nbsp; CODEPAGE_FROM = CP850</font>
<br><font face="Courier New, Courier, mono">&nbsp; .else</font>
<br><font face="Courier New, Courier, mono">&nbsp; CODEPAGE_FROM = IBM-850</font>
<br><font face="Courier New, Courier, mono">&nbsp; .endif # defined(WINNT)</font>
<h2>
<a NAME="MsgbindVariables"></a><a href="#ToC_MsgbindVariables">Msgbind
variables</a></h2>
This table shows the variables used to control the <b>msgbind</b> utility
of the OS/2 Toolkit:
<table BORDER >
<tr>
<td><b>Variable</b></td>

<td><b>Description</b></td>
</tr>

<tr>
<td>USE_MSGBIND</td>

<td>If defined, a temporary input file is created as input to the ${MSGBIND}
program, after an executable is&nbsp; linked. Then the ${MSGBIND} program
binds selected messages to the executable. The contents of the input file
are determined from the executable name and the values of the BIND_FILES
and BIND_MESSAGES variables.</td>
</tr>

<tr>
<td>MSGBIND</td>

<td>By default this is set to the <b>msgbind</b> program in the OS/2 toolkit.</td>
</tr>

<tr>
<td>BIND_FILES</td>

<td>This variable contains paths to the message file(s) from which messages
will be bound to the executable. The paths should be relative to where
the executable is linked, or they should be absolute paths. The message
files are output of the <b>mkmsgf</b> program in the OS/2 toolkit, or the
message files may be supplied by the operating system or the OS/2 toolkit.</td>
</tr>

<tr>
<td>BIND_MESSAGES</td>

<td>This variable specifies selected message numbers, or an * designating
that all messages are to be bound to the executable. Variables of the form
<i>bindfile</i>_BIND_MESSAGES
may be used to select specific messages from a designated <i>bindfile</i>,
instead of the messages listed in BIND_MESSAGES.
<i>bindfile</i> must be
one of the values in the BIND_FILES variable.
<br>Example: prog.msg_BIND_MESSAGES=PRG0001 PRG0027</td>
</tr>
</table>

<p>
<hr width="100%">
<h1>
<a NAME="ResourceRules"></a><a href="#ToC_Resource Rules">Resource rules</a></h1>
On the Windows 95/98/NT and OS/2 platforms, "resources" can be used by
programs for menus, dialogs, icons, fonts, cursors, and other things.&nbsp;
It is one method of isolating National Language dependent parts of a program
as well.&nbsp; Typically C/C++ programs use the resources that have been
linked with it.&nbsp; Resources are compiled from source to a binary form
that is linked with the other object files that form a program.&nbsp; This
section describes variables that are used with the resource compiler to
compile <b><tt>*.rc</tt></b> files into the binary <b><tt>*.res</tt></b>
files that can be linked with executable programs.
<h2>
<a NAME="ResourceFileVariables"></a><b><a href="#ToC_ResourceFileVariables">Resource
file variables</a></b></h2>

<h3>
Default Variables for Resource Files</h3>
The following table lists the variables used to define suffixes.
<br>&nbsp;
<table BORDER >
<tr>
<td><b>Variable</b></td>

<td><b><tt>Description</tt></b></td>
</tr>

<tr>
<td>RES_SUFF</td>

<td>The compiled binary output file suffix.&nbsp; This defaults to <b><tt>.res</tt></b></td>
</tr>

<tr>
<td>RC_SUFF</td>

<td>The resource source file suffix.&nbsp; This defaults to <b><tt>.rc</tt></b></td>
</tr>

<tr>
<td>BMP_SUFF</td>

<td>Bitmap file suffix. Bitmaps can be specified in the resource source
file.&nbsp; This defaults to <b><tt>.bmp</tt></b></td>
</tr>

<tr>
<td>CUR_SUFF</td>

<td>Cursor/Pointer file suffix. Cursors can be specified in the resource
source file. On OS/2 this defaults to <b><tt>.ptr</tt></b>, otherwise it
defaults to <b><tt>.cur</tt></b></td>
</tr>

<tr>
<td>FNT_SUFF</td>

<td>Font file suffix. Fonts can be specified in the resource source file.&nbsp;
This defaults to <b><tt>.fnt</tt></b></td>
</tr>

<tr>
<td>ICO_SUFF</td>

<td>Icon file suffix. Icons can be specified in the resource source file.&nbsp;
This defaults to <b><tt>.ico</tt></b></td>
</tr>
</table>

<h3>
Variables Used with the Resource Compiler</h3>
The following table lists the variables used with the resource compiler
tool.&nbsp; Some of the variables are used for the same functions for C/C++
compiling.
<br>&nbsp;
<table BORDER >
<tr>
<td><b>Variable</b></td>

<td><b>Description</b></td>
</tr>

<tr>
<td>_RC_</td>

<td>The name of the resource compiler.&nbsp; By default it is <b>irc</b>
for VisualAge and <b>rc</b> for Microsoft Developers Studio.</td>
</tr>

<tr>
<td>RESOURCES</td>

<td>Used to specify a binary resource RES_SUFF file as a target to compile
in the OBJECTS pass.</td>
</tr>

<tr>
<td>RESOURCES_SRCS *</td>

<td>All the files that a target RES_SUFF file are made of and depend upon:
RC_SUFF, header, bitmap, cursor, font, and icon files.</td>
</tr>

<tr>
<td>RCFLAGS *</td>

<td>Used to set resource compiler flags from the makefile.</td>
</tr>

<tr>
<td>RCENV *</td>

<td>Used to set resource compiler flags from shell environment variables.</td>
</tr>

<tr>
<td>RCARGS *</td>

<td>Used to set resource compiler flags from the <b>build/mk</b> command
line.</td>
</tr>

<tr>
<td>OFILES *</td>

<td>This variable normally is used to specify objects that PROGRAMS, LIBRARIES,
and SHARED_LIBRARIES depend on for linking.&nbsp; RES_SUFF files also should
be specified in OFILES.</td>
</tr>
</table>
* These variables can be target specific.&nbsp; For example, the following
sets resource compile flags in the makefile only for the target file <b>ahellow4.res</b>
<p><font face="Courier New, Courier, mono">ahellow4.res_RCFLAGS += -DIC_WIN</font>
<h3>
Setting Resource Compiler Include Directories</h3>
The resource compiler can search directories for header files to be included.&nbsp;
The following table shows variables for setting the -I options list, and
the source of the specification.&nbsp; These are the same variables that
are used for the C/C++ compiler. They can be target specific.
<table BORDER >
<tr>
<td><b>Variable</b></td>

<td><b>Source of Specification</b></td>
</tr>

<tr>
<td>INCFLAGS</td>

<td>makefile</td>
</tr>

<tr>
<td>INCENV</td>

<td>shell environment variables</td>
</tr>

<tr>
<td>INCARGS</td>

<td><b>build/mk</b> command line</td>
</tr>
</table>

<h2>
<a NAME="DependencyRulesforResources"></a><a href="#ToC_DependencyRulesforResources">Dependency
rules for resources</a></h2>
Currently ODE does not scan <b>RC_SUFF</b> files to create dependency rules
automatically.&nbsp; If the user provides appropriate values in the RESOURCES_SRCS
variable, dependency rules are not necessary.&nbsp; The <i>RESOURCES_SRCS</i>
variables can be target-specific.&nbsp; Some portions of makefiles are
shown in examples below.
<p>Example 1.&nbsp; There is only one <b>RES_SUFF</b> file to build in
the directory, so use <i>RESOURCES_SRCS.</i>
<p><font face="Courier New, Courier, mono">RESOURCES = ahellow4${RES_SUFF}</font>
<br><font face="Courier New, Courier, mono">RESOURCES_SRCS = ahellow4${RC_SUFF}
ahellow4${ICO_SUFF} \</font>
<br><font face="Courier New, Courier, mono">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
${MAKETOP}include/ahellow4.h</font>
<p><font face="Courier New, Courier, mono"># include the ODE rules</font>
<br><font face="Courier New, Courier, mono">.include &lt;${RULES_MK}></font>
<p>Example 2.&nbsp; There is more than one<b> RES_SUFF </b>file to build
in the directory, so<i> target-specific</i> variables are needed.
<p><font face="Courier New, Courier, mono"># define two targets to compile</font>
<br><font face="Courier New, Courier, mono">RESOURCES = main${RES_SUFF}
dialog1${RES_SUFF}</font>
<p><font face="Courier New, Courier, mono"># set compile flags used for
both resource files</font>
<br><font face="Courier New, Courier, mono"># (a target-specifc RCFLAGS
variable not needed)</font>
<br><font face="Courier New, Courier, mono">RCFLAGS += -DIC_WIN</font>
<p><font face="Courier New, Courier, mono"># Include the ODE rules before
any macro assignments that have variable</font>
<br><font face="Courier New, Courier, mono"># substitutions before the
'=', for example the ${RES_SUFF} substitutions below.</font>
<br><font face="Courier New, Courier, mono">.include &lt;${RULES_MK}></font>
<p><font face="Courier New, Courier, mono"># the sources for the dialog
resource binary include a bitmap and a font</font>
<br><font face="Courier New, Courier, mono">dialog1${RES_SUFF}_RESOURCES_SRCS
=&nbsp; dialog1${RC_SUFF} \</font>
<br><font face="Courier New, Courier, mono">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
dialog1${BMP_SUFF} dialog1${FNT_SUFF} \</font>
<br><font face="Courier New, Courier, mono">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
${MAKETOP}include/resources.h</font>
<p><font face="Courier New, Courier, mono"># the sources for the main program
resource binary includes an icon</font>
<br><font face="Courier New, Courier, mono">main${RES_SUFF}_RESOURCES_SRCS
= main${ICO_FILE} \</font>
<br><font face="Courier New, Courier, mono">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
main${RC_SUFF} ${MAKETOP}include/resources.h</font>
<br>
<hr width="100%">
<h1>
<a NAME="LexRules"></a><a href="#ToC_LexRules">Lex rules</a></h1>
The following table defines the variables needed to use the lex commands:
<table BORDER >
<tr>
<th ALIGN=LEFT VALIGN=TOP>Variable</th>

<th ALIGN=LEFT VALIGN=TOP>Description</th>
</tr>

<tr>
<td>LEX_SUFF</td>

<td>The suffix for lex input files.&nbsp; The default value is <b>.l </b>(ell,
not one).</td>
</tr>

<tr>
<td>NO_LEX_RULES</td>

<td>If defined, the rules for lex are omitted.</td>
</tr>

<tr>
<td>LEX</td>

<td>The lex command to use, defaults to lex.</td>
</tr>

<tr>
<td>LARGS</td>

<td>Set on the <b>build</b> or <b>mk</b> command line to add flags to the
LEX command.</td>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>LENV</td>

<td ALIGN=LEFT VALIGN=TOP>Set as a shell environment variable to add flags
to the LEX command.</td>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>LFLAGS&nbsp;</td>

<td ALIGN=LEFT VALIGN=TOP>Set in <b>Makeconf</b> file or local makefile
to add flags to the LEX command.</td>
</tr>

<tr>
<td>KEEP_ALL_LEX_FILES</td>

<td>When defined, the file that the LEX command creates (ultimately, LEX_COMPILE_NAME,
see below) will <i>not</i> be removed after the object file is generated.&nbsp;
By default (when this variable is undefined), the LEX_COMPILE_NAME file
is removed.</td>
</tr>

<tr>
<td>LEX_YY_C</td>

<td>This specifies the name of the file that the LEX command creates. <b>lex.yy.c</b>
is the default. For example, some versions of lex output <b>lexyy.c</b>
instead, and this variable is how you inform ODE of this fact.</td>
</tr>

<tr>
<td>LEX_COMPILE_SUFF</td>

<td>The suffix that will be used when renaming the LEX_YY_C file to compile
it.&nbsp; The default is <b>.c</b>.&nbsp; When generating C++ code from
a lex file, it is often desirable to change the suffix to something like
<b>.C</b>
or <b>.cpp</b>, which is the purpose of this variable.</td>
</tr>

<tr>
<td>LEX_COMPILE_NAME</td>

<td>The LEX_YY_C file will be renamed to this prior to compiling it.&nbsp;
The default value is the name of the target (object) file with the LEX_COMPILE_SUFF
suffix substituted (i.e., if you're making foo.o from foo.lex, then LEX_COMPILE_NAME
will be foo.c).&nbsp; Normally the user does not need to change this variable.</td>
</tr>
</table>

<hr width="100%">
<h1>
<a NAME="YaccRules"></a><a href="#ToC_YaccRules">Yacc rules</a></h1>
The following table defines the variables needed to use the yacc commands:
<table BORDER >
<tr>
<th ALIGN=LEFT VALIGN=TOP>Variable</th>

<th ALIGN=LEFT VALIGN=TOP>Description</th>
</tr>

<tr>
<td>YACC_SUFF</td>

<td>The suffix for yacc input files.&nbsp; The default value is <b>.y</b>.</td>
</tr>

<tr>
<td>NO_YACC_RULES</td>

<td>If defined, the rules for yacc are omitted.</td>
</tr>

<tr>
<td>NO_Y_H_RULE</td>

<td>If defined, the ".y.h" suffix transformation is not included.&nbsp;
It is not necessary to define this variable if NO_YACC_RULES is defined.</td>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>YACC&nbsp;</td>

<td ALIGN=LEFT VALIGN=TOP>The yacc command to use, defaults to yacc.</td>
</tr>

<tr>
<td>YARGS</td>

<td>Set on the <b>build</b> or <b>mk</b> command line to add flags to the
YACC command.</td>
</tr>

<tr>
<td>YENV</td>

<td>Set as a shell environment variable to add flags to the YACC command.</td>
</tr>

<tr>
<td>YFLAGS</td>

<td>Set in <b>Makeconf</b> file or local makefile to add flags to the YACC
command.&nbsp; If KEEP_ALL_YACC_FILES is defined, and YFLAGS is undefined,
YFLAGS will implicitly include the "-d" flag (define YFLAGS to prevent
this).</td>
</tr>

<tr>
<td>KEEP_ALL_YACC_FILES</td>

<td>When defined, the files that the YACC command creates (ultimately,
YACC_COMPILE_NAME and YACC_HEADER_NAME, see below) will <i>not</i> be removed
after the object file is generated.&nbsp; By default (when this variable
is undefined), the YACC_COMPILE_NAME and YACC_HEADER_NAME files are removed.</td>
</tr>

<tr>
<td>YACC_COMPILE_SUFF</td>

<td>The suffix that will be used when renaming the Y_TAB_C file to compile
it.&nbsp; The default is <b>.c</b>.&nbsp; When generating C++ code from
a yacc file, it is often desirable to change the suffix to something like
<b>.C</b>
or <b>.cpp</b>, which is the purpose of this variable.</td>
</tr>

<tr>
<td>YACC_HEADER_SUFF</td>

<td>The suffix that will be used when renaming the Y_TAB_H file to use
for compilation.&nbsp; The default is <b>.h</b>.&nbsp; When generating
C++ code from a yacc file, it may be desirable to change the suffix to
something like <b>.hpp</b>, which is the purpose of this variable.</td>
</tr>

<tr>
<td>YACC_COMPILE_NAME</td>

<td>The Y_TAB_C file will be renamed to this prior to compiling it.&nbsp;
The default value is the name of the target (object) file with the YACC_COMPILE_SUFF
suffix substituted (i.e., if you're making foo.o from foo.yacc, then YACC_COMPILE_NAME
will be foo.c).&nbsp; Normally the user does not need to change this variable.</td>
</tr>

<tr>
<td>YACC_HEADER_NAME</td>

<td>The Y_TAB_H file will be renamed to this prior to using it for compilation.&nbsp;
The default value is the name of the target (object) file with the YACC_HEADER_SUFF
suffix substituted (i.e., if you're making foo.o from foo.yacc, then YACC_HEADER_NAME
will be foo.h).&nbsp; Normally the user does not need to change this variable,
unless their yacc file was written such that y.tab.h is used as the #include
header filename, in which case this variable can be set to ${Y_TAB_H}.</td>
</tr>

<tr>
<td>Y_TAB_C</td>

<td>This specifies the name of the source (.c) file that the YACC command
creates. <b>y.tab.c</b> is the default. For example, some versions of yacc
output <b>ytab.c</b> instead, and this variable is how you inform ODE of
this fact.</td>
</tr>

<tr>
<td>Y_TAB_H</td>

<td>This specifies the name of the header (.h) file that the YACC command
creates. <b>y.tab.h</b> is the default. For example, some versions of yacc
output <b>ytab.h</b> instead, and this variable is how you inform ODE of
this fact.</td>
</tr>
</table>

<h1>

<hr WIDTH="100%"><a NAME="CMVCRules"></a><a href="#ToC_CMVCRules">CMVC
rules</a></h1>
ODE provides some rules for limited support of command line checkout and
checkin of files, accepting defects, and completing fix records. The following
table defines the variables needed to use the CMVC commands:
<table BORDER >
<tr>
<th ALIGN=LEFT VALIGN=TOP>Variable</th>

<th ALIGN=LEFT VALIGN=TOP>Description</th>
</tr>

<tr>
<td>USE_CMVC_RULES</td>

<td>Must be defined to use the rules for CMVC. When defined, the targets
discussed below become available.</td>
</tr>

<tr>
<td>DEFECT</td>

<td>The defect name to work with. Defaults to the sandbox name.</td>
</tr>

<tr>
<td>ANS_ACCEPT</td>

<td>The answer (reason for the defect) used when accepting a defect; it
defaults to "program_defect". Use <b>accept</b> as the target to accept
a defect and create a single track for the defect.&nbsp;</td>
</tr>

<tr>
<td>CMVC_RELEASE</td>

<td>The release used when creating the track for a defect or when completing
fix records.</td>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP>COFLAGS&nbsp;</td>

<td ALIGN=LEFT VALIGN=TOP>Additional flags to the "File -checkout" command.</td>
</tr>

<tr>
<td>CIFLAGS</td>

<td>Additional flags to the "File -checkin" command.</td>
</tr>
</table>

<p>The CMVC rules make the following targets available if <b>USE_CMVC_RULES</b>
is defined:
<table BORDER >
<tr>
<td><b>Target</b></td>

<td><b>Use</b></td>
</tr>

<tr>
<td>accept</td>

<td>Accept a defect and create a track for it. Example: <b><tt>mk accept
DEFECT=123456</tt></b></td>
</tr>

<tr>
<td>co_<i>pathname</i></td>

<td>Check out a file, where <i>pathname</i> is relative to the sandbox
<b><tt>src</tt></b>
directory. The <i>pathname</i> also should be as it is stored in CMVC.
Example: <b><tt>mk co_bin/server/snark.c</tt></b> will check out <b>bin/server/snark.c</b>
to the sandbox <b><tt>src</tt></b> directory no matter what the current
directory is.</td>
</tr>

<tr>
<td>ci_<i>pathname</i></td>

<td>Check in a file, where <i>pathname</i> is relative to the sandbox <b><tt>src</tt></b>
directory. The <i>pathname</i> also should be as it is stored in CMVC.
Example: <b><tt>mk ci_bin/server/snark.c</tt></b> will check in the file
<b><tt><i>&lt;sandbox></i>/src/bin/server/snark.c</tt></b>
no matter what the current directory is.</td>
</tr>

<tr>
<td>complete</td>

<td>Complete the fix records for all components of the defect in the release.
Example:
<b><tt>mk complete DEFECT=123456</tt></b></td>
</tr>
</table>

<p>
<hr width="100%">
<h1>
<a NAME="TargSpecVar"></a><a href="#ToC_TargSpecVar">Target-specific variables</a></h1>
Certain variables in the rules can be set for a single target/file, which
will override the default setting of that variable.&nbsp; To use variables
in this "target-specific" manner, prepend the variable name with the target
name and a single underscore character.&nbsp; For example, consider the
following ODE makefile (explicit suffixes are used for clarity; normal
usage would employ PROG_SUFF and OBJ_SUFF):
<p><font face="Courier New, Courier, mono">PROGRAMS = foo1.exe foo2.exe
OFILES = ob1.obj ob2.obj ob3.obj ob4.obj .include &lt;${RULES_MK}></font>
<p>In this case, both <b>foo1</b>.exe and <b>foo2</b>.exe will be linked
from all four object files.&nbsp; This is almost certainly not the desired
effect.&nbsp; To designate specific objects to be used for each executable,
the <i>OFILES</i> variable can be used in a target-specific manner.&nbsp;
For example, if <b>ob1</b>.obj and <b>ob2</b>.obj are linked to form<b>
foo1</b>.exe, while <b>ob3.</b>obj and <b>ob4</b>.obj are linked to form
<b>foo2</b>.exe,
here is how the ODE makefile should look:
<p><font face="Courier New, Courier, mono">PROGRAMS = foo1.exe foo2.exe</font>
<br><font face="Courier New, Courier, mono">foo1.exe_OFILES = ob1.obj ob2.obj</font>
<br><font face="Courier New, Courier, mono">foo2.exe_OFILES = ob3.obj ob4.obj</font>
<br><font face="Courier New, Courier, mono">.include &lt;${RULES_MK}></font>
<p>If a target-specific version of a variable does not exist, the plain
version of the variable is used instead.&nbsp; So, the following makefile
would achieve the exact same effect as the one showed above:
<p><font face="Courier New, Courier, mono">PROGRAMS = foo1.exe foo2.exe</font>
<br><font face="Courier New, Courier, mono">foo1.exe_OFILES = ob1.obj ob2.obj</font>
<br><font face="Courier New, Courier, mono">OFILES = ob3.obj ob4.obj</font>
<br><font face="Courier New, Courier, mono">.include &lt;${RULES_MK}></font>
<p>In this case, when<b> foo2</b>.exe is linked, mk searches for <i>foo2.exe_OFILES</i>
but doesn't find such a variable.&nbsp; So instead it defaults to the objects
listed in <i>OFILES</i>.
<p>Note that the target used in the target-specific variable name is context-dependent,
which means that what the target should be depends on when/where the variable
is used.&nbsp; In the above examples, <i>OFILES</i> are used at link time,
which means that the targets would be the members of the <i>PROGRAMS</i>
or <i>SHARED_LIBRARIES</i> variables.&nbsp; Similarly, <i>CFLAGS</i> (another
variable which may be used in a target-specific manner) is employed at
compile time, which means that the targets are the object files.&nbsp;
So, an example target-specific use of <i>CFLAGS</i> would be "ob3.obj_CFLAGS
= <i>-flag</i>".
<p>The following table shows all of the predefined ODE rules variables
which may be used in a context-specific manner, along with the types of
files that would be used as targets.&nbsp; ODE suffix variable names are
shown when possible.&nbsp; In some cases the variables that contain the
appropriate types of files are used (for example, <b>JAVAH_TARGETS</b>),
since the suffixes may be arbitrary.
<br>&nbsp;
<table BORDER WIDTH="100%" >
<tr>
<td><b>Variable name</b></td>

<td><b>Filetypes of targets</b></td>
</tr>

<tr>
<td>LEX</td>

<td>OBJ_SUFF</td>
</tr>

<tr>
<td>YACC</td>

<td>OBJ_SUFF</td>
</tr>

<tr>
<td>CCVERSION</td>

<td>OBJ_SUFF, PP_SUFF, PROG_SUFF, STATLIB_SUFF, SHLIB_SUFF</td>
</tr>

<tr>
<td>CCTYPE</td>

<td>OBJ_SUFF, PP_SUFF, PROG_SUFF, STATLIB_SUFF, SHLIB_SUFF</td>
</tr>

<tr>
<td>CCFAMILY</td>

<td>OBJ_SUFF, PP_SUFF, PROG_SUFF, STATLIB_SUFF, SHLIB_SUFF</td>
</tr>

<tr>
<td>OPT_LEVEL</td>

<td>OBJ_SUFF, PP_SUFF, PROG_SUFF, SHLIB_SUFF</td>
</tr>

<tr>
<td>LIBARGS, LIBFLAGS, LIBENV</td>

<td>PROG_SUFF, SHLIB_SUFF</td>
</tr>

<tr>
<td>LIBS, LIBSENV, LIBSARGS</td>

<td>PROG_SUFF, SHLIB_SUFF</td>
</tr>

<tr>
<td>EXTRA_LIBS</td>

<td>PROG_SUFF, SHLIB_SUFF</td>
</tr>

<tr>
<td>CFLAGS, CARGS, CENV</td>

<td>OBJ_SUFF, PP_SUFF, .c, .h</td>
</tr>

<tr>
<td>INCFLAGS, INCARGS, INCENV</td>

<td>OBJ_SUFF, PP_SUFF, RES_SUFF</td>
</tr>

<tr>
<td>LDFLAGS, LDARGS, LDENV</td>

<td>PROG_SUFF</td>
</tr>

<tr>
<td>SHLDFLAGS, SHLDARGS, SHLDENV</td>

<td>SHLIB_SUFF</td>
</tr>

<tr>
<td>LFLAGS, LARGS, LENV</td>

<td>OBJ_SUFF, .c</td>
</tr>

<tr>
<td>YFLAGS, YARGS, YENV</td>

<td>OBJ_SUFF, .c, .h</td>
</tr>

<tr>
<td>ARFLAGS, ARARGS, ARENV</td>

<td>STATLIB_SUFF</td>
</tr>

<tr>
<td>IMPLIBFLAGS</td>

<td>IMPLIB_SUFF</td>
</tr>

<tr>
<td>IMPLIBARGS</td>

<td>IMPLIB_SUFF</td>
</tr>

<tr>
<td>CPPFILTFLAGS</td>

<td>DEFFILE_SUFF</td>
</tr>

<tr>
<td>OFILES</td>

<td>PROG_SUFF, SHLIB_SUFF, STATLIB_SUFF</td>
</tr>

<tr>
<td>GENDEPFLAGS, GENDEPARGS, GENDEPENV</td>

<td>DEP_SUFF</td>
</tr>

<tr>
<td>EXPDIR</td>

<td>EXPINCS, EXPLIBS, etc.</td>
</tr>

<tr>
<td>RELATIVE_EXPLIB_TARGET, RELATIVE_EXPINC_TARGET</td>

<td>EXPINCS, EXPLIBS, etc.</td>
</tr>

<tr>
<td>IDIR</td>

<td>ILIST</td>
</tr>

<tr>
<td>SETUPDIR</td>

<td>SETUP_PROGRAMS, SETUP_SCRIPTS</td>
</tr>

<tr>
<td>JAVA_PACKAGE_NAME</td>

<td>JAVAH_TARGETS</td>
</tr>

<tr>
<td>JFLAGS, JARGS, JENV</td>

<td>CLASS_SUFF</td>
</tr>

<tr>
<td>JAVADEPFLAGS</td>

<td>CLASS_SUFF</td>
</tr>

<tr>
<td>JARFLAGS
<br>EARFLAGS
<br>WARFLAGS</td>

<td>JAR_SUFF
<br>EAR_SUFF
<br>WAR_SUFF</td>
</tr>

<tr>
<td>JAR_OBJECTS, SIGNED_JAR_OBJECTS
<br>EAR_OBJECTS, SIGNED_EAR_OBJECTS
<br>WAR_OBJECTS, SIGNED_WAR_OBJECTS</td>

<td>JAR_SUFF
<br>EAR_SUFF
<br>WAR_SUFF</td>
</tr>

<tr>
<td>OTHER_JAR_OBJECTS, OTHER_SIGNED_JAR_OBJECTS
<br>OTHER_EAR_OBJECTS, OTHER_SIGNED_EAR_OBJECTS
<br>OTHER_WAR_OBJECTS, OTHER_SIGNED_WAR_OBJECTS</td>

<td>JAR_SUFF
<br>EAR_SUFF
<br>WAR_SUFF</td>
</tr>

<tr>
<td>JAR_FILE_ARGS, SIGNED_JAR_FILE_ARGS
<br>EAR_FILE_ARGS, SIGNED_EAR_FILE_ARGS
<br>WAR_FILE_ARGS, SIGNED_WAR_FILE_ARGS</td>

<td>JAR_SUFF
<br>EAR_SUFF
<br>WAR_SUFF</td>
</tr>

<tr>
<td>JAR_RUNDIR
<br>EAR_RUNDIR
<br>WAR_RUNDIR</td>

<td>JAR_SUFF
<br>EAR_SUFF
<br>WAR_SUFF</td>
</tr>

<tr>
<td>JAR_MANIFEST, SIGNED_JAR_MANIFEST
<br>EAR_MANIFEST, SIGNED_EAR_MANIFEST
<br>WAR_MANIFEST, SIGNED_WAR_MANIFEST</td>

<td>JAR_SUFF
<br>EAR_SUFF
<br>WAR_SUFF</td>
</tr>

<tr>
<td>JAVAKEYFLAGS</td>

<td>JAR_SUFF
<br>EAR_SUFF
<br>WAR_SUFF</td>
</tr>

<tr>
<td>N2ACODEPAGE</td>

<td>PROP_SUFF</td>
</tr>

<tr>
<td>N2AENV, N2AFLAGS, N2AARGS</td>

<td>PROP_SUFF</td>
</tr>

<tr>
<td>MCENV, MCFLAGS, MCARGS</td>

<td>HDR_SUFF</td>
</tr>

<tr>
<td>HCFLAGS, HCARGS, HCENV</td>

<td>HLP_SUFF</td>
</tr>

<tr>
<td>HELPS_SRCS</td>

<td>HPJ_SUFF, RTF_SUFF</td>
</tr>

<tr>
<td>IPFHELPS_SRCS</td>

<td>IPF_SUFF</td>
</tr>

<tr>
<td>INFS_SRCS</td>

<td>IPF_SUFF</td>
</tr>

<tr>
<td>CATALOGS_SRCS</td>

<td>CAT_SUFF</td>
</tr>

<tr>
<td>MSG_HDRS_SRCS</td>

<td>HDR_SUFF</td>
</tr>

<tr>
<td>GENCATENV, GENCATFLAGS, GENCATARGS</td>

<td>CAT_SUFF</td>
</tr>

<tr>
<td>MKCATENV, MKCATFLAGS, MKCATARGS</td>

<td>HDR_SUFF</td>
</tr>

<tr>
<td>CODEPAGE_SRCS</td>

<td>CODEPAGE_TGTS</td>
</tr>

<tr>
<td>CODEPAGE_TO, CODEPAGE_FROM</td>

<td>CODEPAGE_TGTS</td>
</tr>

<tr>
<td>ICONVENV, ICONVFLAGS, ICONVARGS</td>

<td>CODEPAGE_TGTS</td>
</tr>

<tr>
<td>RESOURCES_SRCS</td>

<td>RES_SUFF</td>
</tr>

<tr>
<td>RCENV, RCFLAGS, RCARGS</td>

<td>RES_SUFF</td>
</tr>
</table>

<p>
<hr width="100%">
<h1>
<a NAME="MiscRules"></a><a href="#ToC_MiscRules">Miscellaneous rules</a></h1>

<h2>
<a NAME="Longcommandlines"></a><b><a href="#ToC_Longcommandlines">Long
command lines</a></b></h2>
A special variable, <i>USE_RESPFILE</i>, is set to indicate to the rules
that an inline response file should be created and used.&nbsp; The <i>USE_RESPFILE</i>
variable applies to compilers and linkers on Windows and OS/2.&nbsp; The
<i>USE_JAVA_RESPFILE</i>
variable applies to JDK1.2 tools.
<p>On Unix platforms, <i>SHORT_OBJ_PATHS</i> may be defined in order to
make the object filenames passed to the linker or archiver (for creating
<i>PROGRAMS</i>,
<i>LIBRARIES</i>,
and <i>SHARED_LIBRARIES</i>) omit the path in cases where the file exists
in the current directory of the sandbox (in which case the full path would
not be necessary).&nbsp; This can greatly reduce command line length when
most of the objects are built in the current sandbox.
<br>&nbsp;
<h2>
<a NAME="SubDirLogRules"></a><b><a href="#ToC_SubDirLogRules">Logging per
directory output</a></b></h2>
There is a special variable: MAKE_LOGGER, that is used to append a logging
command to each subdirectory execution of the <b>mk</b> command.&nbsp;
The best place to set the MAKE_LOGGER variable is in the Makeconf file.
<p>An example of a Makeconf that will output both standard output and error
output to a file called <font face="Courier New,Courier">subdir.log</font>
is:
<br><font face="Courier New,Courier">&nbsp; # Variables to log subdirectory
output from the 'mk' command</font>
<br><font face="Courier New,Courier">&nbsp; MAKE_LOGGER = > subdir.log
2>&amp;1</font>
<p>The use of this type of logging will only log subdirectory output.&nbsp;
To get output from the top-level build command, then simply redirect the
output like:
<br><font face="Courier New,Courier">&nbsp; build > subdir.log 2>&amp;1</font>
<h2>
<a NAME="FilesInCurDir"></a><a href="#ToC_FilesInCurDir">Files in the current
directory</a></h2>
For convenience, several variables are defined for use in writing makefiles.
They all list files or directories that are found in the current directory
or in the corresponding directories on the backing chain. The variable
definitions may be overridden by the user.
<dl>
<dt>
USE_FILEFIND</dt>

<dd>
This variable must be defined in order to use the default definitions of
the following variables.</dd>

<dt>
DIR_CONTENTS</dt>

<dd>
All files and directories (with absolute paths) that are in the current
directory throughout the backing chain. This variable can be overridden
in a makefile only after the <b>.include &lt;${RULES_MK}></b> line.</dd>

<dt>
ALL_DIRS</dt>

<dd>
All directories (with absolute paths) that are in the current directory
throughout the backing chain.</dd>

<dt>
ALL_SUBDIRS</dt>

<dd>
All directories (without paths) that are in the current directory throughout
the backing chain. This variable is intended to be used in the SUBDIRS
variable.</dd>

<dt>
ALL_FILES</dt>

<dd>
All files (with absolute paths) that are in the current directory throughout
the backing chain.</dd>

<dt>
ALL_C_OFILES</dt>

<dd>
All files (without paths) that are in the current directory throughout
the backing chain which have suffixes defined in CC_SUFF, but with the
suffixes replaced by OBJ_SUFF. This variable is intended to be used in
the OFILES variable.</dd>

<dt>
ALL_JAVA_CLASSES</dt>

<dd>
&nbsp;All files (without paths) that are in the current directory throughout
the backing chain which have the suffix defined in JAVA_SUFF, but with
the suffixes replaced by CLASS_SUFF. This variable is intended to be used
in the JAVA_CLASSES variable.</dd>
</dl>

<h3>
Examples</h3>
Assume that sandbox <b>/u/joe/sb1</b> is backed by <b>/proj/bb2</b>, a
<b>workon
sb1</b> is in effect, and the current directory is <b>/u/joe/sb1/src/client</b>.
Assume that in the sandbox only files <b>Makefile</b> and <b>client.cpp</b>
exist, but the backing build has versions of the same two files and also
has two subdirectories <b>public</b> and <b>crypto</b>, and files <b>mach.c</b>
and <b>prot.cpp</b>. To use the above variables, <b>Makefile</b> defines
<b>USE_FILEFIND</b>.
<p><b>ALL_FILES</b> would have a value like: /u/joe/sb1/src/client/Makefile
/u/joe/sb1/src/client/client.cpp /proj/bb2/src/client/mach.c /proj/bb2/src/client/prot.cpp
<br><b>ALL_DIRS</b> would have the value: /proj/bb2/src/client/crypto /proj/bb2/src/client/public
<br>Then <b>Makefile</b> could have the rule
<br><b>SUBDIRS = ${ALL_SUBDIRS}</b>
<br>to cause <b>crypto</b> and <b>public</b> to be visited by <b>mk</b>
when building.
<br>Then <b>SUBDIRS</b> would have the value: crypto public
<br>The variable <b>ALL_C_OFILES</b> would have the value: client.o mach.o
prot.o
<br>&nbsp;
<h2>
<a NAME="concurrent_dirs"></a><a href="#ToC_concurrent_dirs">Building subdirectories
concurrently</a></h2>
Defining the variable DIRS_IN_PARALLEL will cause subdirectories to be
traversed concurrently, up to the limit specified by <b>mk</b>'s <b>-j</b>
flag (or the value of NPROC).&nbsp; However, care should be taken when
using this feature:
<br>&nbsp;
<ol>
<li>
The DIRS_IN_PARALLEL variable should <i>not</i> be set in Makeconf, in
the rules, as an environment variable, or on the command line.&nbsp; It
is highly recommended to only set this variable in Makefile/Makefile.ode
as needed so that the concurrency doesn't get out of hand.</li>

<li>
NPROC should be set appropriately in subdirectories which will be processed
concurrently in order to control the total number of jobs that will be
running at any given time.&nbsp; Each concurrent <b>mk</b> process will
run a maximum of NPROC jobs at once, so multiply that times the number
of concurrent directories being processed to determine the total number
of concurrent jobs that can be running at any given time.</li>
</ol>

<h2>
<a NAME="special_passes"></a><a href="#ToC_special_passes">Avoiding recursive
Make</a></h2>
The default behavoir is that <b>mk</b> will recursively call itself for
each subdirectory it traverses.&nbsp;&nbsp; Thus, a separate instance of
<b>mk</b>
is loaded for each directory.&nbsp; You can avoid multiple simultaneous
loading of the mk executable by defining the variable <b>SPECIAL_PASSES</b>.&nbsp;
In this case, only one version of mk is loaded into memory.
<p>The advantage is performance.&nbsp; The performance improvement will
be most significant when the build tree has many subdirectories but only
a small number of targets are out of date.&nbsp; Directories whose targets
are all up to date are processed much quicker when SPECIAL_PASSES is defined.
<p>Because there is only one instance of <b>mk</b>,&nbsp; the subdirectories
are processed sequentially, and therefore DIRS_IN_PARALLEL (variable described
in previous section) may not be combined with SPECIAL_PASSES.&nbsp; However,
multiple targets within the same directory will be updated concurrently,
up to the limit specified by <b>mk</b>'s <b>-j</b> flag (or the value of
NPROC).&nbsp; The size of <b>mk</b> will grow with large build trees.&nbsp;
In the case of extremely large trees this may get out of hand, and consequently
we are investigating improvements to this for future availability.
<p><a NAME="Bot_Of_Page"></a> 
</body>
</html>
